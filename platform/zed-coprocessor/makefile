
top: help

# User configuration.
config.makefile:
	@echo "" >> $@
	@echo "# User configuration file. This file is ignored by git and generated by makefile" >> $@
	@echo "# if it does not exist." >> $@
	@echo "" >> $@
	@echo "# Vivado setup. This platform assumes Vivado 2015.2. The makefile will" >> $@
	@echo "# automatically source Vivado's environment script only when it needs it," >> $@
	@echo "# because Vivado's environment breaks some user tools." >> $@
	@echo "VIVADO_ENV = /opt/applics/bin/xilinx-vivado-2015.2.sh" >> $@
	@echo "" >> $@
-include config.makefile

# Basic tools.
CP             = cp
RM             = rm -f
MKDIR          = mkdir
GIT            = git
WGET           = wget
TAR            = tar
UNZIP          = unzip
SED            = sed
GREP           = grep
PYTHON         = python

# Nonstandard tools which you might need to get from your package manager.
DTC            = dtc

# Xilinx tools.
VIVADO         = source $(VIVADO_ENV) && vivado
HSI            = source $(VIVADO_ENV) && hsi
BOOTGEN        = source $(VIVADO_ENV) && bootgen

# SD card formatting tools.
DD             = dd
MOUNT          = mount
UMOUNT         = umount
SFDISK         = sfdisk
MKFS_FAT       = mkfs.vfat
MKFS_EXT4      = mkfs.ext4

# Basic paths and URLs.
TEMP           = temp
DL             = downloads
BOOT           = boot

# DTB-generation repository.
DTB_XLNX_REPO  = git://github.com/Xilinx/device-tree-xlnx.git
DTB_XLNX_PATH  = $(DL)/device-tree-xlnx
DTB_XLNX_DEP   = $(DTB_XLNX_PATH)/.time-downloaded

# Zedboard pre-built/out-of-the-box design files.
OOB_URL        = https://reference.digilentinc.com/_media/zedboard:zedboard_oob_design.zip
OOB_PATH       = $(DL)/oob
OOB_DEP        = $(OOB_PATH)/.time-downloaded
OOB_UBOOT_ELF  = $(OOB_PATH)/ZedBoard_OOB_Design/boot_image/u-boot.elf
OOB_FSBL_ELF   = $(OOB_PATH)/ZedBoard_OOB_Design/boot_image/zynq_fsbl.elf
OOB_BOOT_BIN   = $(OOB_PATH)/ZedBoard_OOB_Design/sd_image/BOOT.BIN
OOB_ZIMAGE     = $(OOB_PATH)/ZedBoard_OOB_Design/sd_image/zImage

# Linaro Linux download.
LINARO_URL     = https://releases.linaro.org/archive/12.09/ubuntu/leb-panda/linaro-precise-ubuntu-desktop-20120923-436.tar.gz
LINARO_PATH    = $(DL)/linaro
LINARO_TGZ     = $(LINARO_PATH)/linaro.tar.gz
LINARO_DEP     = $(LINARO_TGZ)

# Programmable logic Vivado project paths.
VIV_PLSYS_PATH = vivado/zed-coprocessor
VIV_PLSYS_XPR  = zed-coprocessor.xpr
VIV_PLSYS_BIT  = $(VIV_PLSYS_PATH)/zed-coprocessor.runs/impl_1/system_wrapper.bit
VIV_PLSYS_HDF  = $(VIV_PLSYS_PATH)/zed-coprocessor.runs/impl_1/system_wrapper.sysdef

# Device tree and boot files.
BOOT_IMG       = $(BOOT)/image
DEVTREE_DTS    = $(BOOT)/dts/system.dts
DEVTREE_DTB    = $(BOOT_IMG)/devicetree_linaro.dtb
BOOT_BIN       = $(BOOT_IMG)/BOOT.BIN
ZIMAGE         = $(BOOT_IMG)/zImage

# Linux paths.
LINUX          = linux


#-------------------------------------------------------------------------------
# Housekeeping
#-------------------------------------------------------------------------------

.PHONY: help
help:
	@echo ""
	@echo " This platform consists of the rvex processor running as a coprocessor for"
	@echo " Linaro Ubuntu linux running on the ARM core in the Zynq SoC on the Zedboard."
	@echo ""
	@echo " This platform requires Vivado 2015.2. It will automatically source the"
	@echo " environment script when needed; don't do this manually! The location of the"
	@echo " script is configured in config.makefile."
	@echo ""
	@echo " Make targets:"
	@echo ""
	@echo "  reconfigure       : opens the programmable logic block diagram in Vivado, to"
	@echo "                      let you reconfigure the PL peripherals."
	@echo ""
	@echo "  bitfile           : regenerates the Zedboard bit file."
	@echo ""
	@echo "  sdcard            : images a Zedboard-bootable SD card."
	@echo ""
	@echo "  clean             : removes all generated files."
	@echo ""
	@echo "  clean-dl          : removes all downloaded files."
	@echo ""

.PHONY: clean
clean:
	$(RM) -r $(TEMP)
	@echo "reset_project" > $(TEMP)
	cd $(VIV_PLSYS_PATH) && $(VIVADO) -mode batch -source ../../$(TEMP) $(VIV_PLSYS_XPR)
	$(RM) -r $(TEMP) $(BOOT)
	$(RM) *.jou *.log

.PHONY: clean-dl
clean-dl:
	$(RM) -rf $(DL)


#-------------------------------------------------------------------------------
# PL (programmable logic) configuration and synthesis
#-------------------------------------------------------------------------------

# Opens the PL system Vivado project to allow the user to (re)configure the
# available peripherals.
.PHONY: reconfigure
reconfigure:
	$(RM) -r $(TEMP)
	@echo "start_gui" >> $(TEMP)
	@echo "open_bd_design {zed-coprocessor.srcs/sources_1/bd/system/system.bd}" >> $(TEMP)
	cd $(VIV_PLSYS_PATH) && $(VIVADO) -mode tcl -source ../../$(TEMP) $(VIV_PLSYS_XPR)
	$(RM) -r $(TEMP)

.PHONY: bitfile
bitfile:
	$(MAKE) -B $(VIV_PLSYS_BIT)
	$(CP) $(VIV_PLSYS_BIT) system.bit

# Cleans and subsequently rebuilds the Vivado PL system project to get the
# bitfile, as well as the HDF file for the SDK.
$(VIV_PLSYS_BIT) $(VIV_PLSYS_HDF):
	$(RM) -r $(TEMP)
	@echo "reset_project" > $(TEMP)
	@echo "generate_target all [get_files zed-coprocessor.srcs/sources_1/bd/system/system.bd]" >> $(TEMP)
	@echo "make_wrapper -files [get_files zed-coprocessor.srcs/sources_1/bd/system/system.bd] -top" >> $(TEMP)
	@echo "launch_runs synth_1 -jobs 4" >> $(TEMP)
	@echo "wait_on_run synth_1" >> $(TEMP)
	@echo "launch_runs impl_1 -to_step write_bitstream -jobs 4" >> $(TEMP)
	@echo "wait_on_run impl_1" >> $(TEMP)
	cd $(VIV_PLSYS_PATH) && $(VIVADO) -mode batch -source ../../$(TEMP) $(VIV_PLSYS_XPR)
	$(RM) -r $(TEMP)


#-------------------------------------------------------------------------------
# Boot partition generation
#-------------------------------------------------------------------------------

boot: $(DEVTREE_DTB) $(BOOT_BIN) $(ZIMAGE)

$(DTB_XLNX_DEP):
	$(MKDIR) -p $(DTB_XLNX_PATH)
	$(GIT) clone $(DTB_XLNX_REPO) $(DTB_XLNX_PATH)
	@echo "" > $@

$(DEVTREE_DTS): $(DTB_XLNX_DEP) $(VIV_PLSYS_HDF)
	$(RM) -r $(BOOT)/hsi
	$(RM) -r $(BOOT)/dts
	$(MKDIR) -p $(BOOT)/hsi
	$(CP) $(VIV_PLSYS_HDF) $(BOOT)/hsi/system_wrapper.hdf
	@echo "open_hw_design system_wrapper.hdf" > $(BOOT)/hsi/source_hsi.tcl
	@echo "set_repo_path $(realpath $(DTB_XLNX_PATH))" >> $(BOOT)/hsi/source_hsi.tcl
	@echo "create_sw_design device-tree -os device_tree -proc ps7_cortexa9_0" >> $(BOOT)/hsi/source_hsi.tcl
	@echo "generate_target -dir ../dts" >> $(BOOT)/hsi/source_hsi.tcl
	cd $(BOOT)/hsi && $(HSI) -source source_hsi.tcl -mode batch

$(DEVTREE_DTB): $(DEVTREE_DTS)
	$(MKDIR) -p $(BOOT_IMG)
	$(DTC) -I dts -O dtb -o $@ $<

$(OOB_DEP):
	$(MKDIR) -p $(OOB_PATH)
	$(RM) -rf $(OOB_PATH)/*
	cd $(OOB_PATH) && $(WGET) --no-check-certificate -O oob.zip $(OOB_URL)
	cd $(OOB_PATH) && $(UNZIP) oob.zip
	$(RM) $(OOB_PATH)/oob.zip
	@echo "" > $@

$(BOOT_BIN): $(OOB_DEP) $(VIV_PLSYS_BIT)
	$(MKDIR) -p $(BOOT_IMG)
	@echo "the_ROM_image:" > $(BOOT)/output.bif
	@echo "{" >> $(BOOT)/output.bif
	@echo "	[bootloader]$(realpath $(OOB_FSBL_ELF))" >> $(BOOT)/output.bif
	@echo "	$(realpath $(VIV_PLSYS_BIT))" >> $(BOOT)/output.bif
	@echo "	$(realpath $(OOB_UBOOT_ELF))" >> $(BOOT)/output.bif
	@echo "}" >> $(BOOT)/output.bif
	cd $(BOOT) && $(BOOTGEN) -image output.bif -o $(shell pwd)/$(BOOT_BIN)

$(ZIMAGE): $(OOB_DEP)
	$(CP) $(OOB_ZIMAGE) $(ZIMAGE)


#-------------------------------------------------------------------------------
# Linaro stuff
#-------------------------------------------------------------------------------

$(LINARO_TGZ):
	$(MKDIR) -p $(LINARO_PATH)
	$(WGET) --no-check-certificate -O $(LINARO_TGZ) $(LINARO_URL)


#-------------------------------------------------------------------------------
# Zedboard bootable SD card formatting
#-------------------------------------------------------------------------------

sdcard-deps: boot $(LINARO_TGZ)

.PHONY: sdcard
ifndef DEV
sdcard:
	@echo ""
	@echo " This command images an SD card to work with the zedboard."
	@echo ""
	@echo " Call it like this:"
	@echo ""
	@echo "   make sdcard-deps"
	@echo "   [sudo] make sdcard DEV=/dev/<device-file>"
	@echo ""
	@echo " On my system, <device-file> is mmcblk0, but it might be different for you."
	@echo ""
	@echo " BE EXTREMELY CAREFUL. IF YOU SPECIFY THE WRONG DEVICE FILE, YOU COULD DESTROY"
	@echo " YOUR SYSTEM. ALSO, THE CONTENTS OF THE SD CARD WILL BE DESTROYED."
	@echo ""
	@echo " If you run into problems, filling the MBR and boot partition with zeros before"
	@echo " formatting might help. You can do this by appending NUKE=1 to the make command."
	@echo ""
else
DEVP := $(shell echo $(DEV) | $(SED) -E "s/([0-9])$$/\1p/")
DEVP1 = $(DEVP)1
DEVP2 = $(DEVP)2
sdcard:
	
	# Make sure the user knows what (s)he's doing.
	@echo "ABOUT TO IMAGE $(DEV). IT WILL BE OVERWRITTEN."
	@$(PYTHON) -c "x=raw_input('Type YES if you really want this: '); import sys; sys.exit(0 if x == 'YES' else 1)"
	
	# Unmount partitions, just in case.
	-$(UMOUNT) $(DEVP1)
	-$(UMOUNT) $(DEVP2)
	
ifdef NUKE
	# Nuke any existing master boot record.
	-$(DD) if=/dev/zero of=$(DEV) bs=65536 count=2
endif
	
	# Make master boot record.
	$(RM) -r $(TEMP)
	@echo "# partition table of /correct/table" > $(TEMP)
	@echo "unit: sectors" >> $(TEMP)
	@echo "" >> $(TEMP)
	@echo "/correct/table/backup1 : start=     8192, size=   131072, Id= b" >> $(TEMP)
	@echo "/correct/table/backup2 : start=   147456, size=         , Id=83" >> $(TEMP)
	@echo "/correct/table/backup3 : start=        0, size=        0, Id= 0" >> $(TEMP)
	@echo "/correct/table/backup4 : start=        0, size=        0, Id= 0" >> $(TEMP)
	$(SFDISK) $(DEV) -H128 -S63 -f --no-reread < $(TEMP)
	$(RM) -r $(TEMP)
	
ifdef NUKE
	# Nuke any existing data on the boot partition.
	-$(DD) if=/dev/zero of=$(DEVP1) bs=65536
endif
	
	# Format the boot partition.
	$(MKFS_FAT) -F 32 -s 1 -n boot $(DEVP1)
	
	# Copy the boot files to the boot partition.
	$(MKDIR) -p $(TEMP)
	$(MOUNT) $(DEVP1) $(TEMP)
	$(CP) $(BOOT_IMG)/* $(TEMP)
	$(UMOUNT) $(DEVP1)
	$(RM) -r $(TEMP)
	
	# Format EXT4 Linaro root filesystem.
	$(MKFS_EXT4) -F -L root $(DEVP2)
	
	# Copy the Linaro filesystem.
	$(MKDIR) -p $(TEMP)
	$(MOUNT) $(DEVP2) $(TEMP)
	$(TAR) xzvf $(LINARO_TGZ) -C $(TEMP) --strip-components=3 binary/boot/filesystem.dir
	$(CP) -rf $(LINUX)/* $(TEMP)
	$(UMOUNT) $(DEVP2)
	$(RM) -r $(TEMP)
	
endif


#-------------------------------------------------------------------------------
# Old stuff...
#-------------------------------------------------------------------------------

# XSDK           = source $(VIVADO_ENV) && xsdk
# XSDB           = source $(VIVADO_ENV) && xsdb
# VIV_PLSYS_SDK_HDF = $(VIV_PLSYS_PATH)/zed-coprocessor.sdk/system_wrapper.hdf
# VIV_PLSYS_SDK  = $(VIV_PLSYS_PATH)/zed-coprocessor.sdk
# 
# xsdk: $(DTB_XLNX_DEP) $(VIV_PLSYS_HDF)
# 	$(RM) -r $(VIV_PLSYS_SDK)
# 	$(MKDIR) -p $(VIV_PLSYS_SDK)/empty
# 	$(CP) -f $(VIV_PLSYS_HDF) $(VIV_PLSYS_SDK_HDF)
# 	
# 	$(XSDK) -hwspec $(VIV_PLSYS_SDK_HDF) -workspace $(VIV_PLSYS_SDK)
# 
# xsdk: $(DTB_XLNX_DEP) $(VIV_PLSYS_HDF)
# 	$(RM) -r $(VIV_PLSYS_SDK)
# 	$(MKDIR) -p $(VIV_PLSYS_SDK)/empty
# 	$(CP) -f $(VIV_PLSYS_HDF) $(VIV_PLSYS_SDK_HDF)
# 	
# 	$(RM) -r $(TEMP)
# 	@echo "sdk set_workspace $(VIV_PLSYS_SDK)" > $(TEMP)
# 	@echo "sdk create_hw_project -name system_wrapper_hw_platform_0 -hwspec $(VIV_PLSYS_SDK_HDF)" >> $(TEMP)
# 	@echo "sdk set_user_repo_path $(DTB_XLNX_PATH)" >> $(TEMP)
# 	@echo "exit" >> $(TEMP)
# 	$(XSDB) -s $(TEMP)
# 	$(RM) -r $(TEMP)
# 	
# 	$(XSDK) -workspace $(VIV_PLSYS_SDK)



