
top: help

# User configuration.
config.makefile:
	@if [ ! -f $@ ]; then \
		echo "" > $@; \
		echo "# User configuration file. This file is ignored by git and generated by makefile" >> $@; \
		echo "# if it does not exist." >> $@; \
		echo "" >> $@; \
		echo "# Vivado setup. This platform assumes Vivado 2015.2. The makefile will" >> $@; \
		echo "# automatically source Vivado's environment script only when it needs it," >> $@; \
		echo "# because Vivado's environment breaks some user tools." >> $@; \
		echo "VIVADO_ENV = /opt/applics/bin/xilinx-vivado-2015.2.sh" >> $@; \
		echo "" >> $@; \
		echo "Created default config.makefile."; \
	fi
-include config.makefile

# Uncomment to use the Xilinx-generated device tree instead of the confirmed
# working no-pl device tree.
#USE_XILINX_DEVTREE=1

# Uncomment to use the out-of-box design u-boot and kernel, which definitely
# works, but you need to manually boot using "run sdboot_linaro". If this is
# is commented, u-boot and the kernel will be compiled locally.
#USE_OOB_KERNEL=1

# Basic tools.
CP             = cp
RM             = rm -f
MKDIR          = mkdir
CHMOD          = chmod
CHOWN          = chown
GIT            = git
WGET           = wget
TAR            = tar
UNZIP          = unzip
SED            = sed
GREP           = grep
PYTHON         = python
EXPECT         = expect
SSH            = ssh
SSH_KEYGEN     = ssh-keygen
DTC            = dtc

# Xilinx tools.
WITH_VIVADO    = source $(VIVADO_ENV) &&
VIVADO         = $(WITH_VIVADO) vivado
HSI            = $(WITH_VIVADO) hsi
BOOTGEN        = $(WITH_VIVADO) bootgen
ARM_CROSS      = $(WITH_VIVADO) export CROSS_COMPILE=arm-xilinx-linux-gnueabi- &&

# SD card formatting tools.
DD             = dd
MOUNT          = mount
UMOUNT         = umount
SFDISK         = sfdisk
MKFS_FAT       = mkfs.vfat
MKFS_EXT4      = mkfs.ext4

# Basic paths and URLs.
TEMP           = temp
DL             = downloads
BOOT           = boot

# Zedboard pre-built/out-of-the-box design files.
OOB_URL        = https://reference.digilentinc.com/_media/zedboard:zedboard_oob_design.zip
OOB_PATH       = $(DL)/oob
OOB_DEP        = $(OOB_PATH)/.time-downloaded
OOB_UBOOT_ELF  = $(OOB_PATH)/ZedBoard_OOB_Design/boot_image/u-boot.elf
OOB_FSBL_ELF   = $(OOB_PATH)/ZedBoard_OOB_Design/boot_image/zynq_fsbl.elf
OOB_BOOT_BIN   = $(OOB_PATH)/ZedBoard_OOB_Design/sd_image/BOOT.BIN
OOB_ZIMAGE     = $(OOB_PATH)/ZedBoard_OOB_Design/sd_image/zImage

# Programmable logic Vivado project paths.
VIV_PLSYS_PATH = vivado/zed-coprocessor
VIV_PLSYS_XPR  = zed-coprocessor.xpr
VIV_PLSYS_BD   = $(VIV_PLSYS_PATH)/zed-coprocessor.srcs/sources_1/bd/system/system.bd
VIV_PLSYS_BIT  = $(VIV_PLSYS_PATH)/zed-coprocessor.runs/impl_1/system_wrapper.bit
VIV_PLSYS_HDF  = $(VIV_PLSYS_PATH)/zed-coprocessor.runs/impl_1/system_wrapper.sysdef

# Device tree stuff.
DTB_XLNX_REPO  = git://github.com/Xilinx/device-tree-xlnx.git
DTB_XLNX_PATH  = $(DL)/device-tree-xlnx
DTB_XLNX_DEP   = $(DTB_XLNX_PATH)/.time-downloaded
DEVTREE_DTS    = $(BOOT)/dts/system.dts

# U-boot bootloader.
UBOOT_REPO     = https://github.com/Xilinx/u-boot-xlnx.git
UBOOT_TAG      = xilinx-v14.4
UBOOT_COMMIT   = b7aa48eabf62c25ee78e7660eb658ca35466597f
UBOOT_PATH     = $(DL)/u-boot
UBOOT_DEP      = $(DL)/.u-boot-time-downloaded
UBOOT_PATCH    = design/u-boot.patch
UBOOT_OUT      = $(UBOOT_PATH)/u-boot
UBOOT_ELF      = $(BOOT)/u-boot.elf

# Linux kernel.
KERNEL_REPO    = https://github.com/analogdevicesinc/linux.git
KERNEL_TAG     = xcomm_zynq_4_0
KERNEL_COMMIT  = 8234393cbdc488574fc48bbba9c063b1646611ec
KERNEL_PATH    = $(DL)/kernel
KERNEL_DEP     = $(DL)/.kernel-time-downloaded
KERNEL_UIMAGE  = $(KERNEL_PATH)/arch/arm/boot/uImage
KERNEL_DTS_PATH= $(KERNEL_PATH)/arch/arm/boot/dts

# Device tree and boot files.
BOOT_IMG       = $(BOOT)/image
DEVTREE        = $(BOOT_IMG)/devicetree_linaro.dtb
BOOT_BIN       = $(BOOT_IMG)/BOOT.BIN
KERNEL_IMAGE   = $(BOOT_IMG)/zImage

# Linaro Linux download.
LINARO_URL     = https://releases.linaro.org/archive/12.09/ubuntu/leb-panda/linaro-precise-ubuntu-desktop-20120923-436.tar.gz
LINARO_PATH    = $(DL)/linaro
LINARO_TGZ     = $(LINARO_PATH)/linaro.tar.gz
LINARO_DEP     = $(LINARO_TGZ)


#-------------------------------------------------------------------------------
# Housekeeping
#-------------------------------------------------------------------------------

.PHONY: help
help:
	@echo ""
	@echo " This platform consists of the rvex processor running as a coprocessor for"
	@echo " Linaro Ubuntu linux running on the ARM core in the Zynq SoC on the Zedboard."
	@echo ""
	@echo " This platform requires Vivado 2015.2. It will automatically source the"
	@echo " environment script when needed; don't do this manually! The location of the"
	@echo " script is configured in config.makefile."
	@echo ""
	@echo " Common make targets:"
	@echo ""
	@echo "  reconfigure       : opens the programmable logic block diagram in Vivado, to"
	@echo "                      let you reconfigure the PL peripherals."
	@echo ""
	@echo "  sdcard-deps       : builds all files needed to make the bootable SD card for"
	@echo "                      the Zedboard. This includes the PL bitfile, u-boot and"
	@echo "                      the Linux kernel. Linaro is downloaded pre-built."
	@echo ""
	@echo "  sdcard            : correctly formats an SD card for the Zedboard. This needs"
	@echo "                      root permissions. The target will ask you for the SD card"
	@echo "                      device file unless you specified it in config.makefile,"
	@echo "                      and ALWAYS asks for confirmation."
	@echo ""
	@echo "  ssh               : SSHs to the board. You will need to install"
	@echo "                      openssh-server with apt-get on the board before this will"
	@echo "                      work."
	@echo ""
	@echo "  clean             : removes all generated files."
	@echo ""
	@echo "  clean-dl          : removes all downloaded files."
	@echo ""
	@echo " Subtargets:"
	@echo ""
	@echo "  bitfile           : forcibly regenerates the Zedboard bit file and copies it"
	@echo "                      to system.bit in this directory."
	@echo ""
	@echo "  uboot             : builds the u-boot bootloader."
	@echo ""
	@echo "  uboot-clean       : cleans/resets the u-boot bootloader files."
	@echo ""
	@echo "  uboot-update-patch: regenerates the u-boot patchfile. Before changing u-boot"
	@echo "                      source files and running this command, please run"
	@echo "                      make uboot-clean first."
	@echo ""
	@echo "  kernel            : compiles the Linux kernel for the Zedboard."
	@echo ""
	@echo "  kernel-clean      : cleans/resets the Linux kernel files."
	@echo ""
	@echo "  boot              : builds all files needed for the boot partition of the"
	@echo "                      Zedboard SD card."
	@echo ""

.PHONY: clean
clean: uboot-clean kernel-clean
	$(RM) -r $(TEMP)
	@echo "reset_project" > $(TEMP)
	cd $(VIV_PLSYS_PATH) && $(VIVADO) -mode batch -source ../../$(TEMP) $(VIV_PLSYS_XPR)
	$(RM) -r $(TEMP) $(BOOT)
	$(RM) *.jou *.log

.PHONY: clean-dl
clean-dl:
	$(RM) -rf $(DL)


#-------------------------------------------------------------------------------
# PL (programmable logic) configuration and synthesis
#-------------------------------------------------------------------------------

# Opens the PL system Vivado project to allow the user to (re)configure the
# available peripherals.
.PHONY: reconfigure
reconfigure:
	$(RM) -r $(TEMP)
	@echo "start_gui" >> $(TEMP)
	@echo "open_bd_design {zed-coprocessor.srcs/sources_1/bd/system/system.bd}" >> $(TEMP)
	cd $(VIV_PLSYS_PATH) && $(VIVADO) -mode tcl -source ../../$(TEMP) $(VIV_PLSYS_XPR)
	$(RM) -r $(TEMP)

.PHONY: bitfile
bitfile:
	$(MAKE) -B $(VIV_PLSYS_BIT)
	$(CP) $(VIV_PLSYS_BIT) system.bit

# Cleans and subsequently rebuilds the Vivado PL system project to get the
# bitfile, as well as the HDF file for the SDK.
$(VIV_PLSYS_BIT) $(VIV_PLSYS_HDF): $(VIV_PLSYS_BD)
	$(RM) -r $(TEMP)
	@echo "reset_project" > $(TEMP)
	@echo "generate_target all [get_files zed-coprocessor.srcs/sources_1/bd/system/system.bd]" >> $(TEMP)
	@echo "make_wrapper -files [get_files zed-coprocessor.srcs/sources_1/bd/system/system.bd] -top" >> $(TEMP)
	@echo "launch_runs synth_1 -jobs 4" >> $(TEMP)
	@echo "wait_on_run synth_1" >> $(TEMP)
	@echo "launch_runs impl_1 -to_step write_bitstream -jobs 4" >> $(TEMP)
	@echo "wait_on_run impl_1" >> $(TEMP)
	cd $(VIV_PLSYS_PATH) && $(VIVADO) -mode batch -source ../../$(TEMP) $(VIV_PLSYS_XPR)
	$(RM) -r $(TEMP)


#-------------------------------------------------------------------------------
# Boot partition generation
#-------------------------------------------------------------------------------

boot: $(DEVTREE) $(BOOT_BIN) $(KERNEL_IMAGE)

# Out-of-the-box design - - - - - - - - - - - - - - - - - - - - - - - - - - - -

$(OOB_DEP):
	$(MKDIR) -p $(OOB_PATH)
	$(RM) -rf $(OOB_PATH)/*
	cd $(OOB_PATH) && $(WGET) --no-check-certificate -O oob.zip $(OOB_URL)
	cd $(OOB_PATH) && $(UNZIP) oob.zip
	$(RM) $(OOB_PATH)/oob.zip
	@echo "" > $@

# Device tree - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

$(DTB_XLNX_DEP):
	$(MKDIR) -p $(DTB_XLNX_PATH)
	$(GIT) clone $(DTB_XLNX_REPO) $(DTB_XLNX_PATH)
	@echo "" > $@

$(DEVTREE_DTS): $(DTB_XLNX_DEP) $(VIV_PLSYS_HDF)
	$(RM) -r $(BOOT)/hsi
	$(RM) -r $(BOOT)/dts
	$(MKDIR) -p $(BOOT)/hsi
	$(CP) $(VIV_PLSYS_HDF) $(BOOT)/hsi/system_wrapper.hdf
	@echo "open_hw_design system_wrapper.hdf" > $(BOOT)/hsi/source_hsi.tcl
	@echo "set_repo_path $(realpath $(DTB_XLNX_PATH))" >> $(BOOT)/hsi/source_hsi.tcl
	@echo "create_sw_design device-tree -os device_tree -proc ps7_cortexa9_0" >> $(BOOT)/hsi/source_hsi.tcl
	@echo "generate_target -dir ../dts" >> $(BOOT)/hsi/source_hsi.tcl
	cd $(BOOT)/hsi && $(HSI) -source source_hsi.tcl -mode batch

ifdef USE_XILINX_DEVTREE
$(DEVTREE): $(DEVTREE_DTS)
	$(MKDIR) -p $(BOOT_IMG)
	$(DTC) -I dts -O dtb -o $@ $<
else
ifdef USE_OOB_KERNEL
$(DEVTREE): design/devicetree-nopl.dts
	$(MKDIR) -p $(BOOT_IMG)
	$(DTC) -I dts -O dtb -o $@ $<
else
$(DEVTREE): $(KERNEL_DEP)
	$(MKDIR) -p $(BOOT_IMG)
	@echo "/dts-v1/;" > $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "/include/ \"zynq-zed.dtsi\"" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "/ {" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "	amba {" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "		leds {" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "			compatible = \"gpio-leds\";" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "			mmc_led {" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "				label = \"mmc_led\";" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "				gpios = <0x5 0x7 0x0>;" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "				linux,default-trigger = \"mmc0\";" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "			};" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "		};" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "	};" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	@echo "};" >> $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
	$(DTC) -I dts -O dtb -o $@ $(KERNEL_DTS_PATH)/zynq-zed-no-pl.dts
endif
endif

# U-boot  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

$(UBOOT_DEP):
	$(MKDIR) -p $(UBOOT_PATH)
	$(GIT) clone $(UBOOT_REPO) $(UBOOT_PATH)
	cd $(UBOOT_PATH) && $(GIT) checkout -b $(UBOOT_TAG) $(UBOOT_TAG)
	cd $(UBOOT_PATH) && $(GIT) checkout $(UBOOT_COMMIT)
	@echo "" > $@

.PHONY: uboot-clean
uboot-clean:
	-cd $(UBOOT_PATH) && git clean -fdx && git reset --hard
	-cd $(UBOOT_PATH) && git apply $(realpath .)/$(UBOOT_PATCH)

.PHONY: uboot-update-patch
uboot-update-patch:
	cd $(UBOOT_PATH) && git diff > $(realpath .)/$(UBOOT_PATCH)

.PHONY: uboot
uboot: $(UBOOT_OUT)
$(UBOOT_OUT): $(UBOOT_DEP) $(UBOOT_PATCH)
	cd $(UBOOT_PATH) && git clean -fdx && git reset --hard
	cd $(UBOOT_PATH) && git apply $(realpath .)/$(UBOOT_PATCH)
	$(ARM_CROSS) cd $(UBOOT_PATH) && make zynq_zed_config
	$(ARM_CROSS) cd $(UBOOT_PATH) && make -j 8

ifdef USE_OOB_KERNEL
$(UBOOT_ELF): $(OOB_UBOOT_ELF)
	$(MKDIR) -p $(BOOT)
	$(CP) -f $< $@
else
$(UBOOT_ELF): $(UBOOT_OUT)
	$(MKDIR) -p $(BOOT)
	$(CP) -f $< $@
endif

# BOOT.BIN  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

$(BOOT_BIN): $(OOB_DEP) $(VIV_PLSYS_BIT) $(UBOOT_ELF)
	$(MKDIR) -p $(BOOT_IMG)
	@echo "the_ROM_image:" > $(BOOT)/output.bif
	@echo "{" >> $(BOOT)/output.bif
	@echo "	[bootloader]$(realpath $(OOB_FSBL_ELF))" >> $(BOOT)/output.bif
	@echo "	$(realpath $(VIV_PLSYS_BIT))" >> $(BOOT)/output.bif
	@echo "	$(realpath $(UBOOT_ELF))" >> $(BOOT)/output.bif
	@echo "}" >> $(BOOT)/output.bif
	cd $(BOOT) && $(BOOTGEN) -w -image output.bif -o $(shell pwd)/$(BOOT_BIN)

# Linux kernel  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

kernel: $(KERNEL_DEP)
$(KERNEL_DEP):
	$(MKDIR) -p $(KERNEL_PATH)
	$(GIT) clone $(KERNEL_REPO) $(KERNEL_PATH)
	cd $(KERNEL_PATH) && $(GIT) checkout $(KERNEL_COMMIT)
	@echo "" > $@

.PHONY: kernel-clean
kernel-clean:
	-cd $(KERNEL_PATH) && git clean -fdx && git reset --hard

$(KERNEL_UIMAGE): $(KERNEL_DEP) $(UBOOT_OUT)
	-$(RM) $(KERNEL_UIMAGE)
	$(ARM_CROSS) \
		export ARCH=arm && \
		export PATH=$(realpath $(UBOOT_PATH)/tools):$$PATH && \
		cd $(KERNEL_PATH) && \
		$(MAKE) zynq_xcomm_adv7511_defconfig && \
		$(MAKE) -j8 uImage LOADADDR=0x00008000

ifdef USE_OOB_KERNEL
$(KERNEL_IMAGE): $(OOB_DEP)
	$(MKDIR) -p $(BOOT_IMG)
	$(CP) -f $(OOB_ZIMAGE) $(KERNEL_IMAGE)
else
$(KERNEL_IMAGE): $(KERNEL_UIMAGE)
	$(MKDIR) -p $(BOOT_IMG)
	$(CP) -f $(KERNEL_UIMAGE) $(KERNEL_IMAGE)
endif


#-------------------------------------------------------------------------------
# Linaro stuff
#-------------------------------------------------------------------------------

$(LINARO_TGZ):
	$(MKDIR) -p $(LINARO_PATH)
	$(WGET) --no-check-certificate -O $(LINARO_TGZ) $(LINARO_URL)


#-------------------------------------------------------------------------------
# Zedboard bootable SD card formatting
#-------------------------------------------------------------------------------

.PHONY: sdcard-deps
ifdef DEV
sdcard-deps:
	@echo ""
	@echo " Please run"
	@echo ""
	@echo "   make sdcard-deps"
	@echo ""
	@echo " WITHOUT sudo before running make sdcard."
else
sdcard-deps: boot $(LINARO_TGZ)
endif

.PHONY: sdcard
ifndef DEV
sdcard:
	@echo ""
	@echo " This command images an SD card to work with the zedboard."
	@echo ""
	@echo " Call it like this:"
	@echo ""
	@echo "   make sdcard-deps"
	@echo "   [sudo] make sdcard DEV=/dev/<device-file>"
	@echo ""
	@echo " On my system, <device-file> is mmcblk0, but it might be different for you."
	@echo ""
	@echo " BE EXTREMELY CAREFUL. IF YOU SPECIFY THE WRONG DEVICE FILE, YOU COULD DESTROY"
	@echo " YOUR SYSTEM. ALSO, THE CONTENTS OF THE SD CARD WILL BE DESTROYED."
	@echo ""
	@echo " If you run into problems, filling the MBR and boot partition with zeros before"
	@echo " formatting might help. You can do this by appending NUKE=1 to the make command."
	@echo ""
else
DEVP := $(shell echo $(DEV) | $(SED) -E "s/([0-9])$$/\1p/")
DEVP1 = $(DEVP)1
DEVP2 = $(DEVP)2
sdcard:
	
	# Make sure the user knows what (s)he's doing.
	@echo "ABOUT TO IMAGE $(DEV). IT WILL BE OVERWRITTEN."
	@$(PYTHON) -c "x=raw_input('Type YES if you really want this: '); import sys; sys.exit(0 if x == 'YES' else 1)"
	
	# Unmount partitions, just in case.
	-$(UMOUNT) $(DEVP1)
	-$(UMOUNT) $(DEVP2)
	
ifdef NUKE
	# Nuke any existing master boot record.
	-$(DD) if=/dev/zero of=$(DEV) bs=65536 count=2
endif
	
	# Make master boot record.
	$(RM) -r $(TEMP)
	@echo "# partition table of /correct/table" > $(TEMP)
	@echo "unit: sectors" >> $(TEMP)
	@echo "" >> $(TEMP)
	@echo "/correct/table/backup1 : start=     8192, size=   131072, Id= b" >> $(TEMP)
	@echo "/correct/table/backup2 : start=   147456, size=         , Id=83" >> $(TEMP)
	@echo "/correct/table/backup3 : start=        0, size=        0, Id= 0" >> $(TEMP)
	@echo "/correct/table/backup4 : start=        0, size=        0, Id= 0" >> $(TEMP)
	$(SFDISK) $(DEV) -H128 -S63 -f --no-reread < $(TEMP)
	$(RM) -r $(TEMP)
	
ifdef NUKE
	# Nuke any existing data on the boot partition.
	-$(DD) if=/dev/zero of=$(DEVP1) bs=65536
endif
	
	# Format the boot partition.
	$(MKFS_FAT) -F 32 -s 1 -n boot $(DEVP1)
	
	# Copy the boot files to the boot partition.
	$(MKDIR) -p $(TEMP)
	$(MOUNT) $(DEVP1) $(TEMP)
	$(CP) $(BOOT_IMG)/* $(TEMP)
	$(UMOUNT) $(DEVP1)
	$(RM) -r $(TEMP)
	
	# Format EXT4 Linaro root filesystem.
	$(MKFS_EXT4) -F -L root $(DEVP2)
	
	# Mount the Linaro root filesystem and copy Linaro to it.
	$(MKDIR) -p $(TEMP)
	$(MOUNT) $(DEVP2) $(TEMP)
	$(TAR) xzvf $(LINARO_TGZ) -C $(TEMP) --strip-components=3 binary/boot/filesystem.dir
	
	# Remove the message-of-the-day scripts that do update checks, because they
	# are slow as hell when logging in with SSH. Note that SSH is not available
	# by default; you'll have to install it using
	#   sudo apt-get install openssh-server
	# on the board while it is connected to the internet.
	$(RM) $(TEMP)/etc/update-motd.d/90-*
	$(RM) $(TEMP)/etc/update-motd.d/91-*
	$(RM) $(TEMP)/etc/update-motd.d/98-*
	
	# Unmount Linaro root.
	# THIS MAY TAKE A WHILE BECAUSE OF FILESYSTEM CACHING. DON'T CTRL+C IT!
	$(UMOUNT) $(DEVP2)
	$(RM) -r $(TEMP)
	
endif


#-------------------------------------------------------------------------------
# Convenience stuff
#-------------------------------------------------------------------------------

.PHONY: ssh
ssh:
ifndef ZED_HOST
	@echo ""
	@echo " This command opens an SSH connection to the zedboard at ZED_HOST. It removes"
	@echo " the host key first to prevent MitM attack warnings from popping up after"
	@echo " re-flashing the board."
	@echo ""
	@echo " Call it like this:"
	@echo ""
	@echo "   make ssh ZED_HOST=<hostname>"
	@echo ""
	@echo " You can also put ZED_HOST in config.makefile if it's always the same."
	@echo ""
else
	-$(SSH_KEYGEN) -R $(ZED_HOST) -f ~/.ssh/known_hosts
	$(EXPECT) -c 'spawn $(SSH) -X linaro@$(ZED_HOST); match_max 100000; expect "*continue*"; send -- "yes\r"; expect "*?assword:*"; send -- "linaro\r"; interact'
endif


#-------------------------------------------------------------------------------
# Old stuff...
#-------------------------------------------------------------------------------

# XSDK           = source $(VIVADO_ENV) && xsdk
# XSDB           = source $(VIVADO_ENV) && xsdb
# VIV_PLSYS_SDK_HDF = $(VIV_PLSYS_PATH)/zed-coprocessor.sdk/system_wrapper.hdf
# VIV_PLSYS_SDK  = $(VIV_PLSYS_PATH)/zed-coprocessor.sdk
# 
# xsdk: $(DTB_XLNX_DEP) $(VIV_PLSYS_HDF)
# 	$(RM) -r $(VIV_PLSYS_SDK)
# 	$(MKDIR) -p $(VIV_PLSYS_SDK)/empty
# 	$(CP) -f $(VIV_PLSYS_HDF) $(VIV_PLSYS_SDK_HDF)
# 	
# 	$(XSDK) -hwspec $(VIV_PLSYS_SDK_HDF) -workspace $(VIV_PLSYS_SDK)
# 
# xsdk: $(DTB_XLNX_DEP) $(VIV_PLSYS_HDF)
# 	$(RM) -r $(VIV_PLSYS_SDK)
# 	$(MKDIR) -p $(VIV_PLSYS_SDK)/empty
# 	$(CP) -f $(VIV_PLSYS_HDF) $(VIV_PLSYS_SDK_HDF)
# 	
# 	$(RM) -r $(TEMP)
# 	@echo "sdk set_workspace $(VIV_PLSYS_SDK)" > $(TEMP)
# 	@echo "sdk create_hw_project -name system_wrapper_hw_platform_0 -hwspec $(VIV_PLSYS_SDK_HDF)" >> $(TEMP)
# 	@echo "sdk set_user_repo_path $(DTB_XLNX_PATH)" >> $(TEMP)
# 	@echo "exit" >> $(TEMP)
# 	$(XSDB) -s $(TEMP)
# 	$(RM) -r $(TEMP)
# 	
# 	$(XSDK) -workspace $(VIV_PLSYS_SDK)



