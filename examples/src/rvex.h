
/* THIS FILE IS GENERATED BY THE SCRIPTS IN THE /config FOLDER! */
/* DO NOT MODIFY IT DIRECTLY! */

#ifndef _RVEX_H_
#define _RVEX_H_

/*****************************************************************************/
/* Core control registers                                                    */
/*****************************************************************************/

// If CREG_BASE is not overruled by a definition passed to the compiler on the
// command line, default to the rvex core default.
#ifndef CREG_BASE
#define CREG_BASE 0xFFFFFC00
#endif

// Stub definitions for any register type.
#define CREG_UINT32_R(addr)     (*(const volatile unsigned int*)(addr))
#define CREG_INT32_R(addr)      (*(const volatile          int*)(addr))
#define CREG_UINT32_RW(addr)    (*(      volatile unsigned int*)(addr))
#define CREG_INT32_RW(addr)     (*(      volatile          int*)(addr))
#define CREG_UINT16_R(addr)     (*(const volatile unsigned short*)(addr))
#define CREG_INT16_R(addr)      (*(const volatile          short*)(addr))
#define CREG_UINT16_RW(addr)    (*(      volatile unsigned short*)(addr))
#define CREG_INT16_RW(addr)     (*(      volatile          short*)(addr))
#define CREG_UINT8_R(addr)      (*(const volatile unsigned char*)(addr))
#define CREG_INT8_R(addr)       (*(const volatile          char*)(addr))
#define CREG_UINT8_RW(addr)     (*(      volatile unsigned char*)(addr))
#define CREG_INT8_RW(addr)      (*(      volatile          char*)(addr))

//-----------------------------------------------------------------------------
// Global (shared) registers. Refer to lib/rvex/core/core_globalRegLogic.vhd
// for up-to-date documentation about the registers.
//-----------------------------------------------------------------------------

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Global status register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_GSR_ADDR                     (CREG_BASE + 0x000)
#define CR_GSR                          CREG_UINT32_R(CR_GSR_ADDR)

#define CR_GSR_R_BIT                    31
#define CR_GSR_R_MASK                   0x80000000

#define CR_GSR_E_BIT                    13
#define CR_GSR_E_MASK                   0x00002000

#define CR_GSR_B_BIT                    12
#define CR_GSR_B_MASK                   0x00001000

#define CR_GSR_RID_BIT                  8
#define CR_GSR_RID_MASK                 0x00000F00

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Bus reconfiguration request register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_BCRR_ADDR                    (CREG_BASE + 0x004)
#define CR_BCRR                         CREG_UINT32_R(CR_BCRR_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Current configuration register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CC_ADDR                      (CREG_BASE + 0x008)
#define CR_CC                           CREG_UINT32_R(CR_CC_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Cache affinity register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_AFF_ADDR                     (CREG_BASE + 0x00C)
#define CR_AFF                          CREG_UINT32_R(CR_AFF_ADDR)

#define CR_AFF_AF7_BIT                  28
#define CR_AFF_AF7_MASK                 0x70000000

#define CR_AFF_AF6_BIT                  24
#define CR_AFF_AF6_MASK                 0x07000000

#define CR_AFF_AF5_BIT                  20
#define CR_AFF_AF5_MASK                 0x00700000

#define CR_AFF_AF4_BIT                  16
#define CR_AFF_AF4_MASK                 0x00070000

#define CR_AFF_AF3_BIT                  12
#define CR_AFF_AF3_MASK                 0x00007000

#define CR_AFF_AF2_BIT                  8
#define CR_AFF_AF2_MASK                 0x00000700

#define CR_AFF_AF1_BIT                  4
#define CR_AFF_AF1_MASK                 0x00000070

#define CR_AFF_AF0_BIT                  0
#define CR_AFF_AF0_MASK                 0x00000007

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Cycle counter register, low word
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CNT_ADDR                     (CREG_BASE + 0x010)
#define CR_CNT                          CREG_UINT32_R(CR_CNT_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Cycle counter register, high word
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CNTH_ADDR                    (CREG_BASE + 0x014)
#define CR_CNTH                         CREG_UINT32_R(CR_CNTH_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Long immediate capability register $n$
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_LIMC7_ADDR                   (CREG_BASE + 0x0A0)
#define CR_LIMC7                        CREG_UINT32_R(CR_LIMC7_ADDR)

#define CR_LIMC7_BORROW15_BIT           16
#define CR_LIMC7_BORROW15_MASK          0xFFFF0000

#define CR_LIMC7_BORROW15_ADDR          (CREG_BASE + 0x0A1)
#define CR_LIMC7_BORROW15               CREG_UINT16_R(CR_LIMC7_BORROW15_ADDR)

#define CR_BORROW15_ADDR                (CREG_BASE + 0x0A1)
#define CR_BORROW15                     CREG_UINT16_R(CR_BORROW15_ADDR)

#define CR_LIMC7_BORROW14_BIT           0
#define CR_LIMC7_BORROW14_MASK          0x0000FFFF

#define CR_LIMC7_BORROW14_ADDR          (CREG_BASE + 0x0A3)
#define CR_LIMC7_BORROW14               CREG_UINT16_R(CR_LIMC7_BORROW14_ADDR)

#define CR_BORROW14_ADDR                (CREG_BASE + 0x0A3)
#define CR_BORROW14                     CREG_UINT16_R(CR_BORROW14_ADDR)

#define CR_LIMC6_ADDR                   (CREG_BASE + 0x0A4)
#define CR_LIMC6                        CREG_UINT32_R(CR_LIMC6_ADDR)

#define CR_LIMC6_BORROW13_BIT           16
#define CR_LIMC6_BORROW13_MASK          0xFFFF0000

#define CR_LIMC6_BORROW13_ADDR          (CREG_BASE + 0x0A5)
#define CR_LIMC6_BORROW13               CREG_UINT16_R(CR_LIMC6_BORROW13_ADDR)

#define CR_BORROW13_ADDR                (CREG_BASE + 0x0A5)
#define CR_BORROW13                     CREG_UINT16_R(CR_BORROW13_ADDR)

#define CR_LIMC6_BORROW12_BIT           0
#define CR_LIMC6_BORROW12_MASK          0x0000FFFF

#define CR_LIMC6_BORROW12_ADDR          (CREG_BASE + 0x0A7)
#define CR_LIMC6_BORROW12               CREG_UINT16_R(CR_LIMC6_BORROW12_ADDR)

#define CR_BORROW12_ADDR                (CREG_BASE + 0x0A7)
#define CR_BORROW12                     CREG_UINT16_R(CR_BORROW12_ADDR)

#define CR_LIMC5_ADDR                   (CREG_BASE + 0x0A8)
#define CR_LIMC5                        CREG_UINT32_R(CR_LIMC5_ADDR)

#define CR_LIMC5_BORROW11_BIT           16
#define CR_LIMC5_BORROW11_MASK          0xFFFF0000

#define CR_LIMC5_BORROW11_ADDR          (CREG_BASE + 0x0A9)
#define CR_LIMC5_BORROW11               CREG_UINT16_R(CR_LIMC5_BORROW11_ADDR)

#define CR_BORROW11_ADDR                (CREG_BASE + 0x0A9)
#define CR_BORROW11                     CREG_UINT16_R(CR_BORROW11_ADDR)

#define CR_LIMC5_BORROW10_BIT           0
#define CR_LIMC5_BORROW10_MASK          0x0000FFFF

#define CR_LIMC5_BORROW10_ADDR          (CREG_BASE + 0x0AB)
#define CR_LIMC5_BORROW10               CREG_UINT16_R(CR_LIMC5_BORROW10_ADDR)

#define CR_BORROW10_ADDR                (CREG_BASE + 0x0AB)
#define CR_BORROW10                     CREG_UINT16_R(CR_BORROW10_ADDR)

#define CR_LIMC4_ADDR                   (CREG_BASE + 0x0AC)
#define CR_LIMC4                        CREG_UINT32_R(CR_LIMC4_ADDR)

#define CR_LIMC4_BORROW9_BIT            16
#define CR_LIMC4_BORROW9_MASK           0xFFFF0000

#define CR_LIMC4_BORROW9_ADDR           (CREG_BASE + 0x0AD)
#define CR_LIMC4_BORROW9                CREG_UINT16_R(CR_LIMC4_BORROW9_ADDR)

#define CR_BORROW9_ADDR                 (CREG_BASE + 0x0AD)
#define CR_BORROW9                      CREG_UINT16_R(CR_BORROW9_ADDR)

#define CR_LIMC4_BORROW8_BIT            0
#define CR_LIMC4_BORROW8_MASK           0x0000FFFF

#define CR_LIMC4_BORROW8_ADDR           (CREG_BASE + 0x0AF)
#define CR_LIMC4_BORROW8                CREG_UINT16_R(CR_LIMC4_BORROW8_ADDR)

#define CR_BORROW8_ADDR                 (CREG_BASE + 0x0AF)
#define CR_BORROW8                      CREG_UINT16_R(CR_BORROW8_ADDR)

#define CR_LIMC3_ADDR                   (CREG_BASE + 0x0B0)
#define CR_LIMC3                        CREG_UINT32_R(CR_LIMC3_ADDR)

#define CR_LIMC3_BORROW7_BIT            16
#define CR_LIMC3_BORROW7_MASK           0xFFFF0000

#define CR_LIMC3_BORROW7_ADDR           (CREG_BASE + 0x0B1)
#define CR_LIMC3_BORROW7                CREG_UINT16_R(CR_LIMC3_BORROW7_ADDR)

#define CR_BORROW7_ADDR                 (CREG_BASE + 0x0B1)
#define CR_BORROW7                      CREG_UINT16_R(CR_BORROW7_ADDR)

#define CR_LIMC3_BORROW6_BIT            0
#define CR_LIMC3_BORROW6_MASK           0x0000FFFF

#define CR_LIMC3_BORROW6_ADDR           (CREG_BASE + 0x0B3)
#define CR_LIMC3_BORROW6                CREG_UINT16_R(CR_LIMC3_BORROW6_ADDR)

#define CR_BORROW6_ADDR                 (CREG_BASE + 0x0B3)
#define CR_BORROW6                      CREG_UINT16_R(CR_BORROW6_ADDR)

#define CR_LIMC2_ADDR                   (CREG_BASE + 0x0B4)
#define CR_LIMC2                        CREG_UINT32_R(CR_LIMC2_ADDR)

#define CR_LIMC2_BORROW5_BIT            16
#define CR_LIMC2_BORROW5_MASK           0xFFFF0000

#define CR_LIMC2_BORROW5_ADDR           (CREG_BASE + 0x0B5)
#define CR_LIMC2_BORROW5                CREG_UINT16_R(CR_LIMC2_BORROW5_ADDR)

#define CR_BORROW5_ADDR                 (CREG_BASE + 0x0B5)
#define CR_BORROW5                      CREG_UINT16_R(CR_BORROW5_ADDR)

#define CR_LIMC2_BORROW4_BIT            0
#define CR_LIMC2_BORROW4_MASK           0x0000FFFF

#define CR_LIMC2_BORROW4_ADDR           (CREG_BASE + 0x0B7)
#define CR_LIMC2_BORROW4                CREG_UINT16_R(CR_LIMC2_BORROW4_ADDR)

#define CR_BORROW4_ADDR                 (CREG_BASE + 0x0B7)
#define CR_BORROW4                      CREG_UINT16_R(CR_BORROW4_ADDR)

#define CR_LIMC1_ADDR                   (CREG_BASE + 0x0B8)
#define CR_LIMC1                        CREG_UINT32_R(CR_LIMC1_ADDR)

#define CR_LIMC1_BORROW3_BIT            16
#define CR_LIMC1_BORROW3_MASK           0xFFFF0000

#define CR_LIMC1_BORROW3_ADDR           (CREG_BASE + 0x0B9)
#define CR_LIMC1_BORROW3                CREG_UINT16_R(CR_LIMC1_BORROW3_ADDR)

#define CR_BORROW3_ADDR                 (CREG_BASE + 0x0B9)
#define CR_BORROW3                      CREG_UINT16_R(CR_BORROW3_ADDR)

#define CR_LIMC1_BORROW2_BIT            0
#define CR_LIMC1_BORROW2_MASK           0x0000FFFF

#define CR_LIMC1_BORROW2_ADDR           (CREG_BASE + 0x0BB)
#define CR_LIMC1_BORROW2                CREG_UINT16_R(CR_LIMC1_BORROW2_ADDR)

#define CR_BORROW2_ADDR                 (CREG_BASE + 0x0BB)
#define CR_BORROW2                      CREG_UINT16_R(CR_BORROW2_ADDR)

#define CR_LIMC0_ADDR                   (CREG_BASE + 0x0BC)
#define CR_LIMC0                        CREG_UINT32_R(CR_LIMC0_ADDR)

#define CR_LIMC0_BORROW1_BIT            16
#define CR_LIMC0_BORROW1_MASK           0xFFFF0000

#define CR_LIMC0_BORROW1_ADDR           (CREG_BASE + 0x0BD)
#define CR_LIMC0_BORROW1                CREG_UINT16_R(CR_LIMC0_BORROW1_ADDR)

#define CR_BORROW1_ADDR                 (CREG_BASE + 0x0BD)
#define CR_BORROW1                      CREG_UINT16_R(CR_BORROW1_ADDR)

#define CR_LIMC0_BORROW0_BIT            0
#define CR_LIMC0_BORROW0_MASK           0x0000FFFF

#define CR_LIMC0_BORROW0_ADDR           (CREG_BASE + 0x0BF)
#define CR_LIMC0_BORROW0                CREG_UINT16_R(CR_LIMC0_BORROW0_ADDR)

#define CR_BORROW0_ADDR                 (CREG_BASE + 0x0BF)
#define CR_BORROW0                      CREG_UINT16_R(CR_BORROW0_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Syllable index capability register $n$
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_SIC3_ADDR                    (CREG_BASE + 0x0C0)
#define CR_SIC3                         CREG_UINT32_R(CR_SIC3_ADDR)

#define CR_SIC3_SYL15CAP_BIT            24
#define CR_SIC3_SYL15CAP_MASK           0xFF000000

#define CR_SIC3_SYL15CAP_ADDR           (CREG_BASE + 0x0C0)
#define CR_SIC3_SYL15CAP                CREG_UINT8_R(CR_SIC3_SYL15CAP_ADDR)

#define CR_SYL15CAP_ADDR                (CREG_BASE + 0x0C0)
#define CR_SYL15CAP                     CREG_UINT8_R(CR_SYL15CAP_ADDR)

#define CR_SIC3_SYL14CAP_BIT            16
#define CR_SIC3_SYL14CAP_MASK           0x00FF0000

#define CR_SIC3_SYL14CAP_ADDR           (CREG_BASE + 0x0C1)
#define CR_SIC3_SYL14CAP                CREG_UINT8_R(CR_SIC3_SYL14CAP_ADDR)

#define CR_SYL14CAP_ADDR                (CREG_BASE + 0x0C1)
#define CR_SYL14CAP                     CREG_UINT8_R(CR_SYL14CAP_ADDR)

#define CR_SIC3_SYL13CAP_BIT            8
#define CR_SIC3_SYL13CAP_MASK           0x0000FF00

#define CR_SIC3_SYL13CAP_ADDR           (CREG_BASE + 0x0C2)
#define CR_SIC3_SYL13CAP                CREG_UINT8_R(CR_SIC3_SYL13CAP_ADDR)

#define CR_SYL13CAP_ADDR                (CREG_BASE + 0x0C2)
#define CR_SYL13CAP                     CREG_UINT8_R(CR_SYL13CAP_ADDR)

#define CR_SIC3_SYL12CAP_BIT            0
#define CR_SIC3_SYL12CAP_MASK           0x000000FF

#define CR_SIC3_SYL12CAP_ADDR           (CREG_BASE + 0x0C3)
#define CR_SIC3_SYL12CAP                CREG_UINT8_R(CR_SIC3_SYL12CAP_ADDR)

#define CR_SYL12CAP_ADDR                (CREG_BASE + 0x0C3)
#define CR_SYL12CAP                     CREG_UINT8_R(CR_SYL12CAP_ADDR)

#define CR_SIC2_ADDR                    (CREG_BASE + 0x0C4)
#define CR_SIC2                         CREG_UINT32_R(CR_SIC2_ADDR)

#define CR_SIC2_SYL11CAP_BIT            24
#define CR_SIC2_SYL11CAP_MASK           0xFF000000

#define CR_SIC2_SYL11CAP_ADDR           (CREG_BASE + 0x0C4)
#define CR_SIC2_SYL11CAP                CREG_UINT8_R(CR_SIC2_SYL11CAP_ADDR)

#define CR_SYL11CAP_ADDR                (CREG_BASE + 0x0C4)
#define CR_SYL11CAP                     CREG_UINT8_R(CR_SYL11CAP_ADDR)

#define CR_SIC2_SYL10CAP_BIT            16
#define CR_SIC2_SYL10CAP_MASK           0x00FF0000

#define CR_SIC2_SYL10CAP_ADDR           (CREG_BASE + 0x0C5)
#define CR_SIC2_SYL10CAP                CREG_UINT8_R(CR_SIC2_SYL10CAP_ADDR)

#define CR_SYL10CAP_ADDR                (CREG_BASE + 0x0C5)
#define CR_SYL10CAP                     CREG_UINT8_R(CR_SYL10CAP_ADDR)

#define CR_SIC2_SYL9CAP_BIT             8
#define CR_SIC2_SYL9CAP_MASK            0x0000FF00

#define CR_SIC2_SYL9CAP_ADDR            (CREG_BASE + 0x0C6)
#define CR_SIC2_SYL9CAP                 CREG_UINT8_R(CR_SIC2_SYL9CAP_ADDR)

#define CR_SYL9CAP_ADDR                 (CREG_BASE + 0x0C6)
#define CR_SYL9CAP                      CREG_UINT8_R(CR_SYL9CAP_ADDR)

#define CR_SIC2_SYL8CAP_BIT             0
#define CR_SIC2_SYL8CAP_MASK            0x000000FF

#define CR_SIC2_SYL8CAP_ADDR            (CREG_BASE + 0x0C7)
#define CR_SIC2_SYL8CAP                 CREG_UINT8_R(CR_SIC2_SYL8CAP_ADDR)

#define CR_SYL8CAP_ADDR                 (CREG_BASE + 0x0C7)
#define CR_SYL8CAP                      CREG_UINT8_R(CR_SYL8CAP_ADDR)

#define CR_SIC1_ADDR                    (CREG_BASE + 0x0C8)
#define CR_SIC1                         CREG_UINT32_R(CR_SIC1_ADDR)

#define CR_SIC1_SYL7CAP_BIT             24
#define CR_SIC1_SYL7CAP_MASK            0xFF000000

#define CR_SIC1_SYL7CAP_ADDR            (CREG_BASE + 0x0C8)
#define CR_SIC1_SYL7CAP                 CREG_UINT8_R(CR_SIC1_SYL7CAP_ADDR)

#define CR_SYL7CAP_ADDR                 (CREG_BASE + 0x0C8)
#define CR_SYL7CAP                      CREG_UINT8_R(CR_SYL7CAP_ADDR)

#define CR_SIC1_SYL6CAP_BIT             16
#define CR_SIC1_SYL6CAP_MASK            0x00FF0000

#define CR_SIC1_SYL6CAP_ADDR            (CREG_BASE + 0x0C9)
#define CR_SIC1_SYL6CAP                 CREG_UINT8_R(CR_SIC1_SYL6CAP_ADDR)

#define CR_SYL6CAP_ADDR                 (CREG_BASE + 0x0C9)
#define CR_SYL6CAP                      CREG_UINT8_R(CR_SYL6CAP_ADDR)

#define CR_SIC1_SYL5CAP_BIT             8
#define CR_SIC1_SYL5CAP_MASK            0x0000FF00

#define CR_SIC1_SYL5CAP_ADDR            (CREG_BASE + 0x0CA)
#define CR_SIC1_SYL5CAP                 CREG_UINT8_R(CR_SIC1_SYL5CAP_ADDR)

#define CR_SYL5CAP_ADDR                 (CREG_BASE + 0x0CA)
#define CR_SYL5CAP                      CREG_UINT8_R(CR_SYL5CAP_ADDR)

#define CR_SIC1_SYL4CAP_BIT             0
#define CR_SIC1_SYL4CAP_MASK            0x000000FF

#define CR_SIC1_SYL4CAP_ADDR            (CREG_BASE + 0x0CB)
#define CR_SIC1_SYL4CAP                 CREG_UINT8_R(CR_SIC1_SYL4CAP_ADDR)

#define CR_SYL4CAP_ADDR                 (CREG_BASE + 0x0CB)
#define CR_SYL4CAP                      CREG_UINT8_R(CR_SYL4CAP_ADDR)

#define CR_SIC0_ADDR                    (CREG_BASE + 0x0CC)
#define CR_SIC0                         CREG_UINT32_R(CR_SIC0_ADDR)

#define CR_SIC0_SYL3CAP_BIT             24
#define CR_SIC0_SYL3CAP_MASK            0xFF000000

#define CR_SIC0_SYL3CAP_ADDR            (CREG_BASE + 0x0CC)
#define CR_SIC0_SYL3CAP                 CREG_UINT8_R(CR_SIC0_SYL3CAP_ADDR)

#define CR_SYL3CAP_ADDR                 (CREG_BASE + 0x0CC)
#define CR_SYL3CAP                      CREG_UINT8_R(CR_SYL3CAP_ADDR)

#define CR_SIC0_SYL2CAP_BIT             16
#define CR_SIC0_SYL2CAP_MASK            0x00FF0000

#define CR_SIC0_SYL2CAP_ADDR            (CREG_BASE + 0x0CD)
#define CR_SIC0_SYL2CAP                 CREG_UINT8_R(CR_SIC0_SYL2CAP_ADDR)

#define CR_SYL2CAP_ADDR                 (CREG_BASE + 0x0CD)
#define CR_SYL2CAP                      CREG_UINT8_R(CR_SYL2CAP_ADDR)

#define CR_SIC0_SYL1CAP_BIT             8
#define CR_SIC0_SYL1CAP_MASK            0x0000FF00

#define CR_SIC0_SYL1CAP_ADDR            (CREG_BASE + 0x0CE)
#define CR_SIC0_SYL1CAP                 CREG_UINT8_R(CR_SIC0_SYL1CAP_ADDR)

#define CR_SYL1CAP_ADDR                 (CREG_BASE + 0x0CE)
#define CR_SYL1CAP                      CREG_UINT8_R(CR_SYL1CAP_ADDR)

#define CR_SIC0_SYL0CAP_BIT             0
#define CR_SIC0_SYL0CAP_MASK            0x000000FF

#define CR_SIC0_SYL0CAP_ADDR            (CREG_BASE + 0x0CF)
#define CR_SIC0_SYL0CAP                 CREG_UINT8_R(CR_SIC0_SYL0CAP_ADDR)

#define CR_SYL0CAP_ADDR                 (CREG_BASE + 0x0CF)
#define CR_SYL0CAP                      CREG_UINT8_R(CR_SYL0CAP_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// General purpose register delay register B
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_GPS1_ADDR                    (CREG_BASE + 0x0D0)
#define CR_GPS1                         CREG_UINT32_R(CR_GPS1_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// General purpose register delay register A
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_GPS0_ADDR                    (CREG_BASE + 0x0D4)
#define CR_GPS0                         CREG_UINT32_R(CR_GPS0_ADDR)

#define CR_GPS0_MEMAR_BIT               24
#define CR_GPS0_MEMAR_MASK              0x0F000000

#define CR_GPS0_MEMDC_BIT               20
#define CR_GPS0_MEMDC_MASK              0x00F00000

#define CR_GPS0_MEMDR_BIT               16
#define CR_GPS0_MEMDR_MASK              0x000F0000

#define CR_GPS0_MULC_BIT                12
#define CR_GPS0_MULC_MASK               0x0000F000

#define CR_GPS0_MULR_BIT                8
#define CR_GPS0_MULR_MASK               0x00000F00

#define CR_GPS0_ALUC_BIT                4
#define CR_GPS0_ALUC_MASK               0x000000F0

#define CR_GPS0_ALUR_BIT                0
#define CR_GPS0_ALUR_MASK               0x0000000F

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Special delay register B
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_SPS1_ADDR                    (CREG_BASE + 0x0D8)
#define CR_SPS1                         CREG_UINT32_R(CR_SPS1_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Special delay register A
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_SPS0_ADDR                    (CREG_BASE + 0x0DC)
#define CR_SPS0                         CREG_UINT32_R(CR_SPS0_ADDR)

#define CR_SPS0_MEMMC_BIT               28
#define CR_SPS0_MEMMC_MASK              0xF0000000

#define CR_SPS0_MEMMR_BIT               24
#define CR_SPS0_MEMMR_MASK              0x0F000000

#define CR_SPS0_MEMDC_BIT               20
#define CR_SPS0_MEMDC_MASK              0x00F00000

#define CR_SPS0_MEMDR_BIT               16
#define CR_SPS0_MEMDR_MASK              0x000F0000

#define CR_SPS0_BRC_BIT                 12
#define CR_SPS0_BRC_MASK                0x0000F000

#define CR_SPS0_BRR_BIT                 8
#define CR_SPS0_BRR_MASK                0x00000F00

#define CR_SPS0_ALUC_BIT                4
#define CR_SPS0_ALUC_MASK               0x000000F0

#define CR_SPS0_ALUR_BIT                0
#define CR_SPS0_ALUR_MASK               0x0000000F

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Extension register 2
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_EXT2_ADDR                    (CREG_BASE + 0x0E0)
#define CR_EXT2                         CREG_UINT32_R(CR_EXT2_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Extension register 1
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_EXT1_ADDR                    (CREG_BASE + 0x0E4)
#define CR_EXT1                         CREG_UINT32_R(CR_EXT1_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Extension register 0
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_EXT0_ADDR                    (CREG_BASE + 0x0E8)
#define CR_EXT0                         CREG_UINT32_R(CR_EXT0_ADDR)

#define CR_EXT0_T_BIT                   27
#define CR_EXT0_T_MASK                  0x08000000

#define CR_EXT0_BRK_BIT                 24
#define CR_EXT0_BRK_MASK                0x07000000

#define CR_EXT0_C_BIT                   18
#define CR_EXT0_C_MASK                  0x00040000

#define CR_EXT0_I_BIT                   17
#define CR_EXT0_I_MASK                  0x00020000

#define CR_EXT0_P_BIT                   16
#define CR_EXT0_P_MASK                  0x00010000

#define CR_EXT0_O_BIT                   2
#define CR_EXT0_O_MASK                  0x00000004

#define CR_EXT0_L_BIT                   1
#define CR_EXT0_L_MASK                  0x00000002

#define CR_EXT0_F_BIT                   0
#define CR_EXT0_F_MASK                  0x00000001

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Design-time configuration register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_DCFG_ADDR                    (CREG_BASE + 0x0EC)
#define CR_DCFG                         CREG_UINT32_R(CR_DCFG_ADDR)

#define CR_DCFG_BA_BIT                  12
#define CR_DCFG_BA_MASK                 0x0000F000

#define CR_DCFG_NC_BIT                  8
#define CR_DCFG_NC_MASK                 0x00000F00

#define CR_DCFG_NG_BIT                  4
#define CR_DCFG_NG_MASK                 0x000000F0

#define CR_DCFG_NL_BIT                  0
#define CR_DCFG_NL_MASK                 0x0000000F

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Core version register 1
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CVER1_ADDR                   (CREG_BASE + 0x0F0)
#define CR_CVER1                        CREG_UINT32_R(CR_CVER1_ADDR)

#define CR_CVER1_VER_BIT                24
#define CR_CVER1_VER_MASK               0xFF000000

#define CR_CVER1_VER_ADDR               (CREG_BASE + 0x0F0)
#define CR_CVER1_VER                    CREG_UINT8_R(CR_CVER1_VER_ADDR)

#define CR_CVER_ADDR                    (CREG_BASE + 0x0F0)
#define CR_CVER                         CREG_UINT8_R(CR_CVER_ADDR)

#define CR_CVER1_CTAG0_BIT              16
#define CR_CVER1_CTAG0_MASK             0x00FF0000

#define CR_CVER1_CTAG0_ADDR             (CREG_BASE + 0x0F1)
#define CR_CVER1_CTAG0                  CREG_UINT8_R(CR_CVER1_CTAG0_ADDR)

#define CR_CTAG_ADDR                    (CREG_BASE + 0x0F1)
#define CR_CTAG                         CREG_UINT8_R(CR_CTAG_ADDR)

#define CR_CVER1_CTAG1_BIT              8
#define CR_CVER1_CTAG1_MASK             0x0000FF00

#define CR_CVER1_CTAG1_ADDR             (CREG_BASE + 0x0F2)
#define CR_CVER1_CTAG1                  CREG_UINT8_R(CR_CVER1_CTAG1_ADDR)

#define CR_CVER1_CTAG2_BIT              0
#define CR_CVER1_CTAG2_MASK             0x000000FF

#define CR_CVER1_CTAG2_ADDR             (CREG_BASE + 0x0F3)
#define CR_CVER1_CTAG2                  CREG_UINT8_R(CR_CVER1_CTAG2_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Core version register 0
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CVER0_ADDR                   (CREG_BASE + 0x0F4)
#define CR_CVER0                        CREG_UINT32_R(CR_CVER0_ADDR)

#define CR_CVER0_CTAG3_BIT              24
#define CR_CVER0_CTAG3_MASK             0xFF000000

#define CR_CVER0_CTAG3_ADDR             (CREG_BASE + 0x0F4)
#define CR_CVER0_CTAG3                  CREG_UINT8_R(CR_CVER0_CTAG3_ADDR)

#define CR_CVER0_CTAG4_BIT              16
#define CR_CVER0_CTAG4_MASK             0x00FF0000

#define CR_CVER0_CTAG4_ADDR             (CREG_BASE + 0x0F5)
#define CR_CVER0_CTAG4                  CREG_UINT8_R(CR_CVER0_CTAG4_ADDR)

#define CR_CVER0_CTAG5_BIT              8
#define CR_CVER0_CTAG5_MASK             0x0000FF00

#define CR_CVER0_CTAG5_ADDR             (CREG_BASE + 0x0F6)
#define CR_CVER0_CTAG5                  CREG_UINT8_R(CR_CVER0_CTAG5_ADDR)

#define CR_CVER0_CTAG6_BIT              0
#define CR_CVER0_CTAG6_MASK             0x000000FF

#define CR_CVER0_CTAG6_ADDR             (CREG_BASE + 0x0F7)
#define CR_CVER0_CTAG6                  CREG_UINT8_R(CR_CVER0_CTAG6_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Platform version register 1
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_PVER1_ADDR                   (CREG_BASE + 0x0F8)
#define CR_PVER1                        CREG_UINT32_R(CR_PVER1_ADDR)

#define CR_PVER1_COID_BIT               24
#define CR_PVER1_COID_MASK              0xFF000000

#define CR_PVER1_COID_ADDR              (CREG_BASE + 0x0F8)
#define CR_PVER1_COID                   CREG_UINT8_R(CR_PVER1_COID_ADDR)

#define CR_COID_ADDR                    (CREG_BASE + 0x0F8)
#define CR_COID                         CREG_UINT8_R(CR_COID_ADDR)

#define CR_PVER1_PTAG0_BIT              16
#define CR_PVER1_PTAG0_MASK             0x00FF0000

#define CR_PVER1_PTAG0_ADDR             (CREG_BASE + 0x0F9)
#define CR_PVER1_PTAG0                  CREG_UINT8_R(CR_PVER1_PTAG0_ADDR)

#define CR_PTAG_ADDR                    (CREG_BASE + 0x0F9)
#define CR_PTAG                         CREG_UINT8_R(CR_PTAG_ADDR)

#define CR_PVER1_PTAG1_BIT              8
#define CR_PVER1_PTAG1_MASK             0x0000FF00

#define CR_PVER1_PTAG1_ADDR             (CREG_BASE + 0x0FA)
#define CR_PVER1_PTAG1                  CREG_UINT8_R(CR_PVER1_PTAG1_ADDR)

#define CR_PVER1_PTAG2_BIT              0
#define CR_PVER1_PTAG2_MASK             0x000000FF

#define CR_PVER1_PTAG2_ADDR             (CREG_BASE + 0x0FB)
#define CR_PVER1_PTAG2                  CREG_UINT8_R(CR_PVER1_PTAG2_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Platform version register 0
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_PVER0_ADDR                   (CREG_BASE + 0x0FC)
#define CR_PVER0                        CREG_UINT32_R(CR_PVER0_ADDR)

#define CR_PVER0_PTAG3_BIT              24
#define CR_PVER0_PTAG3_MASK             0xFF000000

#define CR_PVER0_PTAG3_ADDR             (CREG_BASE + 0x0FC)
#define CR_PVER0_PTAG3                  CREG_UINT8_R(CR_PVER0_PTAG3_ADDR)

#define CR_PVER0_PTAG4_BIT              16
#define CR_PVER0_PTAG4_MASK             0x00FF0000

#define CR_PVER0_PTAG4_ADDR             (CREG_BASE + 0x0FD)
#define CR_PVER0_PTAG4                  CREG_UINT8_R(CR_PVER0_PTAG4_ADDR)

#define CR_PVER0_PTAG5_BIT              8
#define CR_PVER0_PTAG5_MASK             0x0000FF00

#define CR_PVER0_PTAG5_ADDR             (CREG_BASE + 0x0FE)
#define CR_PVER0_PTAG5                  CREG_UINT8_R(CR_PVER0_PTAG5_ADDR)

#define CR_PVER0_PTAG6_BIT              0
#define CR_PVER0_PTAG6_MASK             0x000000FF

#define CR_PVER0_PTAG6_ADDR             (CREG_BASE + 0x0FF)
#define CR_PVER0_PTAG6                  CREG_UINT8_R(CR_PVER0_PTAG6_ADDR)

//-----------------------------------------------------------------------------
// Context-specific registers. Refer to lib/rvex/core/core_contextRegLogic.vhd
// for up-to-date documentation about the registers.
//-----------------------------------------------------------------------------

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Main context control register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CCR_ADDR                     (CREG_BASE + 0x200)
#define CR_CCR                          CREG_UINT32_RW(CR_CCR_ADDR)

#define CR_CCR_CAUSE_BIT                24
#define CR_CCR_CAUSE_MASK               0xFF000000

#define CR_CCR_CAUSE_ADDR               (CREG_BASE + 0x200)
#define CR_CCR_CAUSE                    CREG_UINT8_R(CR_CCR_CAUSE_ADDR)

#define CR_TC_ADDR                      (CREG_BASE + 0x200)
#define CR_TC                           CREG_UINT8_R(CR_TC_ADDR)

#define CR_CCR_BRANCH_BIT               16
#define CR_CCR_BRANCH_MASK              0x00FF0000

#define CR_CCR_BRANCH_ADDR              (CREG_BASE + 0x201)
#define CR_CCR_BRANCH                   CREG_UINT8_R(CR_CCR_BRANCH_ADDR)

#define CR_BR_ADDR                      (CREG_BASE + 0x201)
#define CR_BR                           CREG_UINT8_R(CR_BR_ADDR)

#define CR_CCR_K_BIT                    8
#define CR_CCR_K_MASK                   0x00000300

#define CR_CCR_C_BIT                    6
#define CR_CCR_C_MASK                   0x000000C0

#define CR_CCR_B_BIT                    4
#define CR_CCR_B_MASK                   0x00000030

#define CR_CCR_R_BIT                    2
#define CR_CCR_R_MASK                   0x0000000C

#define CR_CCR_I_BIT                    0
#define CR_CCR_I_MASK                   0x00000003

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Saved context control register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_SCCR_ADDR                    (CREG_BASE + 0x204)
#define CR_SCCR                         CREG_UINT32_RW(CR_SCCR_ADDR)

#define CR_SCCR_ID_BIT                  24
#define CR_SCCR_ID_MASK                 0xFF000000

#define CR_SCCR_ID_ADDR                 (CREG_BASE + 0x204)
#define CR_SCCR_ID                      CREG_UINT8_R(CR_SCCR_ID_ADDR)

#define CR_CID_ADDR                     (CREG_BASE + 0x204)
#define CR_CID                          CREG_UINT8_R(CR_CID_ADDR)

#define CR_SCCR_K_BIT                   8
#define CR_SCCR_K_MASK                  0x00000300

#define CR_SCCR_C_BIT                   6
#define CR_SCCR_C_MASK                  0x000000C0

#define CR_SCCR_B_BIT                   4
#define CR_SCCR_B_MASK                  0x00000030

#define CR_SCCR_R_BIT                   2
#define CR_SCCR_R_MASK                  0x0000000C

#define CR_SCCR_I_BIT                   0
#define CR_SCCR_I_MASK                  0x00000003

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Link register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_LR_ADDR                      (CREG_BASE + 0x208)
#define CR_LR                           CREG_UINT32_R(CR_LR_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Program counter
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_PC_ADDR                      (CREG_BASE + 0x20C)
#define CR_PC                           CREG_UINT32_R(CR_PC_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Trap handler
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_TH_ADDR                      (CREG_BASE + 0x210)
#define CR_TH                           CREG_UINT32_RW(CR_TH_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Panic handler
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_PH_ADDR                      (CREG_BASE + 0x214)
#define CR_PH                           CREG_UINT32_RW(CR_PH_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Trap point
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_TP_ADDR                      (CREG_BASE + 0x218)
#define CR_TP                           CREG_UINT32_RW(CR_TP_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Trap argument
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_TA_ADDR                      (CREG_BASE + 0x21C)
#define CR_TA                           CREG_UINT32_R(CR_TA_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Breakpoint $n$
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_BR0_ADDR                     (CREG_BASE + 0x220)
#define CR_BR0                          CREG_UINT32_RW(CR_BR0_ADDR)

#define CR_BR1_ADDR                     (CREG_BASE + 0x224)
#define CR_BR1                          CREG_UINT32_RW(CR_BR1_ADDR)

#define CR_BR2_ADDR                     (CREG_BASE + 0x228)
#define CR_BR2                          CREG_UINT32_RW(CR_BR2_ADDR)

#define CR_BR3_ADDR                     (CREG_BASE + 0x22C)
#define CR_BR3                          CREG_UINT32_RW(CR_BR3_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Debug control register 1
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_DCR_ADDR                     (CREG_BASE + 0x230)
#define CR_DCR                          CREG_UINT32_RW(CR_DCR_ADDR)

#define CR_DCR_D_BIT                    31
#define CR_DCR_D_MASK                   0x80000000

#define CR_DCR_J_BIT                    30
#define CR_DCR_J_MASK                   0x40000000

#define CR_DCR_I_BIT                    28
#define CR_DCR_I_MASK                   0x10000000

#define CR_DCR_E_BIT                    27
#define CR_DCR_E_MASK                   0x08000000

#define CR_DCR_R_BIT                    26
#define CR_DCR_R_MASK                   0x04000000

#define CR_DCR_S_BIT                    25
#define CR_DCR_S_MASK                   0x02000000

#define CR_DCR_B_BIT                    24
#define CR_DCR_B_MASK                   0x01000000

#define CR_DCR_CAUSE_BIT                16
#define CR_DCR_CAUSE_MASK               0x00FF0000

#define CR_DCR_CAUSE_ADDR               (CREG_BASE + 0x231)
#define CR_DCR_CAUSE                    CREG_UINT8_R(CR_DCR_CAUSE_ADDR)

#define CR_DCR_BR3_BIT                  12
#define CR_DCR_BR3_MASK                 0x00003000

#define CR_DCR_BR2_BIT                  8
#define CR_DCR_BR2_MASK                 0x00000300

#define CR_DCR_BR1_BIT                  4
#define CR_DCR_BR1_MASK                 0x00000030

#define CR_DCR_BR0_BIT                  0
#define CR_DCR_BR0_MASK                 0x00000003

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Debug control register 2
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_DCR2_ADDR                    (CREG_BASE + 0x234)
#define CR_DCR2                         CREG_UINT32_RW(CR_DCR2_ADDR)

#define CR_DCR2_RESULT_BIT              24
#define CR_DCR2_RESULT_MASK             0xFF000000

#define CR_DCR2_RESULT_ADDR             (CREG_BASE + 0x234)
#define CR_DCR2_RESULT                  CREG_INT8_RW(CR_DCR2_RESULT_ADDR)

#define CR_RET_ADDR                     (CREG_BASE + 0x234)
#define CR_RET                          CREG_INT8_RW(CR_RET_ADDR)

#define CR_DCR2_t_BIT                   15
#define CR_DCR2_t_MASK                  0x00008000

#define CR_DCR2_m_BIT                   14
#define CR_DCR2_m_MASK                  0x00004000

#define CR_DCR2_r_BIT                   13
#define CR_DCR2_r_MASK                  0x00002000

#define CR_DCR2_c_BIT                   12
#define CR_DCR2_c_MASK                  0x00001000

#define CR_DCR2_i_BIT                   11
#define CR_DCR2_i_MASK                  0x00000800

#define CR_DCR2_e_BIT                   8
#define CR_DCR2_e_MASK                  0x00000100

#define CR_DCR2_T_BIT                   7
#define CR_DCR2_T_MASK                  0x00000080

#define CR_DCR2_M_BIT                   6
#define CR_DCR2_M_MASK                  0x00000040

#define CR_DCR2_R_BIT                   5
#define CR_DCR2_R_MASK                  0x00000020

#define CR_DCR2_C_BIT                   4
#define CR_DCR2_C_MASK                  0x00000010

#define CR_DCR2_I_BIT                   3
#define CR_DCR2_I_MASK                  0x00000008

#define CR_DCR2_E_BIT                   0
#define CR_DCR2_E_MASK                  0x00000001

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Context reconfiguration request register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CRR_ADDR                     (CREG_BASE + 0x238)
#define CR_CRR                          CREG_UINT32_RW(CR_CRR_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Cycle counter
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CYC_ADDR                     (CREG_BASE + 0x23C)
#define CR_CYC                          CREG_UINT32_R(CR_CYC_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Stall cycle counter
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_STALL_ADDR                   (CREG_BASE + 0x240)
#define CR_STALL                        CREG_UINT32_R(CR_STALL_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Committed bundle counter
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_BUN_ADDR                     (CREG_BASE + 0x244)
#define CR_BUN                          CREG_UINT32_R(CR_BUN_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Committed syllable counter
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_SYL_ADDR                     (CREG_BASE + 0x248)
#define CR_SYL                          CREG_UINT32_R(CR_SYL_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Committed NOP counter
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_NOP_ADDR                     (CREG_BASE + 0x24C)
#define CR_NOP                          CREG_UINT32_R(CR_NOP_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Scratchpad register $n$
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_SCRP1_ADDR                   (CREG_BASE + 0x250)
#define CR_SCRP1                        CREG_UINT32_RW(CR_SCRP1_ADDR)

#define CR_SCRP2_ADDR                   (CREG_BASE + 0x254)
#define CR_SCRP2                        CREG_UINT32_RW(CR_SCRP2_ADDR)

#define CR_SCRP3_ADDR                   (CREG_BASE + 0x258)
#define CR_SCRP3                        CREG_UINT32_RW(CR_SCRP3_ADDR)

#define CR_SCRP4_ADDR                   (CREG_BASE + 0x25C)
#define CR_SCRP4                        CREG_UINT32_RW(CR_SCRP4_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Requested software context
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_RSC_ADDR                     (CREG_BASE + 0x260)
#define CR_RSC                          CREG_UINT32_R(CR_RSC_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Requested swctxt on hwctxt $n$
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_RSC1_ADDR                    (CREG_BASE + 0x268)
#define CR_RSC1                         CREG_UINT32_RW(CR_RSC1_ADDR)

#define CR_RSC2_ADDR                    (CREG_BASE + 0x270)
#define CR_RSC2                         CREG_UINT32_RW(CR_RSC2_ADDR)

#define CR_RSC3_ADDR                    (CREG_BASE + 0x278)
#define CR_RSC3                         CREG_UINT32_RW(CR_RSC3_ADDR)

#define CR_RSC4_ADDR                    (CREG_BASE + 0x280)
#define CR_RSC4                         CREG_UINT32_RW(CR_RSC4_ADDR)

#define CR_RSC5_ADDR                    (CREG_BASE + 0x288)
#define CR_RSC5                         CREG_UINT32_RW(CR_RSC5_ADDR)

#define CR_RSC6_ADDR                    (CREG_BASE + 0x290)
#define CR_RSC6                         CREG_UINT32_RW(CR_RSC6_ADDR)

#define CR_RSC7_ADDR                    (CREG_BASE + 0x298)
#define CR_RSC7                         CREG_UINT32_RW(CR_RSC7_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Current software context
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CSC_ADDR                     (CREG_BASE + 0x264)
#define CR_CSC                          CREG_UINT32_RW(CR_CSC_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Current swctxt on hwctxt $n$
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_CSC1_ADDR                    (CREG_BASE + 0x26C)
#define CR_CSC1                         CREG_UINT32_R(CR_CSC1_ADDR)

#define CR_CSC2_ADDR                    (CREG_BASE + 0x274)
#define CR_CSC2                         CREG_UINT32_R(CR_CSC2_ADDR)

#define CR_CSC3_ADDR                    (CREG_BASE + 0x27C)
#define CR_CSC3                         CREG_UINT32_R(CR_CSC3_ADDR)

#define CR_CSC4_ADDR                    (CREG_BASE + 0x284)
#define CR_CSC4                         CREG_UINT32_R(CR_CSC4_ADDR)

#define CR_CSC5_ADDR                    (CREG_BASE + 0x28C)
#define CR_CSC5                         CREG_UINT32_R(CR_CSC5_ADDR)

#define CR_CSC6_ADDR                    (CREG_BASE + 0x294)
#define CR_CSC6                         CREG_UINT32_R(CR_CSC6_ADDR)

#define CR_CSC7_ADDR                    (CREG_BASE + 0x29C)
#define CR_CSC7                         CREG_UINT32_R(CR_CSC7_ADDR)

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Sleep and wake-up control register
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_SAWC_ADDR                    (CREG_BASE + 0x2A0)
#define CR_SAWC                         CREG_UINT32_RW(CR_SAWC_ADDR)

#define CR_SAWC_Running_BIT             1
#define CR_SAWC_Running_MASK            0x000000FE

#define CR_SAWC_S_BIT                   0
#define CR_SAWC_S_MASK                  0x00000001

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Wakeup configuration
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#define CR_WCFG_ADDR                    (CREG_BASE + 0x2A4)
#define CR_WCFG                         CREG_UINT32_RW(CR_WCFG_ADDR)

//-----------------------------------------------------------------------------
// Backwards-compatibility/convenience definitions
//-----------------------------------------------------------------------------

// This section can be changed in config/interpreter/rvex_h.py if necessary.

// Interrupt enable/disable bits in (S)CCR.
#define CR_CCR_IEN                      (1 << CR_CCR_I_BIT)
#define CR_CCR_IEN_C                    (2 << CR_CCR_I_BIT)

// Ready-for-trap enable/disable bits in (S)CCR.
#define CR_CCR_RFT                      (1 << CR_CCR_R_BIT)
#define CR_CCR_RFT_C                    (2 << CR_CCR_R_BIT)

// Breakpoint enable/disable bits in (S)CCR (for self-hosted debug mode).
#define CR_CCR_BPE                      (1 << CR_CCR_B_BIT)
#define CR_CCR_BPE_C                    (2 << CR_CCR_B_BIT)

// Context-switch enable/disable bits in (S)CCR
#define CR_CCR_CSW                      (1 << CR_CCR_C_BIT)
#define CR_CCR_CSW_C                    (2 << CR_CCR_C_BIT)

// Kernel mode enable/disable bits in (S)CCR
#define CR_CCR_KME                      (1 << CR_CCR_K_BIT)
#define CR_CCR_KME_C                    (2 << CR_CCR_K_BIT)

// Shorthand notation for enabling/disabling interrupts/traps (in CCR).
#define ENABLE_IRQ                      (CR_CCR = CR_CCR_IEN)
#define DISABLE_IRQ                     (CR_CCR = CR_CCR_IEN_C)
#define ENABLE_TRAPS                    (CR_CCR = CR_CCR_RFT)
#define DISABLE_TRAPS                   (CR_CCR = CR_CCR_RFT_C)
#define ENABLE_CTXT_SWITCH              (CR_CCR = CR_CCR_CSW)
#define DISABLE_CTXT_SWITCH             (CR_CCR = CR_CCR_CSW_C)

// Deprecated definitions for the first scratchpad register.
#define CR_SCRP_ADDR                    CR_SCRP1_ADDR
#define CR_SCRP                         CR_SCRP1

/*****************************************************************************/
/* Trap causes                                                               */
/*****************************************************************************/

#define TRAP_NONE                       0x00
#define TRAP_INVALID_OP                 0x01
#define TRAP_MISALIGNED_BRANCH          0x02
#define TRAP_FETCH_FAULT                0x03
#define TRAP_MISALIGNED_ACCESS          0x04
#define TRAP_DMEM_FAULT                 0x05
#define TRAP_LIMMH_FAULT                0x06
#define TRAP_EXT_INTERRUPT              0x07
#define TRAP_STOP                       0x08
#define TRAP_CONTEXT_SWITCH             0x09
#define TRAP_SOFT_DEBUG_0               0xF8
#define TRAP_SOFT_DEBUG_1               0xF9
#define TRAP_SOFT_DEBUG_2               0xFA
#define TRAP_STEP_COMPLETE              0xFB
#define TRAP_HW_BREAKPOINT_0            0xFC
#define TRAP_HW_BREAKPOINT_1            0xFD
#define TRAP_HW_BREAKPOINT_2            0xFE
#define TRAP_HW_BREAKPOINT_3            0xFF

// The following definitions are for compatibility with the older, more verbose
// definitions.
#define RVEX_TRAP_NONE                  TRAP_NONE
#define RVEX_TRAP_INVALID_OP            TRAP_INVALID_OP
#define RVEX_TRAP_MISALIGNED_BRANCH     TRAP_MISALIGNED_BRANCH
#define RVEX_TRAP_FETCH_FAULT           TRAP_FETCH_FAULT
#define RVEX_TRAP_MISALIGNED_ACCESS     TRAP_MISALIGNED_ACCESS
#define RVEX_TRAP_DMEM_FAULT            TRAP_DMEM_FAULT
#define RVEX_TRAP_LIMMH_FAULT           TRAP_LIMMH_FAULT
#define RVEX_TRAP_EXT_INTERRUPT         TRAP_EXT_INTERRUPT
#define RVEX_TRAP_STOP                  TRAP_STOP
#define RVEX_TRAP_CONTEXT_SWITCH        TRAP_CONTEXT_SWITCH
#define RVEX_TRAP_SOFT_DEBUG_0          TRAP_SOFT_DEBUG_0
#define RVEX_TRAP_SOFT_DEBUG_1          TRAP_SOFT_DEBUG_1
#define RVEX_TRAP_SOFT_DEBUG_2          TRAP_SOFT_DEBUG_2
#define RVEX_TRAP_STEP_COMPLETE         TRAP_STEP_COMPLETE
#define RVEX_TRAP_HW_BREAKPOINT_0       TRAP_HW_BREAKPOINT_0
#define RVEX_TRAP_HW_BREAKPOINT_1       TRAP_HW_BREAKPOINT_1
#define RVEX_TRAP_HW_BREAKPOINT_2       TRAP_HW_BREAKPOINT_2
#define RVEX_TRAP_HW_BREAKPOINT_3       TRAP_HW_BREAKPOINT_3

#endif
