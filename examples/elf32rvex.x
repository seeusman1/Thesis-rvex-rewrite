/* Default linker script, for normal executables */
/* Example Linker Script for linking NS CR16 elf32 files. */
OUTPUT_FORMAT("elf32-rvex")
OUTPUT_ARCH(rvex)
ENTRY(_start)
/* Define memory regions.  */
MEMORY
{
        ram         : ORIGIN = 0x00000000,          LENGTH = 128M
        log			: ORIGIN = 0x08000000,			LENGTH = 128M
}
/*  Many sections come in three flavours.  There is the 'real' section,
    like ".data".  Then there are the per-procedure or per-variable
    sections, generated by -ffunction-sections and -fdata-sections in GCC,
    and useful for --gc-sections, which for a variable "foo" might be
    ".data.foo".  Then there are the linkonce sections, for which the linker
    eliminates duplicates, which are named like ".gnu.linkonce.d.foo".
    The exact correspondences are:
    Section	Linkonce section
    .text	.gnu.linkonce.t.foo
    .rdata	.gnu.linkonce.r.foo
    .data	.gnu.linkonce.d.foo
    .bss	.gnu.linkonce.b.foo
    .debug_info	.gnu.linkonce.wi.foo  */
SECTIONS
{
  .text :
  {
    __TEXT_START = .;
	*(.init)
    *(.text)
    __TEXT_END = .;
  } > ram
  .data :
  {
    __DATA_START = .;
    *(.rodata*)
    *(.data_4) *(.data_2) *(.data_1) *(.data) *(.data.*) *(.gnu.linkonce.d.*)
    __DATA_END = .;
    . = ALIGN(16);
  } > ram
  .bss (NOLOAD) :
  {
    __BSS_START = .;
    *(.bss_4) *(.bss_2) *(.bss_1) *(.bss) *(COMMON) *(.bss.*) *(.gnu.linkonce.b.*)
    __BSS_END = .;
  } > ram
  
  /*
  .testmpg :
  {
  	__TESTMPG_START = .;
  	testmpgelf.o
  	__TESTMPG_END = .;
  } > ram
  */
  
  
  .logbuf (NOLOAD):
  {
   __LOG_BUF_START = .;
   *(.log)
   __LOG_BUF_END = .;
  } > log
/* You may change the sizes of the following sections to fit the actual
   size your program requires.
   The heap and stack are aligned to the bus width, as a speed optimization
   for accessing data located there.  */
  .stack (NOLOAD) :
  {
    . = ALIGN(4);
    . += 0x6000;
    __STACK_START = .;
  } > ram

  .heap (NOLOAD) :
  {
    . = ALIGN(4);
    end = .;
    _end = .;
    __HEAP_START = .;
    . += 0x200000; 
    __HEAP_MAX = .;
  } > ram

  .comment        0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
}
__DATA_IMAGE_START = LOADADDR(.data);
