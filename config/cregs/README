
The .tex files in this folder describe the context and global control registers 
and documentation thereof.Because the documentation is in LaTeX, the syntax of 
these files is also LaTeX-like, to be able to use editors with LaTeX syntax 
highlighting.

Files are ordered by their filename alphabetically before being passed to the
interpreter. This order only matters if a single register is described amongst
multiple files. Documentation is generated based on the addresses.

The following LaTeX-like commands are interpreted by python to define the
control registers. They must be the only thing on a certain line aside from
(maybe) comments, otherwise they are interpreted as LaTeX documentation.

root
 |- \contextInterface{}, \globalInterface{}
 |   '- \ifaceGroup{title}
 |       '- \ifaceSubGroup{}
 |           |- ifaceIn{unit}{name}{type}
 |           |- ifaceOut{unit}{name}{type}{expr}
 |           |- ifaceInCtxt{unit}{name}{type}
 |           '- ifaceOutCtxt{unit}{name}{type}{expr}
 |- \defineTemplate{name}{parameter list}
 '- \register{mnemonic}{name}{offset},
    \registergen{python range}{mnemonic}{name}{offset}{stride}
     '- \field{range}{mnemonic}
         |- \reset{bit vector}
         |- \signed{}
         |- \id{identifier}
         |- \declaration{}
         |   |- \declRegister{name}{type}{expr}
         |   |- \declVariable{name}{type}{expr}
         |   '- \declConstant{name}{type}{expr}
         |- \implementation{}
         '- \resetImplementation{}

 - \contextInterface{}
 - \globalInterface{}
   Describes the port map of the context register logic and the global register
   logic. These may appear more than once in the configuration; their contents
   will just be appended.
 
 - \ifaceGroup{<title>}
 - \ifaceSubGroup{}
   Defines port groups for code readability. The toplevel group has a title,
   both group commands will interpret the multiline text following the command
   as comments to be put in the code.
 
 - ifaceIn{<unit>}{<name>}{<type>}
 - ifaceOut{<unit>}{<name>}{<type>}{<expr>}
 - ifaceInCtxt{<unit>}{<name>}{<type>}
 - ifaceOutCtxt{<unit>}{<name>}{<type>}{<expr>}
   Defines a port. For inputs, the signal name will be "<unit>2cxreg_<name>" or
   "<unit>2gbreg_<name>". For outputs it will be "cxreg2<unit>_<name>" or
   "gbreg2<unit>_<name>". <type> is a type specification as defined later.
   <expr> is an expression using only predefined constants, input signals and
   literals. The command name determines whether the port is per-context or
   global and whether it is an input or output.
   
 - \defineTemplate{<name>}{<parameter list>}
   NOT YET IMPLEMENTED

 - \register{<mnemonic>}{<name>}{<offset>}
   Starts a new register description. <name> is the title of the section.
   <mnemonic> is the mnemonic of the register, excluding the CR_. The 
   mnemonic is also used to generate a label using \label{reg:<mnemonic>}.
   <offset> should be a hex number starting with 0x divisible by 4,
   representing the byte offset from the control registers base. Global
   registers should be within the 0x000..0x0FF range, context registers
   should be within 0x200..0x3FF. 0x100..0x1FF is reserved for the general
   purpose register file.

 - \registergen{<python range>}{<mnemonic>}{<name>}{<offset>}{<stride>}
   Same as \register, but specifies a list of registers. <python range> is
   executed as a python expression, expected to generate an iterable of
   integers. A register is generated for each of these iterations. The offset
   for each register is computed as <offset> + iter * <stride>. \n{} expands
   to the number when used inline in <mnemonic> and <name>. In the
   documentation it expands to $n$.

 - \field{<range>}{<mnemonic>}
   Defines a field in the current register. A range specification is either a 
   single bit index for a single-bit field, or of the form <from>..<to>, 
   where  <from> is the higher bit index, and both the <from> and <to> bit 
   are included in the range. <mnemonic> is used in the register graphic, so 
   make it as small as possible if the bitfield is small. It also needs to be
   a valid C and VHDL identifier.

 - \reset{<bit vector>}
   Sets the reset state of the previously defined field. If not specified, the
   reset state is assumed to be zero. The number of characters in <bit vector>
   must equal the number of bits in the field.

 - \signed{}
   Marks a field as being signed. The default is unsigned.

 - \id{<identifier>}
   Gives a field an alternative name for the C/VHDL/rvd definitions. This only
   works for 8-bit and 16-bit fields that are properly aligned.
   
 - \declaration{}
   Specifies the local declaration section for this field implementation.
   
 - \declRegister{<name>}{<type>}{<expr>}
 - \declVariable{<name>}{<type>}{<expr>}
 - \declConstant{<name>}{<type>}{<expr>}
   Specifies registers, variables or constants needed by the implementation
   code. <name> must start with an underscore, and will expand to
   "cr_<register-mnemonic>_<field-mnemonic><name>". <type> is a type
   specification as defined later, or it may 'field', which maps to a bitvec
   with the same size as the field. <expr> is an expression which defines the
   constant, initial value or reset value, using only predefined constants for
   a constant value, and only inputs or predefined constants for variables and
   registers.
   
 - \implementation{}
   Language-agnostic code section as defined below, executed every rising clock
   edge with clkEn high and reset inactive. The following variables are
   predefined to interface with the core and debug busses:
   
    - _write:      bitvec<field size>
    - _wmask:      bitvec<field size>
    - _wmask_dbg:  bitvec<field size>
    - _wmask_core: bitvec<field size>
    - _read:       bitvec<field size>
   
   write_mask is just a shorthand for (write_mask_dbg | write_mask_core), which
   may be used if the origin of the write command doesn't matter. As an example
   of how to use these, a simple register could be made as follows:
   
     _reg = (_reg & ~_wmask) | (_write & _wmask);
     _read = _reg;

 - \resetImplementation{}
   Language-agnostic code section as defined below, executed every rising clock
   edge with clkEn high, the global reset is inactive, and the context-specific
   reset is active. This allows register implementations to override a soft
   context reset, for instance to make register values persistent in this case.
   This is necessary for, for instance, the B flag in DCR, to allow the debugger
   to reset the core without immediately starting execution. This command is
   only allowed for context-specific registers.

 - Anything else:
   Any unrecognized line is used as a description for either the whole 
   register or a field in it.
 

TYPE SPECIFICATIONS
===================

A type specification is just a type name. The following types are currently
supported (hardcoded into scripts/code/type_classes.py).

 .----------------.-------------.--------------------------------.-------------------------------------.-------------------.
 | Type name      | Internally  | VHDL global type               | VHDL per-context type               | C representation  |
 |----------------+-------------+--------------------------------+-------------------------------------+-------------------|
 | boolean        | boolean     | boolean                        | -                                   | uint32_t          |
 | natural        | natural     | natural                        | -                                   | uint32_t          |
 | bit            | bit         | std_logic                      | std_logic_vector(...)               | uint32_t          |
 | bitvec<n>      | bitvec<n>   | std_logic_vector(n-1 downto 0) | -                                   | uint32_t/uint64_t |
 | unsigned<n>    | unsigned<n> | unsigned(n-1 downto 0)         | -                                   | uint32_t/uint64_t |
 | byte           | bitvec<8>   | rvex_byte_type                 | rvex_byte_array(...)                | uint32_t          |
 | data           | bitvec<32>  | rvex_data_type                 | rvex_data_array(...)                | uint32_t          |
 | address        | bitvec<32>  | rvex_address_type              | rvex_address_array(...)             | uint32_t          |
 | sylstatus      | bitvec<16>  | rvex_sylStatus_type            | rvex_sylStatus_array(...)           | uint32_t          |
 | brregdata      | bitvec<8>   | rvex_brRegData_type            | rvex_brRegData_array(...)           | uint32_t          |
 | trapcause      | bitvec<8>   | rvex_trap_type                 | rvex_trap_array(...)                | uint32_t          |
 | twobit         | bitvec<2>   | rvex_2bit_type                 | rvex_2bit_array(...)                | uint32_t          |
 | threebit       | bitvec<3>   | rvex_3bit_type                 | rvex_3bit_array(...)                | uint32_t          |
 | fourbit        | bitvec<4>   | rvex_4bit_type                 | rvex_4bit_array(...)                | uint32_t          |
 | trapinfo       | aggregate   | trap_info_type                 | trap_info_array(...)                | trapInfo_t        |
 | breakpointinfo | aggregate   | cxreg2pl_breakpoint_info_type  | cxreg2pl_breakpoint_info_array(...) | breakpointInfo_t  |
 | -              | aggregate   | rvex_generic_config_type       | -                                   | cfgVect_t         |
 '----------------'-------------'--------------------------------'-------------------------------------'-------------------'

 - bitvec<n> and unsigned<> are only supported up to 64 bits. This is because
   they are represented as uint32_t or uint64_t in C.
 
 - The CFG vector type cannot be instantiated; it is provided as a built-in like
   thing.
   
 - Types which have no per-context VHDL type cannot be instantiated per context.

trapinfo aggregate members:
 - active:                bit
 - cause:                 trapcause
 - arg:                   address

breakpointinfo aggregate members:
 - addr{0}:               address
 - addr{1}:               address
 - addr{2}:               address
 - addr{3}:               address
 - cfg{0}:                bitvec<2>
 - cfg{1}:                bitvec<2>
 - cfg{2}:                bitvec<2>
 - cfg{3}:                bitvec<2>

CFG vector members:
 - numLanesLog2:          natural
 - numLaneGroupsLog2:     natural
 - numContextsLog2:       natural
 - genBundleSizeLog2:     natural
 - bundleAlignLog2:       natural
 - multiplierLanes:       natural
 - memLaneRevIndex:       natural
 - numBreakpoints:        natural
 - forwarding:            boolean
 - limmhFromNeighbor:     boolean
 - limmhFromPreviousPair: boolean
 - reg63isLink:           boolean
 - cregStartAddress:      address
 - resetVectors{0}:       address
 - resetVectors{1}:       address
 - resetVectors{2}:       address
 - resetVectors{3}:       address
 - resetVectors{4}:       address
 - resetVectors{5}:       address
 - resetVectors{6}:       address
 - resetVectors{7}:       address
 - unifiedStall:          boolean
 - traceEnable:           boolean

TODO: these aggregate types should probably be read from a config file,
especially because it's pretty easy to do so.


LANGUAGE-AGNOSTIC CODE SECTIONS AND EXPRESSION
==============================================

Breaking out of the LaTeX environment
-------------------------------------

 - In order to facilitate breaking out of the usual LaTeX syntax highlighting in
   capable highlighters, lines which start with \begin or \end are completely
   ignored. This allows you to add \begin{lstlisting} and \end{lstlisting},
   which at least break out of LaTeX highlighting in kate and kwrite.

 - LaTeX style comments are ignored in code blocks, as % is used for modulo.
   Instead, C-style comments are accepted.


Templates
---------

NOT YET IMPLEMENTED, SPECIFICATION ONLY:

Templates, defined using \defineTemplate, can be inserted using
\<templatename>{[<arg0>]}[{<arg1>}[{<arg2>}...]]

They're a mix between C preprocessor expansions and #include statements. They
must be on their own line and will simply insert the template code where the
template command line was (like #include), after running a simple
search-and-replace for each argument (like expansions).


Types
-----

The allowed types are specified in the type specification section further up in
the file. When talking about types in this section, we'll use the internal type
names.

Types are coerced whenever possible to make operations work. The semantics are
defined as follows:

  bitvec<1>
    ^   ^
    |   |
    |   v
    |  bit  "0" <-> '0' <-> false; "1" <-> '1' <-> true
    |   ^
    |   |
    v   v
   boolean
      ^
      |     false <-> 0; true --> 1; nonzero --> true
      v
   natural
      ^
      |     unsigned value --> natural. The other direction needs an explicit
      |     cast because a size is necessary.
      |
 unsigned<n>
      ^
      |     same value, different supported operations in VHDL
      v
  bitvec<n>


In order to go from natural to bitvec<n> or unsigned<n>, a C-style typecast is
required, because the size of the vector needs to be specified. When a natural
does not fit in the vector, the higher-order bits will simply be thrown away.

WARNING: because of coercion through the natural type, you can change the width
of a vector by simply casting to that size. However, a natural is only 31-bits
wide! Thus, you cannot go from a 64 bit vector to 48 bits for instance, because
the upper 17 bits of the result will always be 0. Use verbatim code blocks or
slices if you need to do this.


Literals
--------
 - true and false:        boolean
 - decimal number:        natural
 - 0 octal number:        natural
 - 0b binary number:      natural
 - 0x hexadecimal number: natural
 - '0' and '1':           bit
 - "0101":                bitvect
 - X"DEADBEEF":           bitvect
 - U"0101":               unsigned
 - UX"0101":              unsigned

Note that there is no aggregate literal.


Aggregates
----------
Aggregate types can be assigned and initialized using an aggregate/compound
literal. The syntax is similar to VHDL aggregates:

{
  <name> => <expression>,
  <name>{<array index literal>} => <expression>,
  <name>{others} => <expression>,
  others => <expression>
}

Unlike in VHDL, 'others' can assign any kind of combination of types, as long as
the expression can be coerced to each member type. For instance, the aggregate
{others => 0} will initialize any aggregate which does not itself contain
another aggregate to all zeros.

Aggregate literals can not be used anywhere in an expression like C compound
literals can: aggregates can only be assigned directly to an object.


Objects and references
----------------------

Objects need to be declared outside the code blocks using the \iface* and \decl*
commands in their respective places. These objects can then be referenced as
follows, both as lvalue and as rvalue:

 - Reference name: [_a-zA-Z][_a-zA-Z0-9]*
   
 - If a reference starts with an _, cr_<regname>_<fieldname> is prefixed. This
   is just syntactic sugar for accessing locals.
   
 - To explicitly specify a context for context-specific things, an @ symbol
   and a natural literal may be appended (expressions, constants etc are not
   allowed here). The only thing which you can put here which isn't a number is
   \n{} in generated registers, as this is expanded to a number before parsing.
   
 - Member access for aggregate types is done by appending a . followed by the
   member name. Rudimentary support is provided for array members using {} curly
   brackets. Only natural literals and \n{} (in a \registergen environment) are
   allowed in here.
   
 - VHDL-like bit indexes and slices are supported for unsigned<n> and bitvec<n>
   types. Indexing a single bit is done by appending [<position>] to the end of
   the reference, where <position> expects a natural-typed expression. Slicing
   is done using [<position>, <size>], where <position> still expects an
   expression, but <size> only supports natural-typed literals so the resulting
   type is fixed to bitvec<size> or unsigned<size>.


Access levels and scoping:

 - Variables can only be read after they have been assigned.
 
 - Variables are locally-scoped. That is, a variable in field x cannot be
   accessed by field y. Registers must always be used for such communication.
 
 - Outputs cannot be read; constants and inputs cannot be assigned.


Expressions
-----------

Expressions are almost identical to C expressions, except that expressions with
side effects are not included. The differences are:

 - The added $ concatenation operator, mapping to the VHDL & operator. It is
   emulated in generated C code. This is processed on the same precedence level
   as + and - as it is in VHDL.
 
 - Unlike in C, the && and || operators aren't just there to facilitate lazy
   evaluation, as there are no side effects possible anyway. Instead, the only
   difference with the bitwise operators is they they will first coerce their
   operands to bit or boolean, similar to the difference between ! and ~.
   
 - ^^ is boolean xor, as I've never understood why it doesn't exist in C. It
   is emulated in C using !left ^ !right.


Statements
----------

The following statements are supported:

 - reference = expression;
   Assignment statement.
 
 - if (<condition>) <statement>
   Conditional statement.
   
 - if (<condition>) <statement> else <statement>
   Conditional statement with else.
 
 - { <statement>* }
   C-style block statement.

 - <?vhdl ... ?>
   Verbatim VHDL statement. Anything in ... is copied into the resulting VHDL
   implementation. The only exception is the @ symbol, followed by some command.
   See the section on verbatim @ commands below.

 - <?c ... ?>
   Verbatim C statement. Identical to the VHDL version, except for C output.


Verbatim @ commands
-------------------

These commands can be used in a verbatim environment:

@read <name>
@read <name>@<context>
@lvalue <name>
@lvalue <name>@<context>

They are replaced with the equivalent of <name> or <name>@<context> in
language-agnostic code. This syntax exists for the following reasons:

 - You can use the _local syntax this way.
 - The parser keeps track of which variables are used and assigned to here and
   there, for documentation reasons.
 - Using this syntax you don't need to know how the objects are actually
   implemented in VHDL and in the simulator. For instance, a context register
   read will map to cxrq[<context>]-><name> in C, not <name>[<context>] as you
   may have expected.

You should always use this syntax to access objects, unless you REALLY know what
you're doing and this syntax is somehow not expressive enough.

