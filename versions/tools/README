
--------------------------------------------------------------------------------
 Version tags
--------------------------------------------------------------------------------

Version tags are 7-character long strings of numbers, letters, dashes and
underscores, representing a version. They are generated from a hash of the
source files.

The core version tag is based only on the files relevant to the core. It is
generated such that the version tag is unlikely to change, unless the
functionality of the core changes: it is resilient to changes in comments and
whitespace in the VHDL files and to VHDL file renaming.

In contrast, the platform version tag is created in a dumber way, simply being
the start of the MD5 sum as base64 of all the platform sources (which may not
all be VHDL sources) in an undefined order. Therefore, the tag changes whenever
the source files change (barring hash collisions), but may also change depending
on the weather, the mood of the user, or the current state of the spirit realm.


--------------------------------------------------------------------------------
 Core version archiving
--------------------------------------------------------------------------------

$ python archive_core.py

Generates the current core version tag using vhdtag.py, saves it to the version
VHDL package, and then archives the core source files. May be called from
anywhere within the rvex repository.


--------------------------------------------------------------------------------
 Platform version archiving
--------------------------------------------------------------------------------

$ archive_platform_prepare.py temp/directory

Prepares a platform archive. This must be called from a platform directory, i.e.
(root)/platforms/<platform-name>/. This directory must contain a text file
called "archive-manifest" which contains a list of files which should be part of
the package. The syntax of this file is described later.

The script is to be called prior to synthesis, and does the following things:
 - run archive_core.py to archive the core files and generate the core tag.
 - generate the platform tag based on all source files specified in the
   manifest.
 - generate the platform version VHDL package as specified in the manifest.
 - create temp/directory, and fill it with the sources specified in the
   manifest.
 - generate temp/directory/meta, a text file containing meta information about
   the build, such as the name of the current user (taken from git's config),
   the time and the current repository state.
 - save the python state as a pickle file in temp/directory/build-in-progress.

When synthesis completes, the following script must be called with the same
directory argument.

$ archive_platform_complete.py temp/directory

This script will:
 - load the state from temp/directory/build-in-progress.
 - copy the bitfile and logs to temp/directory as specified in the manifest.
 - remove temp/directory/build-in-progress.
 - compress the contents of temp/directory to the platform version repository.
 - remove temp/directory.


--------------------------------------------------------------------------------
 Platform manifest files
--------------------------------------------------------------------------------

Platform manifest files determine what files are put in the archives and based
on which files the platform tag is generated. The file is explained by example
below.

 - - - - - - - - - - - - - - -

[name]
ml605-grlib       # Must equal the platform directory name.

[ptag]
work/ptag.vhd     # This is the filename of the platform_version_pkg VHDL file,
                  # relative to the platform directory.

[sources]
$ROOT/lib         # This section lists the source files. The version tag is
$PLATFORM/design  # based on these, and they are saved in the archive. $ROOT
                  # maps to the rvex repository root directory, $PLATFORM maps
                  # to the platform directory.
                  
$PLATFORM/Makefile -> $PLATFORM/makefile  # By default, the filename in the
                  # archive matches the actual name in the file. This can be
                  # overridden using this syntax. Here, the actual file is
                  # "Makefile", but it will be named "makefile" in the archive.

[logs]
$PLATFORM/work/xilinx.log -> xilinx.log  # This section does the same thing as
$PLATFORM/work/timing.twr -> timing.twr  # sources, only the platform tag does
                  # not depend on these, and they are copied to the archive
                  # after synthesis instead of before.

[bitfile]
work/leon3mp.bit  # This is the filename of the generated bit file, relative to
                  # the platform directory.

