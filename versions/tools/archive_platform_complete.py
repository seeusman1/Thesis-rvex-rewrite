#!/usr/bin/python

import pickle
import os

import paths
import manifest
from run_cmd import run_command

if 'arg' not in paths.dirs:
    print('Error: please pass a temporary directory for the archive as an argument.')
    sys.exit(1)

# Load the pickle data generated by the prepare script.
with open(paths.dirs['arg'] + os.sep + 'build-in-progress', 'rb') as f:
    pdata = pickle.load(f)

# Put the logs in the archive.
print('Populating archive with logfiles...')
odirs = set()
for i, o in manifest.logs_f():
    o = paths.dirs['arg'] + os.sep + 'logs' + os.sep + o
    if o.endswith('/'):
        o = o[:-1]
    odir = os.path.split(o)[0]
    if odir not in odirs:
        odirs.add(odir)    
        run_command(['mkdir', '-p', odir])
    run_command(['cp', i, o])
print('Complete.')

# Generate the filename for the bit file and the archive.
name = '-'.join([
    manifest.name,
    pdata['ptag']['tag'],
    pdata['ptag']['md5'],
    'core',
    pdata['ctag']['tag']
])
arch = os.path.realpath(
    paths.dirs['versions'] + os.sep + 
    'platforms' + os.sep + 
    name + '.tar.gz'
)

# Copy the bit file to the archive directory and to latest-<platform>.bit in
# the versions directory.
run_command(['cp', manifest.bitfile, paths.dirs['arg'] + os.sep + name + '.bit'])
run_command(['cp', '-f', manifest.bitfile, paths.dirs['versions'] + os.sep + 'latest-' + manifest.name + '.bit'])

# Get rid of the pickle file.
run_command(['rm', '-f', paths.dirs['arg'] + os.sep + 'build-in-progress'])

# Compress the archive.
cwd = os.getcwd()
os.chdir(paths.dirs['arg'])
run_command(['tar', 'czvf', arch, '.'])
os.chdir(cwd)

# Make a symlink to the archive.
cwd = os.getcwd()
os.chdir(paths.dirs['versions'])
run_command(['ln', '-sf', 'platforms' + os.sep + name + '.tar.gz', 'latest-' + manifest.name + '.tar.gz'])
os.chdir(cwd)

# We're done, remove the temporary directory.
run_command(['rm', '-rf', paths.dirs['arg']])

print('')
print('')
print('#'*100)
print('# \033[1mBuild complete and archived!\033[0m')
print('# \033[1mArchive file: %s\033[0m' % (name + '.tar.gz'))
print('# \033[1mStored in: %s\033[0m' % (os.path.split(arch)[0]))
print('#'*100)
print('')
print('')
