/* This file is generated by the scripts in /config. */

///                                                                                                  /* GENERATED */
// r-VEX simulator.
//
// Copyright (C) 2008-2015 by TU Delft.
// All Rights Reserved.
//
// THIS IS A LEGAL DOCUMENT, BY USING r-VEX,
// YOU ARE AGREEING TO THESE TERMS AND CONDITIONS.
//
// No portion of this work may be used by any commercial entity, or for any
// commercial purpose, without the prior, written permission of TU Delft.                            /* GENERATED */
// Nonprofit and noncommercial use is permitted as described below.
//
// 1. r-VEX is provided AS IS, with no warranty of any kind, express
// or implied. The user of the code accepts full responsibility for the
// application of the code and the use of any results.
//
// 2. Nonprofit and noncommercial use is encouraged. r-VEX may be
// downloaded, compiled, synthesized, copied, and modified solely for nonprofit,
// educational, noncommercial research, and noncommercial scholarship
// purposes provided that this notice in its entirety accompanies all copies.                        /* GENERATED */
// Copies of the modified software can be delivered to persons who use it
// solely for nonprofit, educational, noncommercial research, and
// noncommercial scholarship purposes provided that this notice in its
// entirety accompanies all copies.
//
// 3. ALL COMMERCIAL USE, AND ALL USE BY FOR PROFIT ENTITIES, IS EXPRESSLY
// PROHIBITED WITHOUT A LICENSE FROM TU Delft (J.S.S.M.Wong@tudelft.nl).
//
// 4. No nonprofit user may place any restrictions on the use of this software,
// including as modified by the user, by any other authorized user.                                  /* GENERATED */
//
// 5. Noncommercial and nonprofit users may distribute copies of r-VEX
// in compiled or binary form as set forth in Section 2, provided that
// either: (A) it is accompanied by the corresponding machine-readable source
// code, or (B) it is accompanied by a written offer, with no time limit, to
// give anyone a machine-readable copy of the corresponding source code in
// return for reimbursement of the cost of distribution. This written offer
// must permit verbatim duplication by anyone, or (C) it is distributed by
// someone who received only the executable form, and is accompanied by a
// copy of the written offer of source code.                                                         /* GENERATED */
//
// 6. r-VEX was developed by Stephan Wong, Thijs van As, Fakhar Anjam,
// Roel Seedorf, Anthony Brandon, Jeroen van Straten. r-VEX is currently
// maintained by TU Delft (J.S.S.M.Wong@tudelft.nl).
//
// Copyright (C) 2008-2015 by TU Delft.
///

#ifndef RVSIM_COMPONENTS_CORE_GENERATED_H
#define RVSIM_COMPONENTS_CORE_GENERATED_H                                                            /* GENERATED */

#include <inttypes.h>

namespace Core {


//==============================================================================
// Language-agnostic code types
//==============================================================================
                                                                                                     /* GENERATED */
typedef uint8_t boolean_t;
typedef uint32_t natural_t;
typedef uint8_t bit_t;
typedef uint8_t bitvec1_t;
typedef uint8_t bitvec2_t;
typedef uint8_t bitvec3_t;
typedef uint8_t bitvec4_t;
typedef uint8_t bitvec5_t;
typedef uint8_t bitvec6_t;
typedef uint8_t bitvec7_t;                                                                           /* GENERATED */
typedef uint8_t bitvec8_t;
typedef uint16_t bitvec9_t;
typedef uint16_t bitvec10_t;
typedef uint16_t bitvec11_t;
typedef uint16_t bitvec12_t;
typedef uint16_t bitvec13_t;
typedef uint16_t bitvec14_t;
typedef uint16_t bitvec15_t;
typedef uint16_t bitvec16_t;
typedef uint32_t bitvec17_t;                                                                         /* GENERATED */
typedef uint32_t bitvec18_t;
typedef uint32_t bitvec19_t;
typedef uint32_t bitvec20_t;
typedef uint32_t bitvec21_t;
typedef uint32_t bitvec22_t;
typedef uint32_t bitvec23_t;
typedef uint32_t bitvec24_t;
typedef uint32_t bitvec25_t;
typedef uint32_t bitvec26_t;
typedef uint32_t bitvec27_t;                                                                         /* GENERATED */
typedef uint32_t bitvec28_t;
typedef uint32_t bitvec29_t;
typedef uint32_t bitvec30_t;
typedef uint32_t bitvec31_t;
typedef uint32_t bitvec32_t;
typedef uint64_t bitvec33_t;
typedef uint64_t bitvec34_t;
typedef uint64_t bitvec35_t;
typedef uint64_t bitvec36_t;
typedef uint64_t bitvec37_t;                                                                         /* GENERATED */
typedef uint64_t bitvec38_t;
typedef uint64_t bitvec39_t;
typedef uint64_t bitvec40_t;
typedef uint64_t bitvec41_t;
typedef uint64_t bitvec42_t;
typedef uint64_t bitvec43_t;
typedef uint64_t bitvec44_t;
typedef uint64_t bitvec45_t;
typedef uint64_t bitvec46_t;
typedef uint64_t bitvec47_t;                                                                         /* GENERATED */
typedef uint64_t bitvec48_t;
typedef uint64_t bitvec49_t;
typedef uint64_t bitvec50_t;
typedef uint64_t bitvec51_t;
typedef uint64_t bitvec52_t;
typedef uint64_t bitvec53_t;
typedef uint64_t bitvec54_t;
typedef uint64_t bitvec55_t;
typedef uint64_t bitvec56_t;
typedef uint64_t bitvec57_t;                                                                         /* GENERATED */
typedef uint64_t bitvec58_t;
typedef uint64_t bitvec59_t;
typedef uint64_t bitvec60_t;
typedef uint64_t bitvec61_t;
typedef uint64_t bitvec62_t;
typedef uint64_t bitvec63_t;
typedef uint64_t bitvec64_t;
typedef uint8_t unsigned1_t;
typedef uint8_t unsigned2_t;
typedef uint8_t unsigned3_t;                                                                         /* GENERATED */
typedef uint8_t unsigned4_t;
typedef uint8_t unsigned5_t;
typedef uint8_t unsigned6_t;
typedef uint8_t unsigned7_t;
typedef uint8_t unsigned8_t;
typedef uint16_t unsigned9_t;
typedef uint16_t unsigned10_t;
typedef uint16_t unsigned11_t;
typedef uint16_t unsigned12_t;
typedef uint16_t unsigned13_t;                                                                       /* GENERATED */
typedef uint16_t unsigned14_t;
typedef uint16_t unsigned15_t;
typedef uint16_t unsigned16_t;
typedef uint32_t unsigned17_t;
typedef uint32_t unsigned18_t;
typedef uint32_t unsigned19_t;
typedef uint32_t unsigned20_t;
typedef uint32_t unsigned21_t;
typedef uint32_t unsigned22_t;
typedef uint32_t unsigned23_t;                                                                       /* GENERATED */
typedef uint32_t unsigned24_t;
typedef uint32_t unsigned25_t;
typedef uint32_t unsigned26_t;
typedef uint32_t unsigned27_t;
typedef uint32_t unsigned28_t;
typedef uint32_t unsigned29_t;
typedef uint32_t unsigned30_t;
typedef uint32_t unsigned31_t;
typedef uint32_t unsigned32_t;
typedef uint64_t unsigned33_t;                                                                       /* GENERATED */
typedef uint64_t unsigned34_t;
typedef uint64_t unsigned35_t;
typedef uint64_t unsigned36_t;
typedef uint64_t unsigned37_t;
typedef uint64_t unsigned38_t;
typedef uint64_t unsigned39_t;
typedef uint64_t unsigned40_t;
typedef uint64_t unsigned41_t;
typedef uint64_t unsigned42_t;
typedef uint64_t unsigned43_t;                                                                       /* GENERATED */
typedef uint64_t unsigned44_t;
typedef uint64_t unsigned45_t;
typedef uint64_t unsigned46_t;
typedef uint64_t unsigned47_t;
typedef uint64_t unsigned48_t;
typedef uint64_t unsigned49_t;
typedef uint64_t unsigned50_t;
typedef uint64_t unsigned51_t;
typedef uint64_t unsigned52_t;
typedef uint64_t unsigned53_t;                                                                       /* GENERATED */
typedef uint64_t unsigned54_t;
typedef uint64_t unsigned55_t;
typedef uint64_t unsigned56_t;
typedef uint64_t unsigned57_t;
typedef uint64_t unsigned58_t;
typedef uint64_t unsigned59_t;
typedef uint64_t unsigned60_t;
typedef uint64_t unsigned61_t;
typedef uint64_t unsigned62_t;
typedef uint64_t unsigned63_t;                                                                       /* GENERATED */
typedef uint64_t unsigned64_t;
typedef uint8_t byte_t;
typedef uint32_t data_t;
typedef uint32_t address_t;
typedef uint16_t sylStatus_t;
typedef uint8_t brRegData_t;
typedef uint8_t trapCause_t;
typedef uint8_t twoBit_t;
typedef uint8_t threeBit_t;
typedef uint8_t fourBit_t;                                                                           /* GENERATED */
typedef uint64_t sevenByte_t;
typedef struct {
    bit_t active;
    trapCause_t cause;
    address_t arg;
} trapInfo_t;
typedef struct {
    address_t addr[4];
    twoBit_t cfg[4];
} breakpointInfo_t;                                                                                  /* GENERATED */
typedef struct {
    bit_t instr_access;
    bit_t instr_miss;
    bitvec2_t data_accessType;
    bit_t data_bypass;
    bit_t data_miss;
    bit_t data_writePending;
} cacheStatus_t;
typedef struct {
    natural_t numLanesLog2;                                                                          /* GENERATED */
    natural_t numLaneGroupsLog2;
    natural_t numContextsLog2;
    natural_t genBundleSizeLog2;
    natural_t bundleAlignLog2;
    natural_t multiplierLanes;
    natural_t memLaneRevIndex;
    natural_t numBreakpoints;
    boolean_t forwarding;
    boolean_t limmhFromNeighbor;
    boolean_t limmhFromPreviousPair;                                                                 /* GENERATED */
    boolean_t reg63isLink;
    address_t cregStartAddress;
    address_t resetVectors[8];
    boolean_t unifiedStall;
    boolean_t traceEnable;
    natural_t perfCountSize;
    boolean_t cachePerfCountEnable;
} cfgVect_t;

                                                                                                     /* GENERATED */
//==============================================================================
// Opcode decoding table
//==============================================================================

typedef enum {
    D_FUNCSEL_MEM,
    D_FUNCSEL_MUL,
    D_FUNCSEL_ALU,
    D_FUNCSEL_PCP1
} datapathFuncSel_t;                                                                                 /* GENERATED */

typedef struct {
    datapathFuncSel_t funcSel;
    unsigned int op3LinkReg : 1;
    unsigned int stackOp : 1;
    unsigned int op1LinkReg : 1;
    unsigned int gpRegWE : 1;
    unsigned int op3BranchRegs : 1;
    unsigned int isNOP : 1;
    unsigned int linkWE : 1;                                                                         /* GENERATED */
    unsigned int allBrRegsWE : 1;
    unsigned int brFmt : 1;
    unsigned int brRegWE : 1;
    unsigned int isLIMMH : 1;
    unsigned int isTrap : 1;
} datapathCtrlSignals_t;

typedef enum {
    A_BITWISEOP_SET_BIT,
    A_BITWISEOP_BITW_XOR,                                                                            /* GENERATED */
    A_BITWISEOP_BITW_AND,
    A_BITWISEOP_BITW_OR
} aluBitwiseOp_t;

typedef enum {
    A_OP1MUX_EXTEND32,
    A_OP1MUX_SHL1,
    A_OP1MUX_SHL3,
    A_OP1MUX_SHL2,
    A_OP1MUX_EXTEND16,                                                                               /* GENERATED */
    A_OP1MUX_SHL4,
    A_OP1MUX_EXTEND32INV,
    A_OP1MUX_EXTEND8
} aluOp1Mux_t;

typedef enum {
    A_OP2MUX_ZERO,
    A_OP2MUX_EXTEND32
} aluOp2Mux_t;
                                                                                                     /* GENERATED */
typedef enum {
    A_INTRESULTMUX_CLZ,
    A_INTRESULTMUX_OP_SEL,
    A_INTRESULTMUX_BITWISE,
    A_INTRESULTMUX_BOOL,
    A_INTRESULTMUX_ADDER,
    A_INTRESULTMUX_SHIFTER
} aluIntResultMux_t;

typedef enum {                                                                                       /* GENERATED */
    A_BRRESULTMUX_CMP_GT,
    A_BRRESULTMUX_CMP_LE,
    A_BRRESULTMUX_LOGIC_OR,
    A_BRRESULTMUX_TBIT,
    A_BRRESULTMUX_LOGIC_NOR,
    A_BRRESULTMUX_LOGIC_AND,
    A_BRRESULTMUX_CMP_NE,
    A_BRRESULTMUX_CARRY_OUT,
    A_BRRESULTMUX_CMP_GE,
    A_BRRESULTMUX_LOGIC_NAND,                                                                        /* GENERATED */
    A_BRRESULTMUX_CMP_LT,
    A_BRRESULTMUX_PASS,
    A_BRRESULTMUX_TBITF,
    A_BRRESULTMUX_CMP_EQ,
    A_BRRESULTMUX_DIVS
} aluBrResultMux_t;

typedef enum {
    A_OPBRMUX_TRUE,
    A_OPBRMUX_INVERT,                                                                                /* GENERATED */
    A_OPBRMUX_FALSE,
    A_OPBRMUX_PASS
} aluOpBrMux_t;

typedef struct {
    aluBitwiseOp_t bitwiseOp;
    aluOp1Mux_t op1Mux;
    aluOp2Mux_t op2Mux;
    aluIntResultMux_t intResultMux;
    aluBrResultMux_t brResultMux;                                                                    /* GENERATED */
    aluOpBrMux_t opBrMux;
    unsigned int compare : 1;
    unsigned int shiftLeft : 1;
    unsigned int unsignedOp : 1;
    unsigned int divs : 1;
} aluCtrlSignals_t;

typedef struct {
    unsigned int isBranchInstruction : 1;
    unsigned int stop : 1;                                                                           /* GENERATED */
    unsigned int branchIfFalse : 1;
    unsigned int branchToLink : 1;
    unsigned int link : 1;
    unsigned int branchIfTrue : 1;
    unsigned int RFI : 1;
} branchCtrlSignals_t;

typedef enum {
    M_ACCESSSIZEBLOG2_ACCESS_SIZE_HALFWORD,
    M_ACCESSSIZEBLOG2_ACCESS_SIZE_BYTE,                                                              /* GENERATED */
    M_ACCESSSIZEBLOG2_ACCESS_SIZE_WORD
} memoryAccessSizeBLog2_t;

typedef struct {
    memoryAccessSizeBLog2_t accessSizeBLog2;
    unsigned int isMemoryInstruction : 1;
    unsigned int unsignedOp : 1;
    unsigned int readEnable : 1;
    unsigned int writeEnable : 1;
} memoryCtrlSignals_t;                                                                               /* GENERATED */

typedef enum {
    U_RESULTSEL_SHR32,
    U_RESULTSEL_SHL16,
    U_RESULTSEL_SHR16,
    U_RESULTSEL_PASS
} multiplierResultSel_t;

typedef enum {
    U_OP1SEL_HIGH_HALF,                                                                              /* GENERATED */
    U_OP1SEL_WORD,
    U_OP1SEL_LOW_HALF
} multiplierOp1sel_t;

typedef enum {
    U_OP2SEL_HIGH_HALF,
    U_OP2SEL_LOW_HALF
} multiplierOp2sel_t;

typedef struct {                                                                                     /* GENERATED */
    multiplierResultSel_t resultSel;
    multiplierOp1sel_t op1sel;
    multiplierOp2sel_t op2sel;
    unsigned int op2unsigned : 1;
    unsigned int op1unsigned : 1;
    unsigned int isMultiplyInstruction : 1;
} multiplierCtrlSignals_t;

typedef struct {
    uint8_t valid[2];                                                                                /* GENERATED */
    datapathCtrlSignals_t datapathCtrl;
    aluCtrlSignals_t aluCtrl;
    branchCtrlSignals_t branchCtrl;
    memoryCtrlSignals_t memoryCtrl;
    multiplierCtrlSignals_t multiplierCtrl;
} opcodeTableEntry_t;

extern const opcodeTableEntry_t OPCODE_TABLE[256];

                                                                                                     /* GENERATED */
//==============================================================================
// Traps
//==============================================================================

#define TRAP_NONE 0x00
#define TRAP_INVALID_OP 0x01
#define TRAP_MISALIGNED_BRANCH 0x02
#define TRAP_FETCH_FAULT 0x03
#define TRAP_MISALIGNED_ACCESS 0x04
#define TRAP_DMEM_FAULT 0x05                                                                         /* GENERATED */
#define TRAP_LIMMH_FAULT 0x06
#define TRAP_EXT_INTERRUPT 0x07
#define TRAP_STOP 0x08
#define TRAP_SOFT_CTXT_SWITCH 0x09
#define TRAP_SOFT_DEBUG_0 0xF8
#define TRAP_SOFT_DEBUG_1 0xF9
#define TRAP_SOFT_DEBUG_2 0xFA
#define TRAP_STEP_COMPLETE 0xFB
#define TRAP_HW_BREAKPOINT_0 0xFC
#define TRAP_HW_BREAKPOINT_1 0xFD                                                                    /* GENERATED */
#define TRAP_HW_BREAKPOINT_2 0xFE
#define TRAP_HW_BREAKPOINT_3 0xFF


//==============================================================================
// Control register definitions
//==============================================================================

#define CR_GSR 0x000
#define CR_GSR_R_BIT 31                                                                              /* GENERATED */
#define CR_GSR_R_MASK 0x80000000
#define CR_GSR_E_BIT 13
#define CR_GSR_E_MASK 0x00002000
#define CR_GSR_B_BIT 12
#define CR_GSR_B_MASK 0x00001000
#define CR_GSR_RID_BIT 8
#define CR_GSR_RID_MASK 0x00000F00
#define CR_BCRR 0x004
#define CR_BCRR_BCRR_BIT 0
#define CR_BCRR_BCRR_MASK 0xFFFFFFFF                                                                 /* GENERATED */
#define CR_CC 0x008
#define CR_CC_CC_BIT 0
#define CR_CC_CC_MASK 0xFFFFFFFF
#define CR_AFF 0x00C
#define CR_AFF_AF_BIT 0
#define CR_AFF_AF_MASK 0xFFFFFFFF
#define CR_CNT 0x010
#define CR_CNT_CNT_BIT 0
#define CR_CNT_CNT_MASK 0xFFFFFFFF
#define CR_CNTH 0x014                                                                                /* GENERATED */
#define CR_CNTH_CNTH_BIT 8
#define CR_CNTH_CNTH_MASK 0xFFFFFF00
#define CR_CNTH_CNT_BIT 0
#define CR_CNTH_CNT_MASK 0x000000FF
#define CR_LIMC7 0x0A0
#define CR_LIMC7_BORROW15_BIT 16
#define CR_LIMC7_BORROW15_MASK 0xFFFF0000
#define CR_BORROW15 0x0A1
#define CR_LIMC7_BORROW14_BIT 0
#define CR_LIMC7_BORROW14_MASK 0x0000FFFF                                                            /* GENERATED */
#define CR_BORROW14 0x0A3
#define CR_LIMC6 0x0A4
#define CR_LIMC6_BORROW13_BIT 16
#define CR_LIMC6_BORROW13_MASK 0xFFFF0000
#define CR_BORROW13 0x0A5
#define CR_LIMC6_BORROW12_BIT 0
#define CR_LIMC6_BORROW12_MASK 0x0000FFFF
#define CR_BORROW12 0x0A7
#define CR_LIMC5 0x0A8
#define CR_LIMC5_BORROW11_BIT 16                                                                     /* GENERATED */
#define CR_LIMC5_BORROW11_MASK 0xFFFF0000
#define CR_BORROW11 0x0A9
#define CR_LIMC5_BORROW10_BIT 0
#define CR_LIMC5_BORROW10_MASK 0x0000FFFF
#define CR_BORROW10 0x0AB
#define CR_LIMC4 0x0AC
#define CR_LIMC4_BORROW9_BIT 16
#define CR_LIMC4_BORROW9_MASK 0xFFFF0000
#define CR_BORROW9 0x0AD
#define CR_LIMC4_BORROW8_BIT 0                                                                       /* GENERATED */
#define CR_LIMC4_BORROW8_MASK 0x0000FFFF
#define CR_BORROW8 0x0AF
#define CR_LIMC3 0x0B0
#define CR_LIMC3_BORROW7_BIT 16
#define CR_LIMC3_BORROW7_MASK 0xFFFF0000
#define CR_BORROW7 0x0B1
#define CR_LIMC3_BORROW6_BIT 0
#define CR_LIMC3_BORROW6_MASK 0x0000FFFF
#define CR_BORROW6 0x0B3
#define CR_LIMC2 0x0B4                                                                               /* GENERATED */
#define CR_LIMC2_BORROW5_BIT 16
#define CR_LIMC2_BORROW5_MASK 0xFFFF0000
#define CR_BORROW5 0x0B5
#define CR_LIMC2_BORROW4_BIT 0
#define CR_LIMC2_BORROW4_MASK 0x0000FFFF
#define CR_BORROW4 0x0B7
#define CR_LIMC1 0x0B8
#define CR_LIMC1_BORROW3_BIT 16
#define CR_LIMC1_BORROW3_MASK 0xFFFF0000
#define CR_BORROW3 0x0B9                                                                             /* GENERATED */
#define CR_LIMC1_BORROW2_BIT 0
#define CR_LIMC1_BORROW2_MASK 0x0000FFFF
#define CR_BORROW2 0x0BB
#define CR_LIMC0 0x0BC
#define CR_LIMC0_BORROW1_BIT 16
#define CR_LIMC0_BORROW1_MASK 0xFFFF0000
#define CR_BORROW1 0x0BD
#define CR_LIMC0_BORROW0_BIT 0
#define CR_LIMC0_BORROW0_MASK 0x0000FFFF
#define CR_BORROW0 0x0BF                                                                             /* GENERATED */
#define CR_SIC3 0x0C0
#define CR_SIC3_SYL15CAP_BIT 24
#define CR_SIC3_SYL15CAP_MASK 0xFF000000
#define CR_SYL15CAP 0x0C0
#define CR_SIC3_SYL14CAP_BIT 16
#define CR_SIC3_SYL14CAP_MASK 0x00FF0000
#define CR_SYL14CAP 0x0C1
#define CR_SIC3_SYL13CAP_BIT 8
#define CR_SIC3_SYL13CAP_MASK 0x0000FF00
#define CR_SYL13CAP 0x0C2                                                                            /* GENERATED */
#define CR_SIC3_SYL12CAP_BIT 0
#define CR_SIC3_SYL12CAP_MASK 0x000000FF
#define CR_SYL12CAP 0x0C3
#define CR_SIC2 0x0C4
#define CR_SIC2_SYL11CAP_BIT 24
#define CR_SIC2_SYL11CAP_MASK 0xFF000000
#define CR_SYL11CAP 0x0C4
#define CR_SIC2_SYL10CAP_BIT 16
#define CR_SIC2_SYL10CAP_MASK 0x00FF0000
#define CR_SYL10CAP 0x0C5                                                                            /* GENERATED */
#define CR_SIC2_SYL9CAP_BIT 8
#define CR_SIC2_SYL9CAP_MASK 0x0000FF00
#define CR_SYL9CAP 0x0C6
#define CR_SIC2_SYL8CAP_BIT 0
#define CR_SIC2_SYL8CAP_MASK 0x000000FF
#define CR_SYL8CAP 0x0C7
#define CR_SIC1 0x0C8
#define CR_SIC1_SYL7CAP_BIT 24
#define CR_SIC1_SYL7CAP_MASK 0xFF000000
#define CR_SYL7CAP 0x0C8                                                                             /* GENERATED */
#define CR_SIC1_SYL6CAP_BIT 16
#define CR_SIC1_SYL6CAP_MASK 0x00FF0000
#define CR_SYL6CAP 0x0C9
#define CR_SIC1_SYL5CAP_BIT 8
#define CR_SIC1_SYL5CAP_MASK 0x0000FF00
#define CR_SYL5CAP 0x0CA
#define CR_SIC1_SYL4CAP_BIT 0
#define CR_SIC1_SYL4CAP_MASK 0x000000FF
#define CR_SYL4CAP 0x0CB
#define CR_SIC0 0x0CC                                                                                /* GENERATED */
#define CR_SIC0_SYL3CAP_BIT 24
#define CR_SIC0_SYL3CAP_MASK 0xFF000000
#define CR_SYL3CAP 0x0CC
#define CR_SIC0_SYL2CAP_BIT 16
#define CR_SIC0_SYL2CAP_MASK 0x00FF0000
#define CR_SYL2CAP 0x0CD
#define CR_SIC0_SYL1CAP_BIT 8
#define CR_SIC0_SYL1CAP_MASK 0x0000FF00
#define CR_SYL1CAP 0x0CE
#define CR_SIC0_SYL0CAP_BIT 0                                                                        /* GENERATED */
#define CR_SIC0_SYL0CAP_MASK 0x000000FF
#define CR_SYL0CAP 0x0CF
#define CR_GPS1 0x0D0
#define CR_GPS0 0x0D4
#define CR_GPS0_MEMAR_BIT 24
#define CR_GPS0_MEMAR_MASK 0x0F000000
#define CR_GPS0_MEMDC_BIT 20
#define CR_GPS0_MEMDC_MASK 0x00F00000
#define CR_GPS0_MEMDR_BIT 16
#define CR_GPS0_MEMDR_MASK 0x000F0000                                                                /* GENERATED */
#define CR_GPS0_MULC_BIT 12
#define CR_GPS0_MULC_MASK 0x0000F000
#define CR_GPS0_MULR_BIT 8
#define CR_GPS0_MULR_MASK 0x00000F00
#define CR_GPS0_ALUC_BIT 4
#define CR_GPS0_ALUC_MASK 0x000000F0
#define CR_GPS0_ALUR_BIT 0
#define CR_GPS0_ALUR_MASK 0x0000000F
#define CR_SPS1 0x0D8
#define CR_SPS0 0x0DC                                                                                /* GENERATED */
#define CR_SPS0_MEMMC_BIT 28
#define CR_SPS0_MEMMC_MASK 0xF0000000
#define CR_SPS0_MEMMR_BIT 24
#define CR_SPS0_MEMMR_MASK 0x0F000000
#define CR_SPS0_MEMDC_BIT 20
#define CR_SPS0_MEMDC_MASK 0x00F00000
#define CR_SPS0_MEMDR_BIT 16
#define CR_SPS0_MEMDR_MASK 0x000F0000
#define CR_SPS0_BRC_BIT 12
#define CR_SPS0_BRC_MASK 0x0000F000                                                                  /* GENERATED */
#define CR_SPS0_BRR_BIT 8
#define CR_SPS0_BRR_MASK 0x00000F00
#define CR_SPS0_ALUC_BIT 4
#define CR_SPS0_ALUC_MASK 0x000000F0
#define CR_SPS0_ALUR_BIT 0
#define CR_SPS0_ALUR_MASK 0x0000000F
#define CR_EXT2 0x0E0
#define CR_EXT1 0x0E4
#define CR_EXT0 0x0E8
#define CR_EXT0_T_BIT 27                                                                             /* GENERATED */
#define CR_EXT0_T_MASK 0x08000000
#define CR_EXT0_BRK_BIT 24
#define CR_EXT0_BRK_MASK 0x07000000
#define CR_EXT0_C_BIT 19
#define CR_EXT0_C_MASK 0x00080000
#define CR_EXT0_P_BIT 16
#define CR_EXT0_P_MASK 0x00070000
#define CR_EXT0_O_BIT 2
#define CR_EXT0_O_MASK 0x00000004
#define CR_EXT0_L_BIT 1                                                                              /* GENERATED */
#define CR_EXT0_L_MASK 0x00000002
#define CR_EXT0_F_BIT 0
#define CR_EXT0_F_MASK 0x00000001
#define CR_DCFG 0x0EC
#define CR_DCFG_BA_BIT 12
#define CR_DCFG_BA_MASK 0x0000F000
#define CR_DCFG_NC_BIT 8
#define CR_DCFG_NC_MASK 0x00000F00
#define CR_DCFG_NG_BIT 4
#define CR_DCFG_NG_MASK 0x000000F0                                                                   /* GENERATED */
#define CR_DCFG_NL_BIT 0
#define CR_DCFG_NL_MASK 0x0000000F
#define CR_CVER1 0x0F0
#define CR_CVER1_VER_BIT 24
#define CR_CVER1_VER_MASK 0xFF000000
#define CR_CVER 0x0F0
#define CR_CVER1_CTAG0_BIT 16
#define CR_CVER1_CTAG0_MASK 0x00FF0000
#define CR_CTAG 0x0F1
#define CR_CVER1_CTAG1_BIT 8                                                                         /* GENERATED */
#define CR_CVER1_CTAG1_MASK 0x0000FF00
#define CR_CVER1_CTAG2_BIT 0
#define CR_CVER1_CTAG2_MASK 0x000000FF
#define CR_CVER0 0x0F4
#define CR_CVER0_CTAG3_BIT 24
#define CR_CVER0_CTAG3_MASK 0xFF000000
#define CR_CVER0_CTAG4_BIT 16
#define CR_CVER0_CTAG4_MASK 0x00FF0000
#define CR_CVER0_CTAG5_BIT 8
#define CR_CVER0_CTAG5_MASK 0x0000FF00                                                               /* GENERATED */
#define CR_CVER0_CTAG6_BIT 0
#define CR_CVER0_CTAG6_MASK 0x000000FF
#define CR_PVER1 0x0F8
#define CR_PVER1_COID_BIT 24
#define CR_PVER1_COID_MASK 0xFF000000
#define CR_COID 0x0F8
#define CR_PVER1_PTAG0_BIT 16
#define CR_PVER1_PTAG0_MASK 0x00FF0000
#define CR_PTAG 0x0F9
#define CR_PVER1_PTAG1_BIT 8                                                                         /* GENERATED */
#define CR_PVER1_PTAG1_MASK 0x0000FF00
#define CR_PVER1_PTAG2_BIT 0
#define CR_PVER1_PTAG2_MASK 0x000000FF
#define CR_PVER0 0x0FC
#define CR_PVER0_PTAG3_BIT 24
#define CR_PVER0_PTAG3_MASK 0xFF000000
#define CR_PVER0_PTAG4_BIT 16
#define CR_PVER0_PTAG4_MASK 0x00FF0000
#define CR_PVER0_PTAG5_BIT 8
#define CR_PVER0_PTAG5_MASK 0x0000FF00                                                               /* GENERATED */
#define CR_PVER0_PTAG6_BIT 0
#define CR_PVER0_PTAG6_MASK 0x000000FF
#define CR_CCR 0x200
#define CR_CCR_CAUSE_BIT 24
#define CR_CCR_CAUSE_MASK 0xFF000000
#define CR_TC 0x200
#define CR_CCR_BRANCH_BIT 16
#define CR_CCR_BRANCH_MASK 0x00FF0000
#define CR_BR 0x201
#define CR_CCR_K_BIT 8                                                                               /* GENERATED */
#define CR_CCR_K_MASK 0x00000300
#define CR_CCR_C_BIT 6
#define CR_CCR_C_MASK 0x000000C0
#define CR_CCR_B_BIT 4
#define CR_CCR_B_MASK 0x00000030
#define CR_CCR_R_BIT 2
#define CR_CCR_R_MASK 0x0000000C
#define CR_CCR_I_BIT 0
#define CR_CCR_I_MASK 0x00000003
#define CR_SCCR 0x204                                                                                /* GENERATED */
#define CR_SCCR_ID_BIT 24
#define CR_SCCR_ID_MASK 0xFF000000
#define CR_CID 0x204
#define CR_SCCR_K_BIT 8
#define CR_SCCR_K_MASK 0x00000300
#define CR_SCCR_C_BIT 6
#define CR_SCCR_C_MASK 0x000000C0
#define CR_SCCR_B_BIT 4
#define CR_SCCR_B_MASK 0x00000030
#define CR_SCCR_R_BIT 2                                                                              /* GENERATED */
#define CR_SCCR_R_MASK 0x0000000C
#define CR_SCCR_I_BIT 0
#define CR_SCCR_I_MASK 0x00000003
#define CR_LR 0x208
#define CR_LR_LR_BIT 0
#define CR_LR_LR_MASK 0xFFFFFFFF
#define CR_PC 0x20C
#define CR_PC_PC_BIT 0
#define CR_PC_PC_MASK 0xFFFFFFFF
#define CR_TH 0x210                                                                                  /* GENERATED */
#define CR_TH_TH_BIT 0
#define CR_TH_TH_MASK 0xFFFFFFFF
#define CR_PH 0x214
#define CR_PH_PH_BIT 0
#define CR_PH_PH_MASK 0xFFFFFFFF
#define CR_TP 0x218
#define CR_TP_TP_BIT 0
#define CR_TP_TP_MASK 0xFFFFFFFF
#define CR_TA 0x21C
#define CR_TA_TA_BIT 0                                                                               /* GENERATED */
#define CR_TA_TA_MASK 0xFFFFFFFF
#define CR_BR0 0x220
#define CR_BR0_BR0_BIT 0
#define CR_BR0_BR0_MASK 0xFFFFFFFF
#define CR_BR1 0x224
#define CR_BR1_BR1_BIT 0
#define CR_BR1_BR1_MASK 0xFFFFFFFF
#define CR_BR2 0x228
#define CR_BR2_BR2_BIT 0
#define CR_BR2_BR2_MASK 0xFFFFFFFF                                                                   /* GENERATED */
#define CR_BR3 0x22C
#define CR_BR3_BR3_BIT 0
#define CR_BR3_BR3_MASK 0xFFFFFFFF
#define CR_DCR 0x230
#define CR_DCR_D_BIT 31
#define CR_DCR_D_MASK 0x80000000
#define CR_DCR_J_BIT 30
#define CR_DCR_J_MASK 0x40000000
#define CR_DCR_I_BIT 28
#define CR_DCR_I_MASK 0x10000000                                                                     /* GENERATED */
#define CR_DCR_E_BIT 27
#define CR_DCR_E_MASK 0x08000000
#define CR_DCR_R_BIT 26
#define CR_DCR_R_MASK 0x04000000
#define CR_DCR_S_BIT 25
#define CR_DCR_S_MASK 0x02000000
#define CR_DCR_B_BIT 24
#define CR_DCR_B_MASK 0x01000000
#define CR_DCR_CAUSE_BIT 16
#define CR_DCR_CAUSE_MASK 0x00FF0000                                                                 /* GENERATED */
#define CR_DCRC 0x231
#define CR_DCR_BR3_BIT 12
#define CR_DCR_BR3_MASK 0x00003000
#define CR_DCR_BR2_BIT 8
#define CR_DCR_BR2_MASK 0x00000300
#define CR_DCR_BR1_BIT 4
#define CR_DCR_BR1_MASK 0x00000030
#define CR_DCR_BR0_BIT 0
#define CR_DCR_BR0_MASK 0x00000003
#define CR_DCR2 0x234                                                                                /* GENERATED */
#define CR_DCR2_RESULT_BIT 24
#define CR_DCR2_RESULT_MASK 0xFF000000
#define CR_RET 0x234
#define CR_DCR2_TRCAP_BIT 8
#define CR_DCR2_TRCAP_MASK 0x0000FF00
#define CR_DCR2_T_BIT 7
#define CR_DCR2_T_MASK 0x00000080
#define CR_DCR2_M_BIT 6
#define CR_DCR2_M_MASK 0x00000040
#define CR_DCR2_R_BIT 5                                                                              /* GENERATED */
#define CR_DCR2_R_MASK 0x00000020
#define CR_DCR2_C_BIT 4
#define CR_DCR2_C_MASK 0x00000010
#define CR_DCR2_I_BIT 3
#define CR_DCR2_I_MASK 0x00000008
#define CR_DCR2_E_BIT 0
#define CR_DCR2_E_MASK 0x00000001
#define CR_CRR 0x240
#define CR_CRR_CRR_BIT 0
#define CR_CRR_CRR_MASK 0xFFFFFFFF                                                                   /* GENERATED */
#define CR_WCFG 0x248
#define CR_WCFG_WCFG_BIT 0
#define CR_WCFG_WCFG_MASK 0xFFFFFFFF
#define CR_SAWC 0x24C
#define CR_SAWC_RUN_BIT 1
#define CR_SAWC_RUN_MASK 0x000000FE
#define CR_SAWC_S_BIT 0
#define CR_SAWC_S_MASK 0x00000001
#define CR_SCRP1 0x250
#define CR_SCRP1_SCRP1_BIT 0                                                                         /* GENERATED */
#define CR_SCRP1_SCRP1_MASK 0xFFFFFFFF
#define CR_SCRP2 0x254
#define CR_SCRP2_SCRP2_BIT 0
#define CR_SCRP2_SCRP2_MASK 0xFFFFFFFF
#define CR_SCRP3 0x258
#define CR_SCRP3_SCRP3_BIT 0
#define CR_SCRP3_SCRP3_MASK 0xFFFFFFFF
#define CR_SCRP4 0x25C
#define CR_SCRP4_SCRP4_BIT 0
#define CR_SCRP4_SCRP4_MASK 0xFFFFFFFF                                                               /* GENERATED */
#define CR_RSC 0x260
#define CR_RSC_RSC_BIT 0
#define CR_RSC_RSC_MASK 0xFFFFFFFF
#define CR_CSC 0x264
#define CR_CSC_CSC_BIT 0
#define CR_CSC_CSC_MASK 0xFFFFFFFF
#define CR_RSC1 0x268
#define CR_RSC1_RSC1_BIT 0
#define CR_RSC1_RSC1_MASK 0xFFFFFFFF
#define CR_RSC2 0x270                                                                                /* GENERATED */
#define CR_RSC2_RSC2_BIT 0
#define CR_RSC2_RSC2_MASK 0xFFFFFFFF
#define CR_RSC3 0x278
#define CR_RSC3_RSC3_BIT 0
#define CR_RSC3_RSC3_MASK 0xFFFFFFFF
#define CR_RSC4 0x280
#define CR_RSC4_RSC4_BIT 0
#define CR_RSC4_RSC4_MASK 0xFFFFFFFF
#define CR_RSC5 0x288
#define CR_RSC5_RSC5_BIT 0                                                                           /* GENERATED */
#define CR_RSC5_RSC5_MASK 0xFFFFFFFF
#define CR_RSC6 0x290
#define CR_RSC6_RSC6_BIT 0
#define CR_RSC6_RSC6_MASK 0xFFFFFFFF
#define CR_RSC7 0x298
#define CR_RSC7_RSC7_BIT 0
#define CR_RSC7_RSC7_MASK 0xFFFFFFFF
#define CR_CSC1 0x26C
#define CR_CSC1_CSC1_BIT 0
#define CR_CSC1_CSC1_MASK 0xFFFFFFFF                                                                 /* GENERATED */
#define CR_CSC2 0x274
#define CR_CSC2_CSC2_BIT 0
#define CR_CSC2_CSC2_MASK 0xFFFFFFFF
#define CR_CSC3 0x27C
#define CR_CSC3_CSC3_BIT 0
#define CR_CSC3_CSC3_MASK 0xFFFFFFFF
#define CR_CSC4 0x284
#define CR_CSC4_CSC4_BIT 0
#define CR_CSC4_CSC4_MASK 0xFFFFFFFF
#define CR_CSC5 0x28C                                                                                /* GENERATED */
#define CR_CSC5_CSC5_BIT 0
#define CR_CSC5_CSC5_MASK 0xFFFFFFFF
#define CR_CSC6 0x294
#define CR_CSC6_CSC6_BIT 0
#define CR_CSC6_CSC6_MASK 0xFFFFFFFF
#define CR_CSC7 0x29C
#define CR_CSC7_CSC7_BIT 0
#define CR_CSC7_CSC7_MASK 0xFFFFFFFF
#define CR_CYC 0x300
#define CR_CYC_CYC3_BIT 24                                                                           /* GENERATED */
#define CR_CYC_CYC3_MASK 0xFF000000
#define CR_CYC_CYC2_BIT 16
#define CR_CYC_CYC2_MASK 0x00FF0000
#define CR_CYC_CYC1_BIT 8
#define CR_CYC_CYC1_MASK 0x0000FF00
#define CR_CYC_CYC0_BIT 0
#define CR_CYC_CYC0_MASK 0x000000FF
#define CR_CYCH 0x304
#define CR_CYCH_CYC6_BIT 24
#define CR_CYCH_CYC6_MASK 0xFF000000                                                                 /* GENERATED */
#define CR_CYCH_CYC5_BIT 16
#define CR_CYCH_CYC5_MASK 0x00FF0000
#define CR_CYCH_CYC4_BIT 8
#define CR_CYCH_CYC4_MASK 0x0000FF00
#define CR_CYCH_CYC3_BIT 0
#define CR_CYCH_CYC3_MASK 0x000000FF
#define CR_STALL 0x308
#define CR_STALL_STALL3_BIT 24
#define CR_STALL_STALL3_MASK 0xFF000000
#define CR_STALL_STALL2_BIT 16                                                                       /* GENERATED */
#define CR_STALL_STALL2_MASK 0x00FF0000
#define CR_STALL_STALL1_BIT 8
#define CR_STALL_STALL1_MASK 0x0000FF00
#define CR_STALL_STALL0_BIT 0
#define CR_STALL_STALL0_MASK 0x000000FF
#define CR_STALLH 0x30C
#define CR_STALLH_STALL6_BIT 24
#define CR_STALLH_STALL6_MASK 0xFF000000
#define CR_STALLH_STALL5_BIT 16
#define CR_STALLH_STALL5_MASK 0x00FF0000                                                             /* GENERATED */
#define CR_STALLH_STALL4_BIT 8
#define CR_STALLH_STALL4_MASK 0x0000FF00
#define CR_STALLH_STALL3_BIT 0
#define CR_STALLH_STALL3_MASK 0x000000FF
#define CR_BUN 0x310
#define CR_BUN_BUN3_BIT 24
#define CR_BUN_BUN3_MASK 0xFF000000
#define CR_BUN_BUN2_BIT 16
#define CR_BUN_BUN2_MASK 0x00FF0000
#define CR_BUN_BUN1_BIT 8                                                                            /* GENERATED */
#define CR_BUN_BUN1_MASK 0x0000FF00
#define CR_BUN_BUN0_BIT 0
#define CR_BUN_BUN0_MASK 0x000000FF
#define CR_BUNH 0x314
#define CR_BUNH_BUN6_BIT 24
#define CR_BUNH_BUN6_MASK 0xFF000000
#define CR_BUNH_BUN5_BIT 16
#define CR_BUNH_BUN5_MASK 0x00FF0000
#define CR_BUNH_BUN4_BIT 8
#define CR_BUNH_BUN4_MASK 0x0000FF00                                                                 /* GENERATED */
#define CR_BUNH_BUN3_BIT 0
#define CR_BUNH_BUN3_MASK 0x000000FF
#define CR_SYL 0x318
#define CR_SYL_SYL3_BIT 24
#define CR_SYL_SYL3_MASK 0xFF000000
#define CR_SYL_SYL2_BIT 16
#define CR_SYL_SYL2_MASK 0x00FF0000
#define CR_SYL_SYL1_BIT 8
#define CR_SYL_SYL1_MASK 0x0000FF00
#define CR_SYL_SYL0_BIT 0                                                                            /* GENERATED */
#define CR_SYL_SYL0_MASK 0x000000FF
#define CR_SYLH 0x31C
#define CR_SYLH_SYL6_BIT 24
#define CR_SYLH_SYL6_MASK 0xFF000000
#define CR_SYLH_SYL5_BIT 16
#define CR_SYLH_SYL5_MASK 0x00FF0000
#define CR_SYLH_SYL4_BIT 8
#define CR_SYLH_SYL4_MASK 0x0000FF00
#define CR_SYLH_SYL3_BIT 0
#define CR_SYLH_SYL3_MASK 0x000000FF                                                                 /* GENERATED */
#define CR_NOP 0x320
#define CR_NOP_NOP3_BIT 24
#define CR_NOP_NOP3_MASK 0xFF000000
#define CR_NOP_NOP2_BIT 16
#define CR_NOP_NOP2_MASK 0x00FF0000
#define CR_NOP_NOP1_BIT 8
#define CR_NOP_NOP1_MASK 0x0000FF00
#define CR_NOP_NOP0_BIT 0
#define CR_NOP_NOP0_MASK 0x000000FF
#define CR_NOPH 0x324                                                                                /* GENERATED */
#define CR_NOPH_NOP6_BIT 24
#define CR_NOPH_NOP6_MASK 0xFF000000
#define CR_NOPH_NOP5_BIT 16
#define CR_NOPH_NOP5_MASK 0x00FF0000
#define CR_NOPH_NOP4_BIT 8
#define CR_NOPH_NOP4_MASK 0x0000FF00
#define CR_NOPH_NOP3_BIT 0
#define CR_NOPH_NOP3_MASK 0x000000FF
#define CR_IACC 0x328
#define CR_IACC_IACC3_BIT 24                                                                         /* GENERATED */
#define CR_IACC_IACC3_MASK 0xFF000000
#define CR_IACC_IACC2_BIT 16
#define CR_IACC_IACC2_MASK 0x00FF0000
#define CR_IACC_IACC1_BIT 8
#define CR_IACC_IACC1_MASK 0x0000FF00
#define CR_IACC_IACC0_BIT 0
#define CR_IACC_IACC0_MASK 0x000000FF
#define CR_IACCH 0x32C
#define CR_IACCH_IACC6_BIT 24
#define CR_IACCH_IACC6_MASK 0xFF000000                                                               /* GENERATED */
#define CR_IACCH_IACC5_BIT 16
#define CR_IACCH_IACC5_MASK 0x00FF0000
#define CR_IACCH_IACC4_BIT 8
#define CR_IACCH_IACC4_MASK 0x0000FF00
#define CR_IACCH_IACC3_BIT 0
#define CR_IACCH_IACC3_MASK 0x000000FF
#define CR_IMISS 0x330
#define CR_IMISS_IMISS3_BIT 24
#define CR_IMISS_IMISS3_MASK 0xFF000000
#define CR_IMISS_IMISS2_BIT 16                                                                       /* GENERATED */
#define CR_IMISS_IMISS2_MASK 0x00FF0000
#define CR_IMISS_IMISS1_BIT 8
#define CR_IMISS_IMISS1_MASK 0x0000FF00
#define CR_IMISS_IMISS0_BIT 0
#define CR_IMISS_IMISS0_MASK 0x000000FF
#define CR_IMISSH 0x334
#define CR_IMISSH_IMISS6_BIT 24
#define CR_IMISSH_IMISS6_MASK 0xFF000000
#define CR_IMISSH_IMISS5_BIT 16
#define CR_IMISSH_IMISS5_MASK 0x00FF0000                                                             /* GENERATED */
#define CR_IMISSH_IMISS4_BIT 8
#define CR_IMISSH_IMISS4_MASK 0x0000FF00
#define CR_IMISSH_IMISS3_BIT 0
#define CR_IMISSH_IMISS3_MASK 0x000000FF
#define CR_DRACC 0x338
#define CR_DRACC_DRACC3_BIT 24
#define CR_DRACC_DRACC3_MASK 0xFF000000
#define CR_DRACC_DRACC2_BIT 16
#define CR_DRACC_DRACC2_MASK 0x00FF0000
#define CR_DRACC_DRACC1_BIT 8                                                                        /* GENERATED */
#define CR_DRACC_DRACC1_MASK 0x0000FF00
#define CR_DRACC_DRACC0_BIT 0
#define CR_DRACC_DRACC0_MASK 0x000000FF
#define CR_DRACCH 0x33C
#define CR_DRACCH_DRACC6_BIT 24
#define CR_DRACCH_DRACC6_MASK 0xFF000000
#define CR_DRACCH_DRACC5_BIT 16
#define CR_DRACCH_DRACC5_MASK 0x00FF0000
#define CR_DRACCH_DRACC4_BIT 8
#define CR_DRACCH_DRACC4_MASK 0x0000FF00                                                             /* GENERATED */
#define CR_DRACCH_DRACC3_BIT 0
#define CR_DRACCH_DRACC3_MASK 0x000000FF
#define CR_DRMISS 0x340
#define CR_DRMISS_DRMISS3_BIT 24
#define CR_DRMISS_DRMISS3_MASK 0xFF000000
#define CR_DRMISS_DRMISS2_BIT 16
#define CR_DRMISS_DRMISS2_MASK 0x00FF0000
#define CR_DRMISS_DRMISS1_BIT 8
#define CR_DRMISS_DRMISS1_MASK 0x0000FF00
#define CR_DRMISS_DRMISS0_BIT 0                                                                      /* GENERATED */
#define CR_DRMISS_DRMISS0_MASK 0x000000FF
#define CR_DRMISSH 0x344
#define CR_DRMISSH_DRMISS6_BIT 24
#define CR_DRMISSH_DRMISS6_MASK 0xFF000000
#define CR_DRMISSH_DRMISS5_BIT 16
#define CR_DRMISSH_DRMISS5_MASK 0x00FF0000
#define CR_DRMISSH_DRMISS4_BIT 8
#define CR_DRMISSH_DRMISS4_MASK 0x0000FF00
#define CR_DRMISSH_DRMISS3_BIT 0
#define CR_DRMISSH_DRMISS3_MASK 0x000000FF                                                           /* GENERATED */
#define CR_DWACC 0x348
#define CR_DWACC_DWACC3_BIT 24
#define CR_DWACC_DWACC3_MASK 0xFF000000
#define CR_DWACC_DWACC2_BIT 16
#define CR_DWACC_DWACC2_MASK 0x00FF0000
#define CR_DWACC_DWACC1_BIT 8
#define CR_DWACC_DWACC1_MASK 0x0000FF00
#define CR_DWACC_DWACC0_BIT 0
#define CR_DWACC_DWACC0_MASK 0x000000FF
#define CR_DWACCH 0x34C                                                                              /* GENERATED */
#define CR_DWACCH_DWACC6_BIT 24
#define CR_DWACCH_DWACC6_MASK 0xFF000000
#define CR_DWACCH_DWACC5_BIT 16
#define CR_DWACCH_DWACC5_MASK 0x00FF0000
#define CR_DWACCH_DWACC4_BIT 8
#define CR_DWACCH_DWACC4_MASK 0x0000FF00
#define CR_DWACCH_DWACC3_BIT 0
#define CR_DWACCH_DWACC3_MASK 0x000000FF
#define CR_DWMISS 0x350
#define CR_DWMISS_DWMISS3_BIT 24                                                                     /* GENERATED */
#define CR_DWMISS_DWMISS3_MASK 0xFF000000
#define CR_DWMISS_DWMISS2_BIT 16
#define CR_DWMISS_DWMISS2_MASK 0x00FF0000
#define CR_DWMISS_DWMISS1_BIT 8
#define CR_DWMISS_DWMISS1_MASK 0x0000FF00
#define CR_DWMISS_DWMISS0_BIT 0
#define CR_DWMISS_DWMISS0_MASK 0x000000FF
#define CR_DWMISSH 0x354
#define CR_DWMISSH_DWMISS6_BIT 24
#define CR_DWMISSH_DWMISS6_MASK 0xFF000000                                                           /* GENERATED */
#define CR_DWMISSH_DWMISS5_BIT 16
#define CR_DWMISSH_DWMISS5_MASK 0x00FF0000
#define CR_DWMISSH_DWMISS4_BIT 8
#define CR_DWMISSH_DWMISS4_MASK 0x0000FF00
#define CR_DWMISSH_DWMISS3_BIT 0
#define CR_DWMISSH_DWMISS3_MASK 0x000000FF
#define CR_DBYPASS 0x358
#define CR_DBYPASS_DBYPASS3_BIT 24
#define CR_DBYPASS_DBYPASS3_MASK 0xFF000000
#define CR_DBYPASS_DBYPASS2_BIT 16                                                                   /* GENERATED */
#define CR_DBYPASS_DBYPASS2_MASK 0x00FF0000
#define CR_DBYPASS_DBYPASS1_BIT 8
#define CR_DBYPASS_DBYPASS1_MASK 0x0000FF00
#define CR_DBYPASS_DBYPASS0_BIT 0
#define CR_DBYPASS_DBYPASS0_MASK 0x000000FF
#define CR_DBYPASSH 0x35C
#define CR_DBYPASSH_DBYPASS6_BIT 24
#define CR_DBYPASSH_DBYPASS6_MASK 0xFF000000
#define CR_DBYPASSH_DBYPASS5_BIT 16
#define CR_DBYPASSH_DBYPASS5_MASK 0x00FF0000                                                         /* GENERATED */
#define CR_DBYPASSH_DBYPASS4_BIT 8
#define CR_DBYPASSH_DBYPASS4_MASK 0x0000FF00
#define CR_DBYPASSH_DBYPASS3_BIT 0
#define CR_DBYPASSH_DBYPASS3_MASK 0x000000FF
#define CR_DWBUF 0x360
#define CR_DWBUF_DWBUF3_BIT 24
#define CR_DWBUF_DWBUF3_MASK 0xFF000000
#define CR_DWBUF_DWBUF2_BIT 16
#define CR_DWBUF_DWBUF2_MASK 0x00FF0000
#define CR_DWBUF_DWBUF1_BIT 8                                                                        /* GENERATED */
#define CR_DWBUF_DWBUF1_MASK 0x0000FF00
#define CR_DWBUF_DWBUF0_BIT 0
#define CR_DWBUF_DWBUF0_MASK 0x000000FF
#define CR_DWBUFH 0x364
#define CR_DWBUFH_DWBUF6_BIT 24
#define CR_DWBUFH_DWBUF6_MASK 0xFF000000
#define CR_DWBUFH_DWBUF5_BIT 16
#define CR_DWBUFH_DWBUF5_MASK 0x00FF0000
#define CR_DWBUFH_DWBUF4_BIT 8
#define CR_DWBUFH_DWBUF4_MASK 0x0000FF00                                                             /* GENERATED */
#define CR_DWBUFH_DWBUF3_BIT 0
#define CR_DWBUFH_DWBUF3_MASK 0x000000FF


//==============================================================================
// Pipeline definitions
//==============================================================================

#define S_LAST 6
#define S_BR 3                                                                                       /* GENERATED */
#define S_FW 3
#define S_SRD 3
#define S_ALU 3
#define S_MEM 4
#define S_SWB 5
#define S_STOP 2
#define S_WB 5
#define L_MUL 2
#define L_BRK 0
#define S_BTGT 2                                                                                     /* GENERATED */
#define L_ALU1 0
#define S_TRAP 2
#define L_ALU2 1
#define L_WB 1
#define L_ALU 1
#define S_BRK 4
#define S_PCP1 1
#define L_MUL2 1
#define L_MEM 1
#define S_LTRP 5                                                                                     /* GENERATED */
#define S_RD 2
#define L_RD 1
#define L_IF 1
#define S_FIRST 1
#define S_MUL 3
#define S_IF 1
#define S_LIMM 2
#define L_MUL1 1
#define L_IF_MEM 1
#define S_SFW 3                                                                                      /* GENERATED */


} /* namespace Core */

#endif
