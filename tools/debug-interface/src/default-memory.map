#
# This file specifies the memory map for accessing the core through the debug
# interface. Each line consists of three parts: the context mask, the
# definition name and the value. The mask and definition name are separated by
# a colon, the value is enclosed by curly braces. Anything after a hash is
# ignored.
#
# -----------------------------------------------------------------------------
# Context mask
# -----------------------------------------------------------------------------
# rvd allows you to switch between multiple rvex contexts easily using the
# select command. Only the definitions in this file which contain the selected
# context in the mask will be evaluated. This allows you to specify different
# definitions for different contexts.
# 
# The context mask must be one of the following:
#  - "all": matches any context.
#  - <from>..<to>: range, matching any context within from and to inclusive.
#  - <context>: matches only the specified context.
#
# rvd supports up to 32 contexts, numbered from 0 to 31.
#
# -----------------------------------------------------------------------------
# Definition name and value
# -----------------------------------------------------------------------------
# Definitions in rvd can be used anywhere in place of an integer literal. They
# work kind of like #define in the C preprocessor, in that they are expanded
# when they are used, so definition order in this file does not matter. When
# used in expressions though, they behave as if there were parenthesis around
# the expansion compared to the C preprocessor.
#
# The value for a definition should be a valid expression. To get more
# information on how expressions work in rvd, run "rvd help expressions".
#

# Specifies the number of contexts. This defines what rvd will do when you run
# a command for all contexts. Should be defined for all contexts, there's no
# point in defining a different number for different contexts (obviously).
all:_NUM_CONTEXTS           { 4 }

# Control register base address.
all:CREG                    { 0xF0000000 }

# Control register mnemonics. These should match the values in
# core_ctrlRegs_pkg.vhd.
all:GSR                     { CREG + 0x00 } # Global status register.
all:BUS_BANK                { CREG + 0x03 } # Debug bus bank selection.
all:BCRR                    { CREG + 0x04 } # Debug bus reconfiguration request.
all:CC                      { CREG + 0x08 } # Current configuration.
all:AFF                     { CREG + 0x0C } # Cache affinity.
all:CNT                     { CREG + 0x10 } # Cycle counter.
all:CCR                     { CREG + 0x20 } # Context control register.
all:TC                      { CREG + 0x20 } # Trap cause (byte).
all:BR                      { CREG + 0x21 } # Branch registers (byte).
all:SCCR                    { CREG + 0x24 } # Saved context control register.
all:LR                      { CREG + 0x28 } # Link register.
all:PC                      { CREG + 0x2C } # PC register.
all:TH                      { CREG + 0x30 } # Trap handler.
all:PH                      { CREG + 0x34 } # Panic handler.
all:TP                      { CREG + 0x38 } # Trap point.
all:TA                      { CREG + 0x3C } # Trap argument.
all:BRK0                    { CREG + 0x40 } # Breakpoint 0.
all:BRK1                    { CREG + 0x44 } # Breakpoint 1.
all:BRK2                    { CREG + 0x48 } # Breakpoint 2.
all:BRK3                    { CREG + 0x4C } # Breakpoint 3.
all:DCR                     { CREG + 0x50 } # Debug control register.
all:DCRF                    { CREG + 0x50 } # Debug control flags (byte).
all:DCRC                    { CREG + 0x51 } # Break cause (byte).
all:DCRB                    { CREG + 0x52 } # Breakpoint configuration (half).
all:CRR                     { CREG + 0x54 } # Context reconfiguration request.
all:SCRP                    { CREG + 0x58 } # Scratch-pad register.
all:C_CYC                   { CREG + 0x5C } # Non-idle cycle counter.
all:C_STALL                 { CREG + 0x60 } # Non-idle stall counter.
all:C_BUN                   { CREG + 0x64 } # Committed bundle counter.
all:C_SYL                   { CREG + 0x68 } # Committed syllable counter.
all:C_NOP                   { CREG + 0x6C } # Committed NOP counter.

# General purpose register bank addresses. LOW defines the base address
# for r0.0 through r0.31, HIGH defines it for r0.32 through r0.63. These are
# guaranteed to always be evaluated once before accessing registers in the
# low or high bank, in order to make bank selection write commands work
# properly.
all:_GPREG_LOW             { SET_BANK;      CREG + 0x80 }
all:_GPREG_HIGH            { SET_BANK_HIGH; CREG + 0x80 }

# Same as for the general purpose registers above, these define where the
# debugging interface can find some special registers.
all:_BRREG                 { SET_BANK;      BR }   # Branch register file
all:_LINKREG               { SET_BANK;      LR }   # Link register.
all:_PC                    { SET_BANK;      PC }   # PC register.
all:_BRKPT                 { SET_BANK;      BRK0 } # Breakpoint registers.

# These define how to set the bank bits in the control registers in order to
# access the selected context.
all:SET_BANK               { write(BUS_BANK, 0hh+_CUR_CONTEXT<<1) }
all:SET_BANK_HIGH          { write(BUS_BANK, 0hh+(_CUR_CONTEXT<<1)+1) }

# SET_BANK could also be defined like this, as an example of using the masks.
# 0:SET_BANK               { write(BUS_BANK, 0hh) }
# 1:SET_BANK               { write(BUS_BANK, 2hh) }
# 2:SET_BANK               { write(BUS_BANK, 4hh) }
# 3:SET_BANK               { write(BUS_BANK, 8hh) }

all:PRINT_STATE {
  printf("Dumping state for context %d...\n\n", _CUR_CONTEXT);
  
  SET_BANK;
  
  # Special registers
  printf("\033[1mSpecial regs:\033[0m\n");
  printf("   PC = 0x%08X\n", readWord(PC));
  printf(" l0.0 = 0x%08X\n\n", readWord(LR));
  
  # General purpose registers
  printf("\033[1mGeneral purpose regs:\033[0m\n");
  set(reg, 0);
  while (reg < 32, (
    set(val, readWord(CREG + 0x80 + (reg*4)));
    if (val, (
      printf("\033[1;32m");
    ));
    printf("r0.%.2d = 0x%08X  \033[0m", reg, val);
    set(reg, reg + 1);
    if (!(reg & 3), (
      printf("\n");
    ));
  ));
  SET_BANK_HIGH;
  while (reg < 64, (
    set(val, readWord(CREG + (reg*4)));
    if (val, (
      printf("\033[1;32m");
    ));
    printf("r0.%.2d = 0x%08X  \033[0m", reg, val);
    set(reg, reg + 1);
    if (!(reg & 3), (
      printf("\n");
    ));
  ));
  SET_BANK;
  printf("\n");
  
  # Branch registers
  printf("\033[1mBranch regs:\033[0m\n");
  set(val, readByte(BR));
  set(reg, 0);
  while (reg < 8, (
    if (val & (1 << reg), (
      printf("\033[1;32m b0.%d = true        \033[0m", reg);
    ), (
      printf(" b0.%d = false       \033[0m", reg);
    ));
    
    set(reg, reg + 1);
    if (!(reg & 3), (
      printf("\n");
    ));
  ));
  printf("\n");
  
  # Performance counters
  printf("\033[1mPerformance counters:\033[0m\n");
  printf("            Active cycles = %u\n", readWord(C_CYC));
  printf("           Stalled cycles = %u\n", readWord(C_STALL));
  printf("   Committed bundle count = %u\n", readWord(C_BUN));
  printf(" Committed syllable count = %u\n", readWord(C_SYL));
  printf("      Committed NOP count = %u\n", readWord(C_NOP));
  printf("\n");
  
}

# Waits for completion of a program and then prints statistics. Should only be
# called using a single context.
all:WAIT_COMPLETE {
  
  printf("Waiting for program to terminate");
  
  # In case _NUM_CONTEXTS expands to something complicated, we'll want to
  # preload it here.
  set(count, _NUM_CONTEXTS);
  
  # Initialize prev_cycle things.
  set(prev_cyc0, 0);
  set(prev_cyc1, 0);
  set(prev_cyc2, 0);
  set(prev_cyc3, 0);
  set(prev_cyc4, 0);
  set(prev_cyc5, 0);
  set(prev_cyc6, 0);
  set(prev_cyc7, 0);
  
  # Wait for completion.
  set(diffs, 1);
  while (diffs, (
    
    # Load the current cycle counter values.
    if (count > 0, (set(_CUR_CONTEXT, 0); SET_BANK; set(cyc0, readWord(C_CYC))), set(cyc0, 0));
    if (count > 1, (set(_CUR_CONTEXT, 1); SET_BANK; set(cyc1, readWord(C_CYC))), set(cyc1, 0));
    if (count > 2, (set(_CUR_CONTEXT, 2); SET_BANK; set(cyc2, readWord(C_CYC))), set(cyc2, 0));
    if (count > 3, (set(_CUR_CONTEXT, 3); SET_BANK; set(cyc3, readWord(C_CYC))), set(cyc3, 0));
    if (count > 4, (set(_CUR_CONTEXT, 4); SET_BANK; set(cyc4, readWord(C_CYC))), set(cyc4, 0));
    if (count > 5, (set(_CUR_CONTEXT, 5); SET_BANK; set(cyc5, readWord(C_CYC))), set(cyc5, 0));
    if (count > 6, (set(_CUR_CONTEXT, 6); SET_BANK; set(cyc6, readWord(C_CYC))), set(cyc6, 0));
    if (count > 7, (set(_CUR_CONTEXT, 7); SET_BANK; set(cyc7, readWord(C_CYC))), set(cyc7, 0));
    
    # See if the cycle counter values changed since the last time we read them.
    set(diffs, 
      (cyc0 != prev_cyc0) ||
      (cyc1 != prev_cyc1) ||
      (cyc2 != prev_cyc2) ||
      (cyc3 != prev_cyc3) ||
      (cyc4 != prev_cyc4) ||
      (cyc5 != prev_cyc5) ||
      (cyc6 != prev_cyc6) ||
      (cyc7 != prev_cyc7)
    );
    
    # Store the previous values.
    set(prev_cyc0, cyc0);
    set(prev_cyc1, cyc1);
    set(prev_cyc2, cyc2);
    set(prev_cyc3, cyc3);
    set(prev_cyc4, cyc4);
    set(prev_cyc5, cyc5);
    set(prev_cyc6, cyc6);
    set(prev_cyc7, cyc7);
    
    # Delay for 500 milliseconds between checks.
    delay_ms(500);
    
    printf(".");
    
  ));
  
  printf(" done.\n\n");
  
  # Do a performance counter dump for each context.
  set(cur, 0);
  set(total_cyc, 0);
  while (cur < count, (
    
    set(_CUR_CONTEXT, cur);
    SET_BANK;
    printf("\033[1mPerformance counters for context %d:\033[0m\n", cur);
    set(cyc, readWord(C_CYC));
    set(total_cyc, total_cyc + cyc);
    printf("            Active cycles = %u\n", cyc);
    printf("           Stalled cycles = %u\n", readWord(C_STALL));
    printf("   Committed bundle count = %u\n", readWord(C_BUN));
    printf(" Committed syllable count = %u\n", readWord(C_SYL));
    printf("      Committed NOP count = %u\n", readWord(C_NOP));
    printf("\n");
    
    set(cur, cur + 1);
  ));
  printf(" Sum of all active cycles = \033[1m%u\033[0m\n", total_cyc);
  printf(" (this is the total cycle count if contexts are never active at the same time)\n\n");
  
}



# This is evaluated before any rvd command is called.
all:_ALWAYS {
  SET_BANK;
}

# This is evaluated when "rvd break" is called.
all:_BREAK {
  SET_BANK;
  write(DCRF, 0x09hh);
  PRINT_STATE;
}

# This is evaluated when "rvd step" is called.
all:_STEP {
  SET_BANK;
  write(DCRF, 0x0Ahh);
  PRINT_STATE;
}
  
# This is evaluated when "rvd resume" is called.
all:_RESUME {
  SET_BANK;
  write(DCRF, 0x0Chh);
}

# This is evaluated when "rvd release" is called.
all:_RELEASE {
  SET_BANK;
  write(DCRF, 0x10hh);
}
  
# This is evaluated when "rvd reset" is called.
all:_RESET {
  SET_BANK;
  write(DCRF, 0x09hh); # break
  set(reg, 0);
  while (reg < 32, (
    writeWord(CREG + 0x80 + (reg*4), 0);
    set(reg, reg + 1);
  ));
  SET_BANK_HIGH;
  while (reg < 64, (
    writeWord(CREG + (reg*4), 0);
    set(reg, reg + 1);
  ));
  SET_BANK;
  write(DCRF, 0x80hh); # reset
}
  
# This is evaluated when "rvd reset break" is called.
all:_RESET_BREAK {
  SET_BANK;
  write(DCRF, 0x89hh);
}
  
# This is evaluated when "rvd state" is called.
all:_STATE {
  SET_BANK;
  PRINT_STATE;
}

