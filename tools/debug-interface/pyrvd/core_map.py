## This file is generated by the scripts in /config. ##

from collections import OrderedDict                                                                  ## GENERATED ##

def raise_(ex):
    raise ex

class Context:

    def halt(self):
        self._rvd.writeInt(self._DCR, 1, 0x09)
        return
                                                                                                     ## GENERATED ##
    def reset(self):
        self.halt()
        #set general regs to 0
        for reg in range(64):
            self.CREG_GPREG[reg] = 0
        #reset
        self._rvd.writeInt(self._DCR, 1, 0x80)

    def resume(self):
        self._rvd.writeInt(self._DCR, 1, 0x0c)                                                       ## GENERATED ##

    def step(self):
        self._rvd.writeInt(self._DCR, 1, 0x0a)

    def get_perf_counter(self, addr):
        d = self._rvd.readIntMultiple(addr, 4, 2)
        if len(d) != 2:
            raise RuntimeError('read access failed')
        lo = d[0]
        hi = d[1]                                                                                    ## GENERATED ##
        res = 0
        if self._core.FIELD_EXT0_P > 4:
            if (lo >> 24) != (hi & 0xff):
                res = hi << 24
            else:
                res = (hi << 24) | lo
        else:
            res = lo
        return res
                                                                                                     ## GENERATED ##
    def get_perf_counters(self):
        """Return a dict mapping counter names to values.
        """
        names = ['CYC', 'CYCH', 'STALL', 'STALLH', 'BUN', 'BUNH', 'SYL', 'SYLH',
                 'NOP', 'NOPH', 'IACC', 'IACCH', 'IMISS', 'IMISSH', 'DRACC',
                 'DRACCH', 'DRMISS', 'DRMISSH', 'DWACC', 'DWACCH', 'DWMISS',
                 'DWMISSH', 'DBYPASS', 'DBYPASSH', 'DWBUF', 'DWBUFH']
        result = OrderedDict()
        for name in names:
            result[name] = self.get_perf_counter(getattr(self, '_{}'.format(name)))                  ## GENERATED ##
        return result

    class GPREGS:

        def __init__(self, c):
            self._c = c

        def __getitem__(self, index):
            return self._c._rvd.readInt(self._c._CREG_GPREG + index*4, 4)
                                                                                                     ## GENERATED ##
        def __setitem__(self, index, value):
            self._c._rvd.writeInt(self._c._CREG_GPREG + index*4, 4, value)

    def __init__(self, rvd, core, base_address, index):
        self._rvd = rvd
        self._core = core
        self._CREG = base_address
        self._CUR_CONTEXT = index

        self._CREG_GPREG = self._CREG + 0x100 + (self._CUR_CONTEXT * 0x400)                          ## GENERATED ##
        self.CREG_GPREG = self.GPREGS(self)

        self._CREG_CTXT = self._CREG + 0x200 + (self._CUR_CONTEXT * 0x400)
        self._CCR = self._CREG_CTXT + 0x000
        self._TC = self._CREG_CTXT + 0x000
        self._BR = self._CREG_CTXT + 0x001
        self._SCCR = self._CREG_CTXT + 0x004
        self._CID = self._CREG_CTXT + 0x004
        self._LR = self._CREG_CTXT + 0x008
        self._PC = self._CREG_CTXT + 0x00C                                                           ## GENERATED ##
        self._TH = self._CREG_CTXT + 0x010
        self._PH = self._CREG_CTXT + 0x014
        self._TP = self._CREG_CTXT + 0x018
        self._TA = self._CREG_CTXT + 0x01C
        self._BR0 = self._CREG_CTXT + 0x020
        self._BR1 = self._CREG_CTXT + 0x024
        self._BR2 = self._CREG_CTXT + 0x028
        self._BR3 = self._CREG_CTXT + 0x02C
        self._DCR = self._CREG_CTXT + 0x030
        self._DCRC = self._CREG_CTXT + 0x031                                                         ## GENERATED ##
        self._DCR2 = self._CREG_CTXT + 0x034
        self._RET = self._CREG_CTXT + 0x034
        self._CRR = self._CREG_CTXT + 0x040
        self._WCFG = self._CREG_CTXT + 0x048
        self._SAWC = self._CREG_CTXT + 0x04C
        self._SCRP1 = self._CREG_CTXT + 0x050
        self._SCRP2 = self._CREG_CTXT + 0x054
        self._SCRP3 = self._CREG_CTXT + 0x058
        self._SCRP4 = self._CREG_CTXT + 0x05C
        self._RSC = self._CREG_CTXT + 0x060                                                          ## GENERATED ##
        self._CSC = self._CREG_CTXT + 0x064
        self._RSC1 = self._CREG_CTXT + 0x068
        self._RSC2 = self._CREG_CTXT + 0x070
        self._RSC3 = self._CREG_CTXT + 0x078
        self._RSC4 = self._CREG_CTXT + 0x080
        self._RSC5 = self._CREG_CTXT + 0x088
        self._RSC6 = self._CREG_CTXT + 0x090
        self._RSC7 = self._CREG_CTXT + 0x098
        self._CSC1 = self._CREG_CTXT + 0x06C
        self._CSC2 = self._CREG_CTXT + 0x074                                                         ## GENERATED ##
        self._CSC3 = self._CREG_CTXT + 0x07C
        self._CSC4 = self._CREG_CTXT + 0x084
        self._CSC5 = self._CREG_CTXT + 0x08C
        self._CSC6 = self._CREG_CTXT + 0x094
        self._CSC7 = self._CREG_CTXT + 0x09C
        self._CYC = self._CREG_CTXT + 0x100
        self._CYCH = self._CREG_CTXT + 0x104
        self._STALL = self._CREG_CTXT + 0x108
        self._STALLH = self._CREG_CTXT + 0x10C
        self._BUN = self._CREG_CTXT + 0x110                                                          ## GENERATED ##
        self._BUNH = self._CREG_CTXT + 0x114
        self._SYL = self._CREG_CTXT + 0x118
        self._SYLH = self._CREG_CTXT + 0x11C
        self._NOP = self._CREG_CTXT + 0x120
        self._NOPH = self._CREG_CTXT + 0x124
        self._IACC = self._CREG_CTXT + 0x128
        self._IACCH = self._CREG_CTXT + 0x12C
        self._IMISS = self._CREG_CTXT + 0x130
        self._IMISSH = self._CREG_CTXT + 0x134
        self._DRACC = self._CREG_CTXT + 0x138                                                        ## GENERATED ##
        self._DRACCH = self._CREG_CTXT + 0x13C
        self._DRMISS = self._CREG_CTXT + 0x140
        self._DRMISSH = self._CREG_CTXT + 0x144
        self._DWACC = self._CREG_CTXT + 0x148
        self._DWACCH = self._CREG_CTXT + 0x14C
        self._DWMISS = self._CREG_CTXT + 0x150
        self._DWMISSH = self._CREG_CTXT + 0x154
        self._DBYPASS = self._CREG_CTXT + 0x158
        self._DBYPASSH = self._CREG_CTXT + 0x15C
        self._DWBUF = self._CREG_CTXT + 0x160                                                        ## GENERATED ##
        self._DWBUFH = self._CREG_CTXT + 0x164
        return


    CCR = property(lambda s: s._rvd.readInt(s._CCR, 4),
        lambda s, v: s._rvd.writeInt(s._CCR, 4, v))
    FIELD_CCR_CAUSE = property(
        lambda self: (self.CCR & 0xFF000000) >> 24,
        lambda s, val: setattr(s, 'CCR', ((val << 24) & 0xFF000000) |
            (self.CCR & ~0xFF000000)))                                                               ## GENERATED ##
    TC = property(lambda s: s._rvd.readInt(s._TC, 1),
        lambda s, v: s._rvd.writeInt(s._TC, 1, v))
    FIELD_CCR_BRANCH = property(
        lambda self: (self.CCR & 0x00FF0000) >> 16,
        lambda s, val: setattr(s, 'CCR', ((val << 16) & 0x00FF0000) |
            (self.CCR & ~0x00FF0000)))
    BR = property(lambda s: s._rvd.readInt(s._BR, 1),
        lambda s, v: s._rvd.writeInt(s._BR, 1, v))
    FIELD_CCR_K = property(
        lambda self: (self.CCR & 0x00000300) >> 8,                                                   ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CCR_C = property(
        lambda self: (self.CCR & 0x000000C0) >> 6,
        lambda s, val: setattr(s, 'CCR', ((val << 6) & 0x000000C0) |
            (self.CCR & ~0x000000C0)))
    FIELD_CCR_B = property(
        lambda self: (self.CCR & 0x00000030) >> 4,
        lambda s, val: setattr(s, 'CCR', ((val << 4) & 0x00000030) |
            (self.CCR & ~0x00000030)))
    FIELD_CCR_R = property(                                                                          ## GENERATED ##
        lambda self: (self.CCR & 0x0000000C) >> 2,
        lambda s, val: setattr(s, 'CCR', ((val << 2) & 0x0000000C) |
            (self.CCR & ~0x0000000C)))
    FIELD_CCR_I = property(
        lambda self: (self.CCR & 0x00000003) >> 0,
        lambda s, val: setattr(s, 'CCR', ((val << 0) & 0x00000003) |
            (self.CCR & ~0x00000003)))
    SCCR = property(lambda s: s._rvd.readInt(s._SCCR, 4),
        lambda s, v: s._rvd.writeInt(s._SCCR, 4, v))
    FIELD_SCCR_ID = property(                                                                        ## GENERATED ##
        lambda self: (self.SCCR & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CID = property(lambda s: s._rvd.readInt(s._CID, 1),
        lambda s, v: raise_(RuntimeError("CID is not writable")))
    FIELD_SCCR_K = property(
        lambda self: (self.SCCR & 0x00000300) >> 8,
        lambda s, val: setattr(s, 'SCCR', ((val << 8) & 0x00000300) |
            (self.SCCR & ~0x00000300)))
    FIELD_SCCR_C = property(
        lambda self: (self.SCCR & 0x000000C0) >> 6,                                                  ## GENERATED ##
        lambda s, val: setattr(s, 'SCCR', ((val << 6) & 0x000000C0) |
            (self.SCCR & ~0x000000C0)))
    FIELD_SCCR_B = property(
        lambda self: (self.SCCR & 0x00000030) >> 4,
        lambda s, val: setattr(s, 'SCCR', ((val << 4) & 0x00000030) |
            (self.SCCR & ~0x00000030)))
    FIELD_SCCR_R = property(
        lambda self: (self.SCCR & 0x0000000C) >> 2,
        lambda s, val: setattr(s, 'SCCR', ((val << 2) & 0x0000000C) |
            (self.SCCR & ~0x0000000C)))                                                              ## GENERATED ##
    FIELD_SCCR_I = property(
        lambda self: (self.SCCR & 0x00000003) >> 0,
        lambda s, val: setattr(s, 'SCCR', ((val << 0) & 0x00000003) |
            (self.SCCR & ~0x00000003)))
    LR = property(lambda s: s._rvd.readInt(s._LR, 4),
        lambda s, v: s._rvd.writeInt(s._LR, 4, v))
    FIELD_LR_LR = property(
        lambda self: (self.LR & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'LR', ((val << 0) & 0xFFFFFFFF) |
            (self.LR & ~0xFFFFFFFF)))                                                                ## GENERATED ##
    PC = property(lambda s: s._rvd.readInt(s._PC, 4),
        lambda s, v: s._rvd.writeInt(s._PC, 4, v))
    FIELD_PC_PC = property(
        lambda self: (self.PC & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'PC', ((val << 0) & 0xFFFFFFFF) |
            (self.PC & ~0xFFFFFFFF)))
    TH = property(lambda s: s._rvd.readInt(s._TH, 4),
        lambda s, v: s._rvd.writeInt(s._TH, 4, v))
    FIELD_TH_TH = property(
        lambda self: (self.TH & 0xFFFFFFFF) >> 0,                                                    ## GENERATED ##
        lambda s, val: setattr(s, 'TH', ((val << 0) & 0xFFFFFFFF) |
            (self.TH & ~0xFFFFFFFF)))
    PH = property(lambda s: s._rvd.readInt(s._PH, 4),
        lambda s, v: s._rvd.writeInt(s._PH, 4, v))
    FIELD_PH_PH = property(
        lambda self: (self.PH & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'PH', ((val << 0) & 0xFFFFFFFF) |
            (self.PH & ~0xFFFFFFFF)))
    TP = property(lambda s: s._rvd.readInt(s._TP, 4),
        lambda s, v: s._rvd.writeInt(s._TP, 4, v))                                                   ## GENERATED ##
    FIELD_TP_TP = property(
        lambda self: (self.TP & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'TP', ((val << 0) & 0xFFFFFFFF) |
            (self.TP & ~0xFFFFFFFF)))
    TA = property(lambda s: s._rvd.readInt(s._TA, 4),
        lambda s, v: s._rvd.writeInt(s._TA, 4, v))
    FIELD_TA_TA = property(
        lambda self: (self.TA & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'TA', ((val << 0) & 0xFFFFFFFF) |
            (self.TA & ~0xFFFFFFFF)))                                                                ## GENERATED ##
    BR0 = property(lambda s: s._rvd.readInt(s._BR0, 4),
        lambda s, v: s._rvd.writeInt(s._BR0, 4, v))
    FIELD_BR0_BR0 = property(
        lambda self: (self.BR0 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'BR0', ((val << 0) & 0xFFFFFFFF) |
            (self.BR0 & ~0xFFFFFFFF)))
    BR1 = property(lambda s: s._rvd.readInt(s._BR1, 4),
        lambda s, v: s._rvd.writeInt(s._BR1, 4, v))
    FIELD_BR1_BR1 = property(
        lambda self: (self.BR1 & 0xFFFFFFFF) >> 0,                                                   ## GENERATED ##
        lambda s, val: setattr(s, 'BR1', ((val << 0) & 0xFFFFFFFF) |
            (self.BR1 & ~0xFFFFFFFF)))
    BR2 = property(lambda s: s._rvd.readInt(s._BR2, 4),
        lambda s, v: s._rvd.writeInt(s._BR2, 4, v))
    FIELD_BR2_BR2 = property(
        lambda self: (self.BR2 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'BR2', ((val << 0) & 0xFFFFFFFF) |
            (self.BR2 & ~0xFFFFFFFF)))
    BR3 = property(lambda s: s._rvd.readInt(s._BR3, 4),
        lambda s, v: s._rvd.writeInt(s._BR3, 4, v))                                                  ## GENERATED ##
    FIELD_BR3_BR3 = property(
        lambda self: (self.BR3 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'BR3', ((val << 0) & 0xFFFFFFFF) |
            (self.BR3 & ~0xFFFFFFFF)))
    DCR = property(lambda s: s._rvd.readInt(s._DCR, 4),
        lambda s, v: s._rvd.writeInt(s._DCR, 4, v))
    FIELD_DCR_D = property(
        lambda self: (self.DCR & 0x80000000) >> 31,
        lambda s, val: setattr(s, 'DCR', ((val << 31) & 0x80000000) |
            (self.DCR & ~0x80000000)))                                                               ## GENERATED ##
    FIELD_DCR_J = property(
        lambda self: (self.DCR & 0x40000000) >> 30,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DCR_I = property(
        lambda self: (self.DCR & 0x10000000) >> 28,
        lambda s, val: setattr(s, 'DCR', ((val << 28) & 0x10000000) |
            (self.DCR & ~0x10000000)))
    FIELD_DCR_E = property(
        lambda self: (self.DCR & 0x08000000) >> 27,
        lambda s, val: setattr(s, 'DCR', ((val << 27) & 0x08000000) |                                ## GENERATED ##
            (self.DCR & ~0x08000000)))
    FIELD_DCR_R = property(
        lambda self: (self.DCR & 0x04000000) >> 26,
        lambda s, val: setattr(s, 'DCR', ((val << 26) & 0x04000000) |
            (self.DCR & ~0x04000000)))
    FIELD_DCR_S = property(
        lambda self: (self.DCR & 0x02000000) >> 25,
        lambda s, val: setattr(s, 'DCR', ((val << 25) & 0x02000000) |
            (self.DCR & ~0x02000000)))
    FIELD_DCR_B = property(                                                                          ## GENERATED ##
        lambda self: (self.DCR & 0x01000000) >> 24,
        lambda s, val: setattr(s, 'DCR', ((val << 24) & 0x01000000) |
            (self.DCR & ~0x01000000)))
    FIELD_DCR_CAUSE = property(
        lambda self: (self.DCR & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    DCRC = property(lambda s: s._rvd.readInt(s._DCRC, 1),
        lambda s, v: raise_(RuntimeError("DCRC is not writable")))
    FIELD_DCR_BR3 = property(
        lambda self: (self.DCR & 0x00003000) >> 12,                                                  ## GENERATED ##
        lambda s, val: setattr(s, 'DCR', ((val << 12) & 0x00003000) |
            (self.DCR & ~0x00003000)))
    FIELD_DCR_BR2 = property(
        lambda self: (self.DCR & 0x00000300) >> 8,
        lambda s, val: setattr(s, 'DCR', ((val << 8) & 0x00000300) |
            (self.DCR & ~0x00000300)))
    FIELD_DCR_BR1 = property(
        lambda self: (self.DCR & 0x00000030) >> 4,
        lambda s, val: setattr(s, 'DCR', ((val << 4) & 0x00000030) |
            (self.DCR & ~0x00000030)))                                                               ## GENERATED ##
    FIELD_DCR_BR0 = property(
        lambda self: (self.DCR & 0x00000003) >> 0,
        lambda s, val: setattr(s, 'DCR', ((val << 0) & 0x00000003) |
            (self.DCR & ~0x00000003)))
    DCR2 = property(lambda s: s._rvd.readInt(s._DCR2, 4),
        lambda s, v: s._rvd.writeInt(s._DCR2, 4, v))
    FIELD_DCR2_RESULT = property(
        lambda self: (self.DCR2 & 0xFF000000) >> 24,
        lambda s, val: setattr(s, 'DCR2', ((val << 24) & 0xFF000000) |
            (self.DCR2 & ~0xFF000000)))                                                              ## GENERATED ##
    RET = property(lambda s: s._rvd.readInt(s._RET, 1),
        lambda s, v: s._rvd.writeInt(s._RET, 1, v))
    FIELD_DCR2_TRCAP = property(
        lambda self: (self.DCR2 & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DCR2_T = property(
        lambda self: (self.DCR2 & 0x00000080) >> 7,
        lambda s, val: setattr(s, 'DCR2', ((val << 7) & 0x00000080) |
            (self.DCR2 & ~0x00000080)))
    FIELD_DCR2_M = property(                                                                         ## GENERATED ##
        lambda self: (self.DCR2 & 0x00000040) >> 6,
        lambda s, val: setattr(s, 'DCR2', ((val << 6) & 0x00000040) |
            (self.DCR2 & ~0x00000040)))
    FIELD_DCR2_R = property(
        lambda self: (self.DCR2 & 0x00000020) >> 5,
        lambda s, val: setattr(s, 'DCR2', ((val << 5) & 0x00000020) |
            (self.DCR2 & ~0x00000020)))
    FIELD_DCR2_C = property(
        lambda self: (self.DCR2 & 0x00000010) >> 4,
        lambda s, val: setattr(s, 'DCR2', ((val << 4) & 0x00000010) |                                ## GENERATED ##
            (self.DCR2 & ~0x00000010)))
    FIELD_DCR2_I = property(
        lambda self: (self.DCR2 & 0x00000008) >> 3,
        lambda s, val: setattr(s, 'DCR2', ((val << 3) & 0x00000008) |
            (self.DCR2 & ~0x00000008)))
    FIELD_DCR2_E = property(
        lambda self: (self.DCR2 & 0x00000001) >> 0,
        lambda s, val: setattr(s, 'DCR2', ((val << 0) & 0x00000001) |
            (self.DCR2 & ~0x00000001)))
    CRR = property(lambda s: s._rvd.readInt(s._CRR, 4),                                              ## GENERATED ##
        lambda s, v: raise_(RuntimeError("CRR is not writable")))
    FIELD_CRR_CRR = property(
        lambda self: (self.CRR & 0xFFFFFFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    WCFG = property(lambda s: s._rvd.readInt(s._WCFG, 4),
        lambda s, v: raise_(RuntimeError("WCFG is not writable")))
    FIELD_WCFG_WCFG = property(
        lambda self: (self.WCFG & 0xFFFFFFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SAWC = property(lambda s: s._rvd.readInt(s._SAWC, 4),                                            ## GENERATED ##
        lambda s, v: s._rvd.writeInt(s._SAWC, 4, v))
    FIELD_SAWC_RUN = property(
        lambda self: (self.SAWC & 0x000000FE) >> 1,
        lambda s, val: setattr(s, 'SAWC', ((val << 1) & 0x000000FE) |
            (self.SAWC & ~0x000000FE)))
    FIELD_SAWC_S = property(
        lambda self: (self.SAWC & 0x00000001) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SCRP1 = property(lambda s: s._rvd.readInt(s._SCRP1, 4),
        lambda s, v: s._rvd.writeInt(s._SCRP1, 4, v))                                                ## GENERATED ##
    FIELD_SCRP1_SCRP1 = property(
        lambda self: (self.SCRP1 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'SCRP1', ((val << 0) & 0xFFFFFFFF) |
            (self.SCRP1 & ~0xFFFFFFFF)))
    SCRP2 = property(lambda s: s._rvd.readInt(s._SCRP2, 4),
        lambda s, v: s._rvd.writeInt(s._SCRP2, 4, v))
    FIELD_SCRP2_SCRP2 = property(
        lambda self: (self.SCRP2 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'SCRP2', ((val << 0) & 0xFFFFFFFF) |
            (self.SCRP2 & ~0xFFFFFFFF)))                                                             ## GENERATED ##
    SCRP3 = property(lambda s: s._rvd.readInt(s._SCRP3, 4),
        lambda s, v: s._rvd.writeInt(s._SCRP3, 4, v))
    FIELD_SCRP3_SCRP3 = property(
        lambda self: (self.SCRP3 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'SCRP3', ((val << 0) & 0xFFFFFFFF) |
            (self.SCRP3 & ~0xFFFFFFFF)))
    SCRP4 = property(lambda s: s._rvd.readInt(s._SCRP4, 4),
        lambda s, v: s._rvd.writeInt(s._SCRP4, 4, v))
    FIELD_SCRP4_SCRP4 = property(
        lambda self: (self.SCRP4 & 0xFFFFFFFF) >> 0,                                                 ## GENERATED ##
        lambda s, val: setattr(s, 'SCRP4', ((val << 0) & 0xFFFFFFFF) |
            (self.SCRP4 & ~0xFFFFFFFF)))
    RSC = property(lambda s: s._rvd.readInt(s._RSC, 4),
        lambda s, v: s._rvd.writeInt(s._RSC, 4, v))
    FIELD_RSC_RSC = property(
        lambda self: (self.RSC & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'RSC', ((val << 0) & 0xFFFFFFFF) |
            (self.RSC & ~0xFFFFFFFF)))
    CSC = property(lambda s: s._rvd.readInt(s._CSC, 4),
        lambda s, v: s._rvd.writeInt(s._CSC, 4, v))                                                  ## GENERATED ##
    FIELD_CSC_CSC = property(
        lambda self: (self.CSC & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'CSC', ((val << 0) & 0xFFFFFFFF) |
            (self.CSC & ~0xFFFFFFFF)))
    RSC1 = property(lambda s: s._rvd.readInt(s._RSC1, 4),
        lambda s, v: s._rvd.writeInt(s._RSC1, 4, v))
    FIELD_RSC1_RSC1 = property(
        lambda self: (self.RSC1 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'RSC1', ((val << 0) & 0xFFFFFFFF) |
            (self.RSC1 & ~0xFFFFFFFF)))                                                              ## GENERATED ##
    RSC2 = property(lambda s: s._rvd.readInt(s._RSC2, 4),
        lambda s, v: s._rvd.writeInt(s._RSC2, 4, v))
    FIELD_RSC2_RSC2 = property(
        lambda self: (self.RSC2 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'RSC2', ((val << 0) & 0xFFFFFFFF) |
            (self.RSC2 & ~0xFFFFFFFF)))
    RSC3 = property(lambda s: s._rvd.readInt(s._RSC3, 4),
        lambda s, v: s._rvd.writeInt(s._RSC3, 4, v))
    FIELD_RSC3_RSC3 = property(
        lambda self: (self.RSC3 & 0xFFFFFFFF) >> 0,                                                  ## GENERATED ##
        lambda s, val: setattr(s, 'RSC3', ((val << 0) & 0xFFFFFFFF) |
            (self.RSC3 & ~0xFFFFFFFF)))
    RSC4 = property(lambda s: s._rvd.readInt(s._RSC4, 4),
        lambda s, v: s._rvd.writeInt(s._RSC4, 4, v))
    FIELD_RSC4_RSC4 = property(
        lambda self: (self.RSC4 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'RSC4', ((val << 0) & 0xFFFFFFFF) |
            (self.RSC4 & ~0xFFFFFFFF)))
    RSC5 = property(lambda s: s._rvd.readInt(s._RSC5, 4),
        lambda s, v: s._rvd.writeInt(s._RSC5, 4, v))                                                 ## GENERATED ##
    FIELD_RSC5_RSC5 = property(
        lambda self: (self.RSC5 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'RSC5', ((val << 0) & 0xFFFFFFFF) |
            (self.RSC5 & ~0xFFFFFFFF)))
    RSC6 = property(lambda s: s._rvd.readInt(s._RSC6, 4),
        lambda s, v: s._rvd.writeInt(s._RSC6, 4, v))
    FIELD_RSC6_RSC6 = property(
        lambda self: (self.RSC6 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'RSC6', ((val << 0) & 0xFFFFFFFF) |
            (self.RSC6 & ~0xFFFFFFFF)))                                                              ## GENERATED ##
    RSC7 = property(lambda s: s._rvd.readInt(s._RSC7, 4),
        lambda s, v: s._rvd.writeInt(s._RSC7, 4, v))
    FIELD_RSC7_RSC7 = property(
        lambda self: (self.RSC7 & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'RSC7', ((val << 0) & 0xFFFFFFFF) |
            (self.RSC7 & ~0xFFFFFFFF)))
    CSC1 = property(lambda s: s._rvd.readInt(s._CSC1, 4),
        lambda s, v: raise_(RuntimeError("CSC1 is not writable")))
    FIELD_CSC1_CSC1 = property(
        lambda self: (self.CSC1 & 0xFFFFFFFF) >> 0,                                                  ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CSC2 = property(lambda s: s._rvd.readInt(s._CSC2, 4),
        lambda s, v: raise_(RuntimeError("CSC2 is not writable")))
    FIELD_CSC2_CSC2 = property(
        lambda self: (self.CSC2 & 0xFFFFFFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CSC3 = property(lambda s: s._rvd.readInt(s._CSC3, 4),
        lambda s, v: raise_(RuntimeError("CSC3 is not writable")))
    FIELD_CSC3_CSC3 = property(
        lambda self: (self.CSC3 & 0xFFFFFFFF) >> 0,                                                  ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CSC4 = property(lambda s: s._rvd.readInt(s._CSC4, 4),
        lambda s, v: raise_(RuntimeError("CSC4 is not writable")))
    FIELD_CSC4_CSC4 = property(
        lambda self: (self.CSC4 & 0xFFFFFFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CSC5 = property(lambda s: s._rvd.readInt(s._CSC5, 4),
        lambda s, v: raise_(RuntimeError("CSC5 is not writable")))
    FIELD_CSC5_CSC5 = property(
        lambda self: (self.CSC5 & 0xFFFFFFFF) >> 0,                                                  ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CSC6 = property(lambda s: s._rvd.readInt(s._CSC6, 4),
        lambda s, v: raise_(RuntimeError("CSC6 is not writable")))
    FIELD_CSC6_CSC6 = property(
        lambda self: (self.CSC6 & 0xFFFFFFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CSC7 = property(lambda s: s._rvd.readInt(s._CSC7, 4),
        lambda s, v: raise_(RuntimeError("CSC7 is not writable")))
    FIELD_CSC7_CSC7 = property(
        lambda self: (self.CSC7 & 0xFFFFFFFF) >> 0,                                                  ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CYC = property(lambda s: s._rvd.readInt(s._CYC, 4),
        lambda s, v: s._rvd.writeInt(s._CYC, 4, v))
    FIELD_CYC_CYC3 = property(
        lambda self: (self.CYC & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CYC_CYC2 = property(
        lambda self: (self.CYC & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CYC_CYC1 = property(                                                                       ## GENERATED ##
        lambda self: (self.CYC & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CYC_CYC0 = property(
        lambda self: (self.CYC & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'CYC', ((val << 0) & 0x000000FF) |
            (self.CYC & ~0x000000FF)))
    CYCH = property(lambda s: s._rvd.readInt(s._CYCH, 4),
        lambda s, v: s._rvd.writeInt(s._CYCH, 4, v))
    FIELD_CYCH_CYC6 = property(
        lambda self: (self.CYCH & 0xFF000000) >> 24,                                                 ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CYCH_CYC5 = property(
        lambda self: (self.CYCH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CYCH_CYC4 = property(
        lambda self: (self.CYCH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CYCH_CYC3 = property(
        lambda self: (self.CYCH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'CYCH', ((val << 0) & 0x000000FF) |                                ## GENERATED ##
            (self.CYCH & ~0x000000FF)))
    STALL = property(lambda s: s._rvd.readInt(s._STALL, 4),
        lambda s, v: s._rvd.writeInt(s._STALL, 4, v))
    FIELD_STALL_STALL3 = property(
        lambda self: (self.STALL & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_STALL_STALL2 = property(
        lambda self: (self.STALL & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_STALL_STALL1 = property(                                                                   ## GENERATED ##
        lambda self: (self.STALL & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_STALL_STALL0 = property(
        lambda self: (self.STALL & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'STALL', ((val << 0) & 0x000000FF) |
            (self.STALL & ~0x000000FF)))
    STALLH = property(lambda s: s._rvd.readInt(s._STALLH, 4),
        lambda s, v: s._rvd.writeInt(s._STALLH, 4, v))
    FIELD_STALLH_STALL6 = property(
        lambda self: (self.STALLH & 0xFF000000) >> 24,                                               ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_STALLH_STALL5 = property(
        lambda self: (self.STALLH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_STALLH_STALL4 = property(
        lambda self: (self.STALLH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_STALLH_STALL3 = property(
        lambda self: (self.STALLH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'STALLH', ((val << 0) & 0x000000FF) |                              ## GENERATED ##
            (self.STALLH & ~0x000000FF)))
    BUN = property(lambda s: s._rvd.readInt(s._BUN, 4),
        lambda s, v: s._rvd.writeInt(s._BUN, 4, v))
    FIELD_BUN_BUN3 = property(
        lambda self: (self.BUN & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_BUN_BUN2 = property(
        lambda self: (self.BUN & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_BUN_BUN1 = property(                                                                       ## GENERATED ##
        lambda self: (self.BUN & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_BUN_BUN0 = property(
        lambda self: (self.BUN & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'BUN', ((val << 0) & 0x000000FF) |
            (self.BUN & ~0x000000FF)))
    BUNH = property(lambda s: s._rvd.readInt(s._BUNH, 4),
        lambda s, v: s._rvd.writeInt(s._BUNH, 4, v))
    FIELD_BUNH_BUN6 = property(
        lambda self: (self.BUNH & 0xFF000000) >> 24,                                                 ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_BUNH_BUN5 = property(
        lambda self: (self.BUNH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_BUNH_BUN4 = property(
        lambda self: (self.BUNH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_BUNH_BUN3 = property(
        lambda self: (self.BUNH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'BUNH', ((val << 0) & 0x000000FF) |                                ## GENERATED ##
            (self.BUNH & ~0x000000FF)))
    SYL = property(lambda s: s._rvd.readInt(s._SYL, 4),
        lambda s, v: s._rvd.writeInt(s._SYL, 4, v))
    FIELD_SYL_SYL3 = property(
        lambda self: (self.SYL & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SYL_SYL2 = property(
        lambda self: (self.SYL & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SYL_SYL1 = property(                                                                       ## GENERATED ##
        lambda self: (self.SYL & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SYL_SYL0 = property(
        lambda self: (self.SYL & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'SYL', ((val << 0) & 0x000000FF) |
            (self.SYL & ~0x000000FF)))
    SYLH = property(lambda s: s._rvd.readInt(s._SYLH, 4),
        lambda s, v: s._rvd.writeInt(s._SYLH, 4, v))
    FIELD_SYLH_SYL6 = property(
        lambda self: (self.SYLH & 0xFF000000) >> 24,                                                 ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SYLH_SYL5 = property(
        lambda self: (self.SYLH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SYLH_SYL4 = property(
        lambda self: (self.SYLH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SYLH_SYL3 = property(
        lambda self: (self.SYLH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'SYLH', ((val << 0) & 0x000000FF) |                                ## GENERATED ##
            (self.SYLH & ~0x000000FF)))
    NOP = property(lambda s: s._rvd.readInt(s._NOP, 4),
        lambda s, v: s._rvd.writeInt(s._NOP, 4, v))
    FIELD_NOP_NOP3 = property(
        lambda self: (self.NOP & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_NOP_NOP2 = property(
        lambda self: (self.NOP & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_NOP_NOP1 = property(                                                                       ## GENERATED ##
        lambda self: (self.NOP & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_NOP_NOP0 = property(
        lambda self: (self.NOP & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'NOP', ((val << 0) & 0x000000FF) |
            (self.NOP & ~0x000000FF)))
    NOPH = property(lambda s: s._rvd.readInt(s._NOPH, 4),
        lambda s, v: s._rvd.writeInt(s._NOPH, 4, v))
    FIELD_NOPH_NOP6 = property(
        lambda self: (self.NOPH & 0xFF000000) >> 24,                                                 ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_NOPH_NOP5 = property(
        lambda self: (self.NOPH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_NOPH_NOP4 = property(
        lambda self: (self.NOPH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_NOPH_NOP3 = property(
        lambda self: (self.NOPH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'NOPH', ((val << 0) & 0x000000FF) |                                ## GENERATED ##
            (self.NOPH & ~0x000000FF)))
    IACC = property(lambda s: s._rvd.readInt(s._IACC, 4),
        lambda s, v: s._rvd.writeInt(s._IACC, 4, v))
    FIELD_IACC_IACC3 = property(
        lambda self: (self.IACC & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IACC_IACC2 = property(
        lambda self: (self.IACC & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IACC_IACC1 = property(                                                                     ## GENERATED ##
        lambda self: (self.IACC & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IACC_IACC0 = property(
        lambda self: (self.IACC & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'IACC', ((val << 0) & 0x000000FF) |
            (self.IACC & ~0x000000FF)))
    IACCH = property(lambda s: s._rvd.readInt(s._IACCH, 4),
        lambda s, v: s._rvd.writeInt(s._IACCH, 4, v))
    FIELD_IACCH_IACC6 = property(
        lambda self: (self.IACCH & 0xFF000000) >> 24,                                                ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IACCH_IACC5 = property(
        lambda self: (self.IACCH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IACCH_IACC4 = property(
        lambda self: (self.IACCH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IACCH_IACC3 = property(
        lambda self: (self.IACCH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'IACCH', ((val << 0) & 0x000000FF) |                               ## GENERATED ##
            (self.IACCH & ~0x000000FF)))
    IMISS = property(lambda s: s._rvd.readInt(s._IMISS, 4),
        lambda s, v: s._rvd.writeInt(s._IMISS, 4, v))
    FIELD_IMISS_IMISS3 = property(
        lambda self: (self.IMISS & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IMISS_IMISS2 = property(
        lambda self: (self.IMISS & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IMISS_IMISS1 = property(                                                                   ## GENERATED ##
        lambda self: (self.IMISS & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IMISS_IMISS0 = property(
        lambda self: (self.IMISS & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'IMISS', ((val << 0) & 0x000000FF) |
            (self.IMISS & ~0x000000FF)))
    IMISSH = property(lambda s: s._rvd.readInt(s._IMISSH, 4),
        lambda s, v: s._rvd.writeInt(s._IMISSH, 4, v))
    FIELD_IMISSH_IMISS6 = property(
        lambda self: (self.IMISSH & 0xFF000000) >> 24,                                               ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IMISSH_IMISS5 = property(
        lambda self: (self.IMISSH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IMISSH_IMISS4 = property(
        lambda self: (self.IMISSH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_IMISSH_IMISS3 = property(
        lambda self: (self.IMISSH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'IMISSH', ((val << 0) & 0x000000FF) |                              ## GENERATED ##
            (self.IMISSH & ~0x000000FF)))
    DRACC = property(lambda s: s._rvd.readInt(s._DRACC, 4),
        lambda s, v: s._rvd.writeInt(s._DRACC, 4, v))
    FIELD_DRACC_DRACC3 = property(
        lambda self: (self.DRACC & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRACC_DRACC2 = property(
        lambda self: (self.DRACC & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRACC_DRACC1 = property(                                                                   ## GENERATED ##
        lambda self: (self.DRACC & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRACC_DRACC0 = property(
        lambda self: (self.DRACC & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DRACC', ((val << 0) & 0x000000FF) |
            (self.DRACC & ~0x000000FF)))
    DRACCH = property(lambda s: s._rvd.readInt(s._DRACCH, 4),
        lambda s, v: s._rvd.writeInt(s._DRACCH, 4, v))
    FIELD_DRACCH_DRACC6 = property(
        lambda self: (self.DRACCH & 0xFF000000) >> 24,                                               ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRACCH_DRACC5 = property(
        lambda self: (self.DRACCH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRACCH_DRACC4 = property(
        lambda self: (self.DRACCH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRACCH_DRACC3 = property(
        lambda self: (self.DRACCH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DRACCH', ((val << 0) & 0x000000FF) |                              ## GENERATED ##
            (self.DRACCH & ~0x000000FF)))
    DRMISS = property(lambda s: s._rvd.readInt(s._DRMISS, 4),
        lambda s, v: s._rvd.writeInt(s._DRMISS, 4, v))
    FIELD_DRMISS_DRMISS3 = property(
        lambda self: (self.DRMISS & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRMISS_DRMISS2 = property(
        lambda self: (self.DRMISS & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRMISS_DRMISS1 = property(                                                                 ## GENERATED ##
        lambda self: (self.DRMISS & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRMISS_DRMISS0 = property(
        lambda self: (self.DRMISS & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DRMISS', ((val << 0) & 0x000000FF) |
            (self.DRMISS & ~0x000000FF)))
    DRMISSH = property(lambda s: s._rvd.readInt(s._DRMISSH, 4),
        lambda s, v: s._rvd.writeInt(s._DRMISSH, 4, v))
    FIELD_DRMISSH_DRMISS6 = property(
        lambda self: (self.DRMISSH & 0xFF000000) >> 24,                                              ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRMISSH_DRMISS5 = property(
        lambda self: (self.DRMISSH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRMISSH_DRMISS4 = property(
        lambda self: (self.DRMISSH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DRMISSH_DRMISS3 = property(
        lambda self: (self.DRMISSH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DRMISSH', ((val << 0) & 0x000000FF) |                             ## GENERATED ##
            (self.DRMISSH & ~0x000000FF)))
    DWACC = property(lambda s: s._rvd.readInt(s._DWACC, 4),
        lambda s, v: s._rvd.writeInt(s._DWACC, 4, v))
    FIELD_DWACC_DWACC3 = property(
        lambda self: (self.DWACC & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWACC_DWACC2 = property(
        lambda self: (self.DWACC & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWACC_DWACC1 = property(                                                                   ## GENERATED ##
        lambda self: (self.DWACC & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWACC_DWACC0 = property(
        lambda self: (self.DWACC & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DWACC', ((val << 0) & 0x000000FF) |
            (self.DWACC & ~0x000000FF)))
    DWACCH = property(lambda s: s._rvd.readInt(s._DWACCH, 4),
        lambda s, v: s._rvd.writeInt(s._DWACCH, 4, v))
    FIELD_DWACCH_DWACC6 = property(
        lambda self: (self.DWACCH & 0xFF000000) >> 24,                                               ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWACCH_DWACC5 = property(
        lambda self: (self.DWACCH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWACCH_DWACC4 = property(
        lambda self: (self.DWACCH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWACCH_DWACC3 = property(
        lambda self: (self.DWACCH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DWACCH', ((val << 0) & 0x000000FF) |                              ## GENERATED ##
            (self.DWACCH & ~0x000000FF)))
    DWMISS = property(lambda s: s._rvd.readInt(s._DWMISS, 4),
        lambda s, v: s._rvd.writeInt(s._DWMISS, 4, v))
    FIELD_DWMISS_DWMISS3 = property(
        lambda self: (self.DWMISS & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWMISS_DWMISS2 = property(
        lambda self: (self.DWMISS & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWMISS_DWMISS1 = property(                                                                 ## GENERATED ##
        lambda self: (self.DWMISS & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWMISS_DWMISS0 = property(
        lambda self: (self.DWMISS & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DWMISS', ((val << 0) & 0x000000FF) |
            (self.DWMISS & ~0x000000FF)))
    DWMISSH = property(lambda s: s._rvd.readInt(s._DWMISSH, 4),
        lambda s, v: s._rvd.writeInt(s._DWMISSH, 4, v))
    FIELD_DWMISSH_DWMISS6 = property(
        lambda self: (self.DWMISSH & 0xFF000000) >> 24,                                              ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWMISSH_DWMISS5 = property(
        lambda self: (self.DWMISSH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWMISSH_DWMISS4 = property(
        lambda self: (self.DWMISSH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWMISSH_DWMISS3 = property(
        lambda self: (self.DWMISSH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DWMISSH', ((val << 0) & 0x000000FF) |                             ## GENERATED ##
            (self.DWMISSH & ~0x000000FF)))
    DBYPASS = property(lambda s: s._rvd.readInt(s._DBYPASS, 4),
        lambda s, v: s._rvd.writeInt(s._DBYPASS, 4, v))
    FIELD_DBYPASS_DBYPASS3 = property(
        lambda self: (self.DBYPASS & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DBYPASS_DBYPASS2 = property(
        lambda self: (self.DBYPASS & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DBYPASS_DBYPASS1 = property(                                                               ## GENERATED ##
        lambda self: (self.DBYPASS & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DBYPASS_DBYPASS0 = property(
        lambda self: (self.DBYPASS & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DBYPASS', ((val << 0) & 0x000000FF) |
            (self.DBYPASS & ~0x000000FF)))
    DBYPASSH = property(lambda s: s._rvd.readInt(s._DBYPASSH, 4),
        lambda s, v: s._rvd.writeInt(s._DBYPASSH, 4, v))
    FIELD_DBYPASSH_DBYPASS6 = property(
        lambda self: (self.DBYPASSH & 0xFF000000) >> 24,                                             ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DBYPASSH_DBYPASS5 = property(
        lambda self: (self.DBYPASSH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DBYPASSH_DBYPASS4 = property(
        lambda self: (self.DBYPASSH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DBYPASSH_DBYPASS3 = property(
        lambda self: (self.DBYPASSH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DBYPASSH', ((val << 0) & 0x000000FF) |                            ## GENERATED ##
            (self.DBYPASSH & ~0x000000FF)))
    DWBUF = property(lambda s: s._rvd.readInt(s._DWBUF, 4),
        lambda s, v: s._rvd.writeInt(s._DWBUF, 4, v))
    FIELD_DWBUF_DWBUF3 = property(
        lambda self: (self.DWBUF & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWBUF_DWBUF2 = property(
        lambda self: (self.DWBUF & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWBUF_DWBUF1 = property(                                                                   ## GENERATED ##
        lambda self: (self.DWBUF & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWBUF_DWBUF0 = property(
        lambda self: (self.DWBUF & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DWBUF', ((val << 0) & 0x000000FF) |
            (self.DWBUF & ~0x000000FF)))
    DWBUFH = property(lambda s: s._rvd.readInt(s._DWBUFH, 4),
        lambda s, v: s._rvd.writeInt(s._DWBUFH, 4, v))
    FIELD_DWBUFH_DWBUF6 = property(
        lambda self: (self.DWBUFH & 0xFF000000) >> 24,                                               ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWBUFH_DWBUF5 = property(
        lambda self: (self.DWBUFH & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWBUFH_DWBUF4 = property(
        lambda self: (self.DWBUFH & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DWBUFH_DWBUF3 = property(
        lambda self: (self.DWBUFH & 0x000000FF) >> 0,
        lambda s, val: setattr(s, 'DWBUFH', ((val << 0) & 0x000000FF) |                              ## GENERATED ##
            (self.DWBUFH & ~0x000000FF)))

class Core:

    def __iter__(self):
        for c in self.context:
            yield c

    def __getitem__(self, index):
        return self.context[index]                                                                   ## GENERATED ##

    def __init__(self, rvd, base_address):
        self._rvd = rvd
        self._CREG_GLOB = base_address
        self._GSR = self._CREG_GLOB + 0x000
        self._BCRR = self._CREG_GLOB + 0x004
        self._CC = self._CREG_GLOB + 0x008
        self._AFF = self._CREG_GLOB + 0x00C
        self._CNT = self._CREG_GLOB + 0x010
        self._CNTH = self._CREG_GLOB + 0x014                                                         ## GENERATED ##
        self._LIMC7 = self._CREG_GLOB + 0x0A0
        self._BORROW15 = self._CREG_GLOB + 0x0A1
        self._BORROW14 = self._CREG_GLOB + 0x0A3
        self._LIMC6 = self._CREG_GLOB + 0x0A4
        self._BORROW13 = self._CREG_GLOB + 0x0A5
        self._BORROW12 = self._CREG_GLOB + 0x0A7
        self._LIMC5 = self._CREG_GLOB + 0x0A8
        self._BORROW11 = self._CREG_GLOB + 0x0A9
        self._BORROW10 = self._CREG_GLOB + 0x0AB
        self._LIMC4 = self._CREG_GLOB + 0x0AC                                                        ## GENERATED ##
        self._BORROW9 = self._CREG_GLOB + 0x0AD
        self._BORROW8 = self._CREG_GLOB + 0x0AF
        self._LIMC3 = self._CREG_GLOB + 0x0B0
        self._BORROW7 = self._CREG_GLOB + 0x0B1
        self._BORROW6 = self._CREG_GLOB + 0x0B3
        self._LIMC2 = self._CREG_GLOB + 0x0B4
        self._BORROW5 = self._CREG_GLOB + 0x0B5
        self._BORROW4 = self._CREG_GLOB + 0x0B7
        self._LIMC1 = self._CREG_GLOB + 0x0B8
        self._BORROW3 = self._CREG_GLOB + 0x0B9                                                      ## GENERATED ##
        self._BORROW2 = self._CREG_GLOB + 0x0BB
        self._LIMC0 = self._CREG_GLOB + 0x0BC
        self._BORROW1 = self._CREG_GLOB + 0x0BD
        self._BORROW0 = self._CREG_GLOB + 0x0BF
        self._SIC3 = self._CREG_GLOB + 0x0C0
        self._SYL15CAP = self._CREG_GLOB + 0x0C0
        self._SYL14CAP = self._CREG_GLOB + 0x0C1
        self._SYL13CAP = self._CREG_GLOB + 0x0C2
        self._SYL12CAP = self._CREG_GLOB + 0x0C3
        self._SIC2 = self._CREG_GLOB + 0x0C4                                                         ## GENERATED ##
        self._SYL11CAP = self._CREG_GLOB + 0x0C4
        self._SYL10CAP = self._CREG_GLOB + 0x0C5
        self._SYL9CAP = self._CREG_GLOB + 0x0C6
        self._SYL8CAP = self._CREG_GLOB + 0x0C7
        self._SIC1 = self._CREG_GLOB + 0x0C8
        self._SYL7CAP = self._CREG_GLOB + 0x0C8
        self._SYL6CAP = self._CREG_GLOB + 0x0C9
        self._SYL5CAP = self._CREG_GLOB + 0x0CA
        self._SYL4CAP = self._CREG_GLOB + 0x0CB
        self._SIC0 = self._CREG_GLOB + 0x0CC                                                         ## GENERATED ##
        self._SYL3CAP = self._CREG_GLOB + 0x0CC
        self._SYL2CAP = self._CREG_GLOB + 0x0CD
        self._SYL1CAP = self._CREG_GLOB + 0x0CE
        self._SYL0CAP = self._CREG_GLOB + 0x0CF
        self._GPS1 = self._CREG_GLOB + 0x0D0
        self._GPS0 = self._CREG_GLOB + 0x0D4
        self._SPS1 = self._CREG_GLOB + 0x0D8
        self._SPS0 = self._CREG_GLOB + 0x0DC
        self._EXT2 = self._CREG_GLOB + 0x0E0
        self._EXT1 = self._CREG_GLOB + 0x0E4                                                         ## GENERATED ##
        self._EXT0 = self._CREG_GLOB + 0x0E8
        self._DCFG = self._CREG_GLOB + 0x0EC
        self._CVER1 = self._CREG_GLOB + 0x0F0
        self._CVER = self._CREG_GLOB + 0x0F0
        self._CTAG = self._CREG_GLOB + 0x0F1
        self._CVER0 = self._CREG_GLOB + 0x0F4
        self._PVER1 = self._CREG_GLOB + 0x0F8
        self._COID = self._CREG_GLOB + 0x0F8
        self._PTAG = self._CREG_GLOB + 0x0F9
        self._PVER0 = self._CREG_GLOB + 0x0FC                                                        ## GENERATED ##
        self.context = [Context(rvd, self, base_address, x) for x in
                range(self.FIELD_DCFG_NC+1)]
        return

    GSR = property(lambda s: s._rvd.readInt(s._GSR, 4),
        lambda s, v: s._rvd.writeInt(s._GSR, 4, v))
    FIELD_GSR_R = property(
        lambda self: (self.GSR & 0x80000000) >> 31,
        lambda s, val: setattr(s, 'GSR', ((val << 31) & 0x80000000) |
            (self.GSR & ~0x80000000)))                                                               ## GENERATED ##
    FIELD_GSR_E = property(
        lambda self: (self.GSR & 0x00002000) >> 13,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_GSR_B = property(
        lambda self: (self.GSR & 0x00001000) >> 12,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_GSR_RID = property(
        lambda self: (self.GSR & 0x00000F00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BCRR = property(lambda s: s._rvd.readInt(s._BCRR, 4),                                            ## GENERATED ##
        lambda s, v: s._rvd.writeInt(s._BCRR, 4, v))
    FIELD_BCRR_BCRR = property(
        lambda self: (self.BCRR & 0xFFFFFFFF) >> 0,
        lambda s, val: setattr(s, 'BCRR', ((val << 0) & 0xFFFFFFFF) |
            (self.BCRR & ~0xFFFFFFFF)))
    CC = property(lambda s: s._rvd.readInt(s._CC, 4),
        lambda s, v: raise_(RuntimeError("CC is not writable")))
    FIELD_CC_CC = property(
        lambda self: (self.CC & 0xFFFFFFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    AFF = property(lambda s: s._rvd.readInt(s._AFF, 4),
        lambda s, v: raise_(RuntimeError("AFF is not writable")))
    FIELD_AFF_AF = property(
        lambda self: (self.AFF & 0xFFFFFFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CNT = property(lambda s: s._rvd.readInt(s._CNT, 4),
        lambda s, v: raise_(RuntimeError("CNT is not writable")))
    FIELD_CNT_CNT = property(
        lambda self: (self.CNT & 0xFFFFFFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    CNTH = property(lambda s: s._rvd.readInt(s._CNTH, 4),
        lambda s, v: raise_(RuntimeError("CNTH is not writable")))
    FIELD_CNTH_CNTH = property(
        lambda self: (self.CNTH & 0xFFFFFF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CNTH_CNT = property(
        lambda self: (self.CNTH & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    LIMC7 = property(lambda s: s._rvd.readInt(s._LIMC7, 4),
        lambda s, v: raise_(RuntimeError("LIMC7 is not writable")))                                  ## GENERATED ##
    FIELD_LIMC7_BORROW15 = property(
        lambda self: (self.LIMC7 & 0xFFFF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW15 = property(lambda s: s._rvd.readInt(s._BORROW15, 2),
        lambda s, v: raise_(RuntimeError("BORROW15 is not writable")))
    FIELD_LIMC7_BORROW14 = property(
        lambda self: (self.LIMC7 & 0x0000FFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW14 = property(lambda s: s._rvd.readInt(s._BORROW14, 2),
        lambda s, v: raise_(RuntimeError("BORROW14 is not writable")))                               ## GENERATED ##
    LIMC6 = property(lambda s: s._rvd.readInt(s._LIMC6, 4),
        lambda s, v: raise_(RuntimeError("LIMC6 is not writable")))
    FIELD_LIMC6_BORROW13 = property(
        lambda self: (self.LIMC6 & 0xFFFF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW13 = property(lambda s: s._rvd.readInt(s._BORROW13, 2),
        lambda s, v: raise_(RuntimeError("BORROW13 is not writable")))
    FIELD_LIMC6_BORROW12 = property(
        lambda self: (self.LIMC6 & 0x0000FFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    BORROW12 = property(lambda s: s._rvd.readInt(s._BORROW12, 2),
        lambda s, v: raise_(RuntimeError("BORROW12 is not writable")))
    LIMC5 = property(lambda s: s._rvd.readInt(s._LIMC5, 4),
        lambda s, v: raise_(RuntimeError("LIMC5 is not writable")))
    FIELD_LIMC5_BORROW11 = property(
        lambda self: (self.LIMC5 & 0xFFFF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW11 = property(lambda s: s._rvd.readInt(s._BORROW11, 2),
        lambda s, v: raise_(RuntimeError("BORROW11 is not writable")))
    FIELD_LIMC5_BORROW10 = property(                                                                 ## GENERATED ##
        lambda self: (self.LIMC5 & 0x0000FFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW10 = property(lambda s: s._rvd.readInt(s._BORROW10, 2),
        lambda s, v: raise_(RuntimeError("BORROW10 is not writable")))
    LIMC4 = property(lambda s: s._rvd.readInt(s._LIMC4, 4),
        lambda s, v: raise_(RuntimeError("LIMC4 is not writable")))
    FIELD_LIMC4_BORROW9 = property(
        lambda self: (self.LIMC4 & 0xFFFF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW9 = property(lambda s: s._rvd.readInt(s._BORROW9, 2),                                      ## GENERATED ##
        lambda s, v: raise_(RuntimeError("BORROW9 is not writable")))
    FIELD_LIMC4_BORROW8 = property(
        lambda self: (self.LIMC4 & 0x0000FFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW8 = property(lambda s: s._rvd.readInt(s._BORROW8, 2),
        lambda s, v: raise_(RuntimeError("BORROW8 is not writable")))
    LIMC3 = property(lambda s: s._rvd.readInt(s._LIMC3, 4),
        lambda s, v: raise_(RuntimeError("LIMC3 is not writable")))
    FIELD_LIMC3_BORROW7 = property(
        lambda self: (self.LIMC3 & 0xFFFF0000) >> 16,                                                ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW7 = property(lambda s: s._rvd.readInt(s._BORROW7, 2),
        lambda s, v: raise_(RuntimeError("BORROW7 is not writable")))
    FIELD_LIMC3_BORROW6 = property(
        lambda self: (self.LIMC3 & 0x0000FFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW6 = property(lambda s: s._rvd.readInt(s._BORROW6, 2),
        lambda s, v: raise_(RuntimeError("BORROW6 is not writable")))
    LIMC2 = property(lambda s: s._rvd.readInt(s._LIMC2, 4),
        lambda s, v: raise_(RuntimeError("LIMC2 is not writable")))                                  ## GENERATED ##
    FIELD_LIMC2_BORROW5 = property(
        lambda self: (self.LIMC2 & 0xFFFF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW5 = property(lambda s: s._rvd.readInt(s._BORROW5, 2),
        lambda s, v: raise_(RuntimeError("BORROW5 is not writable")))
    FIELD_LIMC2_BORROW4 = property(
        lambda self: (self.LIMC2 & 0x0000FFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW4 = property(lambda s: s._rvd.readInt(s._BORROW4, 2),
        lambda s, v: raise_(RuntimeError("BORROW4 is not writable")))                                ## GENERATED ##
    LIMC1 = property(lambda s: s._rvd.readInt(s._LIMC1, 4),
        lambda s, v: raise_(RuntimeError("LIMC1 is not writable")))
    FIELD_LIMC1_BORROW3 = property(
        lambda self: (self.LIMC1 & 0xFFFF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW3 = property(lambda s: s._rvd.readInt(s._BORROW3, 2),
        lambda s, v: raise_(RuntimeError("BORROW3 is not writable")))
    FIELD_LIMC1_BORROW2 = property(
        lambda self: (self.LIMC1 & 0x0000FFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    BORROW2 = property(lambda s: s._rvd.readInt(s._BORROW2, 2),
        lambda s, v: raise_(RuntimeError("BORROW2 is not writable")))
    LIMC0 = property(lambda s: s._rvd.readInt(s._LIMC0, 4),
        lambda s, v: raise_(RuntimeError("LIMC0 is not writable")))
    FIELD_LIMC0_BORROW1 = property(
        lambda self: (self.LIMC0 & 0xFFFF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW1 = property(lambda s: s._rvd.readInt(s._BORROW1, 2),
        lambda s, v: raise_(RuntimeError("BORROW1 is not writable")))
    FIELD_LIMC0_BORROW0 = property(                                                                  ## GENERATED ##
        lambda self: (self.LIMC0 & 0x0000FFFF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    BORROW0 = property(lambda s: s._rvd.readInt(s._BORROW0, 2),
        lambda s, v: raise_(RuntimeError("BORROW0 is not writable")))
    SIC3 = property(lambda s: s._rvd.readInt(s._SIC3, 4),
        lambda s, v: raise_(RuntimeError("SIC3 is not writable")))
    FIELD_SIC3_SYL15CAP = property(
        lambda self: (self.SIC3 & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL15CAP = property(lambda s: s._rvd.readInt(s._SYL15CAP, 1),                                    ## GENERATED ##
        lambda s, v: raise_(RuntimeError("SYL15CAP is not writable")))
    FIELD_SIC3_SYL14CAP = property(
        lambda self: (self.SIC3 & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL14CAP = property(lambda s: s._rvd.readInt(s._SYL14CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL14CAP is not writable")))
    FIELD_SIC3_SYL13CAP = property(
        lambda self: (self.SIC3 & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL13CAP = property(lambda s: s._rvd.readInt(s._SYL13CAP, 1),                                    ## GENERATED ##
        lambda s, v: raise_(RuntimeError("SYL13CAP is not writable")))
    FIELD_SIC3_SYL12CAP = property(
        lambda self: (self.SIC3 & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL12CAP = property(lambda s: s._rvd.readInt(s._SYL12CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL12CAP is not writable")))
    SIC2 = property(lambda s: s._rvd.readInt(s._SIC2, 4),
        lambda s, v: raise_(RuntimeError("SIC2 is not writable")))
    FIELD_SIC2_SYL11CAP = property(
        lambda self: (self.SIC2 & 0xFF000000) >> 24,                                                 ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL11CAP = property(lambda s: s._rvd.readInt(s._SYL11CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL11CAP is not writable")))
    FIELD_SIC2_SYL10CAP = property(
        lambda self: (self.SIC2 & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL10CAP = property(lambda s: s._rvd.readInt(s._SYL10CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL10CAP is not writable")))
    FIELD_SIC2_SYL9CAP = property(
        lambda self: (self.SIC2 & 0x0000FF00) >> 8,                                                  ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL9CAP = property(lambda s: s._rvd.readInt(s._SYL9CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL9CAP is not writable")))
    FIELD_SIC2_SYL8CAP = property(
        lambda self: (self.SIC2 & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL8CAP = property(lambda s: s._rvd.readInt(s._SYL8CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL8CAP is not writable")))
    SIC1 = property(lambda s: s._rvd.readInt(s._SIC1, 4),
        lambda s, v: raise_(RuntimeError("SIC1 is not writable")))                                   ## GENERATED ##
    FIELD_SIC1_SYL7CAP = property(
        lambda self: (self.SIC1 & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL7CAP = property(lambda s: s._rvd.readInt(s._SYL7CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL7CAP is not writable")))
    FIELD_SIC1_SYL6CAP = property(
        lambda self: (self.SIC1 & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL6CAP = property(lambda s: s._rvd.readInt(s._SYL6CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL6CAP is not writable")))                                ## GENERATED ##
    FIELD_SIC1_SYL5CAP = property(
        lambda self: (self.SIC1 & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL5CAP = property(lambda s: s._rvd.readInt(s._SYL5CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL5CAP is not writable")))
    FIELD_SIC1_SYL4CAP = property(
        lambda self: (self.SIC1 & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL4CAP = property(lambda s: s._rvd.readInt(s._SYL4CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL4CAP is not writable")))                                ## GENERATED ##
    SIC0 = property(lambda s: s._rvd.readInt(s._SIC0, 4),
        lambda s, v: raise_(RuntimeError("SIC0 is not writable")))
    FIELD_SIC0_SYL3CAP = property(
        lambda self: (self.SIC0 & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL3CAP = property(lambda s: s._rvd.readInt(s._SYL3CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL3CAP is not writable")))
    FIELD_SIC0_SYL2CAP = property(
        lambda self: (self.SIC0 & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    SYL2CAP = property(lambda s: s._rvd.readInt(s._SYL2CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL2CAP is not writable")))
    FIELD_SIC0_SYL1CAP = property(
        lambda self: (self.SIC0 & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SYL1CAP = property(lambda s: s._rvd.readInt(s._SYL1CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL1CAP is not writable")))
    FIELD_SIC0_SYL0CAP = property(
        lambda self: (self.SIC0 & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    SYL0CAP = property(lambda s: s._rvd.readInt(s._SYL0CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL0CAP is not writable")))
    GPS1 = property(lambda s: s._rvd.readInt(s._GPS1, 4),
        lambda s, v: raise_(RuntimeError("GPS1 is not writable")))
    GPS0 = property(lambda s: s._rvd.readInt(s._GPS0, 4),
        lambda s, v: raise_(RuntimeError("GPS0 is not writable")))
    FIELD_GPS0_MEMAR = property(
        lambda self: (self.GPS0 & 0x0F000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_GPS0_MEMDC = property(                                                                     ## GENERATED ##
        lambda self: (self.GPS0 & 0x00F00000) >> 20,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_GPS0_MEMDR = property(
        lambda self: (self.GPS0 & 0x000F0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_GPS0_MULC = property(
        lambda self: (self.GPS0 & 0x0000F000) >> 12,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_GPS0_MULR = property(
        lambda self: (self.GPS0 & 0x00000F00) >> 8,                                                  ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_GPS0_ALUC = property(
        lambda self: (self.GPS0 & 0x000000F0) >> 4,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_GPS0_ALUR = property(
        lambda self: (self.GPS0 & 0x0000000F) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    SPS1 = property(lambda s: s._rvd.readInt(s._SPS1, 4),
        lambda s, v: raise_(RuntimeError("SPS1 is not writable")))
    SPS0 = property(lambda s: s._rvd.readInt(s._SPS0, 4),                                            ## GENERATED ##
        lambda s, v: raise_(RuntimeError("SPS0 is not writable")))
    FIELD_SPS0_MEMMC = property(
        lambda self: (self.SPS0 & 0xF0000000) >> 28,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SPS0_MEMMR = property(
        lambda self: (self.SPS0 & 0x0F000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SPS0_MEMDC = property(
        lambda self: (self.SPS0 & 0x00F00000) >> 20,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    FIELD_SPS0_MEMDR = property(
        lambda self: (self.SPS0 & 0x000F0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SPS0_BRC = property(
        lambda self: (self.SPS0 & 0x0000F000) >> 12,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SPS0_BRR = property(
        lambda self: (self.SPS0 & 0x00000F00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SPS0_ALUC = property(                                                                      ## GENERATED ##
        lambda self: (self.SPS0 & 0x000000F0) >> 4,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_SPS0_ALUR = property(
        lambda self: (self.SPS0 & 0x0000000F) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    EXT2 = property(lambda s: s._rvd.readInt(s._EXT2, 4),
        lambda s, v: raise_(RuntimeError("EXT2 is not writable")))
    EXT1 = property(lambda s: s._rvd.readInt(s._EXT1, 4),
        lambda s, v: raise_(RuntimeError("EXT1 is not writable")))
    EXT0 = property(lambda s: s._rvd.readInt(s._EXT0, 4),                                            ## GENERATED ##
        lambda s, v: raise_(RuntimeError("EXT0 is not writable")))
    FIELD_EXT0_T = property(
        lambda self: (self.EXT0 & 0x08000000) >> 27,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_EXT0_BRK = property(
        lambda self: (self.EXT0 & 0x07000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_EXT0_C = property(
        lambda self: (self.EXT0 & 0x00080000) >> 19,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    FIELD_EXT0_P = property(
        lambda self: (self.EXT0 & 0x00070000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_EXT0_O = property(
        lambda self: (self.EXT0 & 0x00000004) >> 2,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_EXT0_L = property(
        lambda self: (self.EXT0 & 0x00000002) >> 1,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_EXT0_F = property(                                                                         ## GENERATED ##
        lambda self: (self.EXT0 & 0x00000001) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    DCFG = property(lambda s: s._rvd.readInt(s._DCFG, 4),
        lambda s, v: raise_(RuntimeError("DCFG is not writable")))
    FIELD_DCFG_BA = property(
        lambda self: (self.DCFG & 0x0000F000) >> 12,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DCFG_NC = property(
        lambda self: (self.DCFG & 0x00000F00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##
    FIELD_DCFG_NG = property(
        lambda self: (self.DCFG & 0x000000F0) >> 4,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_DCFG_NL = property(
        lambda self: (self.DCFG & 0x0000000F) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CVER1 = property(lambda s: s._rvd.readInt(s._CVER1, 4),
        lambda s, v: raise_(RuntimeError("CVER1 is not writable")))
    FIELD_CVER1_VER = property(
        lambda self: (self.CVER1 & 0xFF000000) >> 24,                                                ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CVER = property(lambda s: s._rvd.readInt(s._CVER, 1),
        lambda s, v: raise_(RuntimeError("CVER is not writable")))
    FIELD_CVER1_CTAG0 = property(
        lambda self: (self.CVER1 & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CTAG = property(lambda s: s._rvd.readInt(s._CTAG, 1),
        lambda s, v: raise_(RuntimeError("CTAG is not writable")))
    FIELD_CVER1_CTAG1 = property(
        lambda self: (self.CVER1 & 0x0000FF00) >> 8,                                                 ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CVER1_CTAG2 = property(
        lambda self: (self.CVER1 & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    CVER0 = property(lambda s: s._rvd.readInt(s._CVER0, 4),
        lambda s, v: raise_(RuntimeError("CVER0 is not writable")))
    FIELD_CVER0_CTAG3 = property(
        lambda self: (self.CVER0 & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CVER0_CTAG4 = property(                                                                    ## GENERATED ##
        lambda self: (self.CVER0 & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CVER0_CTAG5 = property(
        lambda self: (self.CVER0 & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_CVER0_CTAG6 = property(
        lambda self: (self.CVER0 & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    PVER1 = property(lambda s: s._rvd.readInt(s._PVER1, 4),
        lambda s, v: raise_(RuntimeError("PVER1 is not writable")))                                  ## GENERATED ##
    FIELD_PVER1_COID = property(
        lambda self: (self.PVER1 & 0xFF000000) >> 24,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    COID = property(lambda s: s._rvd.readInt(s._COID, 1),
        lambda s, v: raise_(RuntimeError("COID is not writable")))
    FIELD_PVER1_PTAG0 = property(
        lambda self: (self.PVER1 & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    PTAG = property(lambda s: s._rvd.readInt(s._PTAG, 1),
        lambda s, v: raise_(RuntimeError("PTAG is not writable")))                                   ## GENERATED ##
    FIELD_PVER1_PTAG1 = property(
        lambda self: (self.PVER1 & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_PVER1_PTAG2 = property(
        lambda self: (self.PVER1 & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    PVER0 = property(lambda s: s._rvd.readInt(s._PVER0, 4),
        lambda s, v: raise_(RuntimeError("PVER0 is not writable")))
    FIELD_PVER0_PTAG3 = property(
        lambda self: (self.PVER0 & 0xFF000000) >> 24,                                                ## GENERATED ##
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_PVER0_PTAG4 = property(
        lambda self: (self.PVER0 & 0x00FF0000) >> 16,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_PVER0_PTAG5 = property(
        lambda self: (self.PVER0 & 0x0000FF00) >> 8,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))
    FIELD_PVER0_PTAG6 = property(
        lambda self: (self.PVER0 & 0x000000FF) >> 0,
        lambda self, val:raise_(RuntimeError('Cannot write to field')))                              ## GENERATED ##

