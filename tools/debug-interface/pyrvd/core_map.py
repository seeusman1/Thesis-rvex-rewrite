## This file is generated by the scripts in /config. ##

                                                                                                     ## GENERATED ##
def raise_(ex):
    raise ex

class Context:

    def halt(self):
        self._rvd.writeInt(self._DCR, 1, 0x09)
        return

    def reset(self):                                                                                 ## GENERATED ##
        self.halt()
        #set general regs to 0
        for reg in range(64):
            self.CREG_GPREG[reg] = 0
        #reset
        self._rvd.writeInt(self._DCR, 1, 0x80)

    def resume(self):
        self._rvd.writeInt(self._DCR, 1, 0x0c)
                                                                                                     ## GENERATED ##
    def step(self):
        self._rvd.writeInt(self._DCR, 1, 0x0a)

    class GPREGS:

        def __init__(self, c):
            self._c = c

        def __getitem__(self, index):
            return self._c._rvd.readInt(self._c._CREG_GPREG + index*4, 4)                            ## GENERATED ##

        def __setitem__(self, index, value):
            self._c._rvd.writeInt(self._c._CREG_GPREG + index*4, 4, value)

    def __init__(self, rvd, base_address, index):
        self._rvd = rvd
        self._CREG = base_address
        self._CUR_CONTEXT = index

        self._CREG_GPREG = self._CREG + 0x100 + (self._CUR_CONTEXT * 0x400)                          ## GENERATED ##
        self.CREG_GPREG = self.GPREGS(self)

        self._CREG_CTXT = self._CREG + 0x200 + (self._CUR_CONTEXT * 0x400)
        self._CCR = self._CREG_CTXT + 0x000
        self._TC = self._CREG_CTXT + 0x000
        self._BR = self._CREG_CTXT + 0x001
        self._SCCR = self._CREG_CTXT + 0x004
        self._CID = self._CREG_CTXT + 0x004
        self._LR = self._CREG_CTXT + 0x008
        self._PC = self._CREG_CTXT + 0x00C                                                           ## GENERATED ##
        self._TH = self._CREG_CTXT + 0x010
        self._PH = self._CREG_CTXT + 0x014
        self._TP = self._CREG_CTXT + 0x018
        self._TA = self._CREG_CTXT + 0x01C
        self._BR0 = self._CREG_CTXT + 0x020
        self._BR1 = self._CREG_CTXT + 0x024
        self._BR2 = self._CREG_CTXT + 0x028
        self._BR3 = self._CREG_CTXT + 0x02C
        self._DCR = self._CREG_CTXT + 0x030
        self._DCRC = self._CREG_CTXT + 0x031                                                         ## GENERATED ##
        self._DCR2 = self._CREG_CTXT + 0x034
        self._RET = self._CREG_CTXT + 0x034
        self._CRR = self._CREG_CTXT + 0x040
        self._WCFG = self._CREG_CTXT + 0x048
        self._SAWC = self._CREG_CTXT + 0x04C
        self._SCRP1 = self._CREG_CTXT + 0x050
        self._SCRP2 = self._CREG_CTXT + 0x054
        self._SCRP3 = self._CREG_CTXT + 0x058
        self._SCRP4 = self._CREG_CTXT + 0x05C
        self._RSC = self._CREG_CTXT + 0x060                                                          ## GENERATED ##
        self._CSC = self._CREG_CTXT + 0x064
        self._RSC1 = self._CREG_CTXT + 0x068
        self._RSC2 = self._CREG_CTXT + 0x070
        self._RSC3 = self._CREG_CTXT + 0x078
        self._RSC4 = self._CREG_CTXT + 0x080
        self._RSC5 = self._CREG_CTXT + 0x088
        self._RSC6 = self._CREG_CTXT + 0x090
        self._RSC7 = self._CREG_CTXT + 0x098
        self._CSC1 = self._CREG_CTXT + 0x06C
        self._CSC2 = self._CREG_CTXT + 0x074                                                         ## GENERATED ##
        self._CSC3 = self._CREG_CTXT + 0x07C
        self._CSC4 = self._CREG_CTXT + 0x084
        self._CSC5 = self._CREG_CTXT + 0x08C
        self._CSC6 = self._CREG_CTXT + 0x094
        self._CSC7 = self._CREG_CTXT + 0x09C
        self._CYC = self._CREG_CTXT + 0x100
        self._CYCH = self._CREG_CTXT + 0x104
        self._STALL = self._CREG_CTXT + 0x108
        self._STALLH = self._CREG_CTXT + 0x10C
        self._BUN = self._CREG_CTXT + 0x110                                                          ## GENERATED ##
        self._BUNH = self._CREG_CTXT + 0x114
        self._SYL = self._CREG_CTXT + 0x118
        self._SYLH = self._CREG_CTXT + 0x11C
        self._NOP = self._CREG_CTXT + 0x120
        self._NOPH = self._CREG_CTXT + 0x124
        self._IACC = self._CREG_CTXT + 0x128
        self._IACCH = self._CREG_CTXT + 0x12C
        self._IMISS = self._CREG_CTXT + 0x130
        self._IMISSH = self._CREG_CTXT + 0x134
        self._DRACC = self._CREG_CTXT + 0x138                                                        ## GENERATED ##
        self._DRACCH = self._CREG_CTXT + 0x13C
        self._DRMISS = self._CREG_CTXT + 0x140
        self._DRMISSH = self._CREG_CTXT + 0x144
        self._DWACC = self._CREG_CTXT + 0x148
        self._DWACCH = self._CREG_CTXT + 0x14C
        self._DWMISS = self._CREG_CTXT + 0x150
        self._DWMISSH = self._CREG_CTXT + 0x154
        self._DBYPASS = self._CREG_CTXT + 0x158
        self._DBYPASSH = self._CREG_CTXT + 0x15C
        self._DWBUF = self._CREG_CTXT + 0x160                                                        ## GENERATED ##
        self._DWBUFH = self._CREG_CTXT + 0x164
        return


    CCR = property(lambda s: s._rvd.readInt(s._CCR, 4),
        lambda s, v: s._rvd.writeInt(s._CCR, 4, v))
    TC = property(lambda s: s._rvd.readInt(s._TC, 1),
        lambda s, v: s._rvd.writeInt(s._TC, 1, v))
    BR = property(lambda s: s._rvd.readInt(s._BR, 1),
        lambda s, v: s._rvd.writeInt(s._BR, 1, v))                                                   ## GENERATED ##
    SCCR = property(lambda s: s._rvd.readInt(s._SCCR, 4),
        lambda s, v: s._rvd.writeInt(s._SCCR, 4, v))
    CID = property(lambda s: s._rvd.readInt(s._CID, 1),
        lambda s, v: raise_(RuntimeError("CID is not writable")))
    LR = property(lambda s: s._rvd.readInt(s._LR, 4),
        lambda s, v: s._rvd.writeInt(s._LR, 4, v))
    PC = property(lambda s: s._rvd.readInt(s._PC, 4),
        lambda s, v: s._rvd.writeInt(s._PC, 4, v))
    TH = property(lambda s: s._rvd.readInt(s._TH, 4),
        lambda s, v: s._rvd.writeInt(s._TH, 4, v))                                                   ## GENERATED ##
    PH = property(lambda s: s._rvd.readInt(s._PH, 4),
        lambda s, v: s._rvd.writeInt(s._PH, 4, v))
    TP = property(lambda s: s._rvd.readInt(s._TP, 4),
        lambda s, v: s._rvd.writeInt(s._TP, 4, v))
    TA = property(lambda s: s._rvd.readInt(s._TA, 4),
        lambda s, v: s._rvd.writeInt(s._TA, 4, v))
    BR0 = property(lambda s: s._rvd.readInt(s._BR0, 4),
        lambda s, v: s._rvd.writeInt(s._BR0, 4, v))
    BR1 = property(lambda s: s._rvd.readInt(s._BR1, 4),
        lambda s, v: s._rvd.writeInt(s._BR1, 4, v))                                                  ## GENERATED ##
    BR2 = property(lambda s: s._rvd.readInt(s._BR2, 4),
        lambda s, v: s._rvd.writeInt(s._BR2, 4, v))
    BR3 = property(lambda s: s._rvd.readInt(s._BR3, 4),
        lambda s, v: s._rvd.writeInt(s._BR3, 4, v))
    DCR = property(lambda s: s._rvd.readInt(s._DCR, 4),
        lambda s, v: s._rvd.writeInt(s._DCR, 4, v))
    DCRC = property(lambda s: s._rvd.readInt(s._DCRC, 1),
        lambda s, v: s._rvd.writeInt(s._DCRC, 1, v))
    DCR2 = property(lambda s: s._rvd.readInt(s._DCR2, 4),
        lambda s, v: s._rvd.writeInt(s._DCR2, 4, v))                                                 ## GENERATED ##
    RET = property(lambda s: s._rvd.readInt(s._RET, 1),
        lambda s, v: s._rvd.writeInt(s._RET, 1, v))
    CRR = property(lambda s: s._rvd.readInt(s._CRR, 4),
        lambda s, v: raise_(RuntimeError("CRR is not writable")))
    WCFG = property(lambda s: s._rvd.readInt(s._WCFG, 4),
        lambda s, v: raise_(RuntimeError("WCFG is not writable")))
    SAWC = property(lambda s: s._rvd.readInt(s._SAWC, 4),
        lambda s, v: s._rvd.writeInt(s._SAWC, 4, v))
    SCRP1 = property(lambda s: s._rvd.readInt(s._SCRP1, 4),
        lambda s, v: s._rvd.writeInt(s._SCRP1, 4, v))                                                ## GENERATED ##
    SCRP2 = property(lambda s: s._rvd.readInt(s._SCRP2, 4),
        lambda s, v: s._rvd.writeInt(s._SCRP2, 4, v))
    SCRP3 = property(lambda s: s._rvd.readInt(s._SCRP3, 4),
        lambda s, v: s._rvd.writeInt(s._SCRP3, 4, v))
    SCRP4 = property(lambda s: s._rvd.readInt(s._SCRP4, 4),
        lambda s, v: s._rvd.writeInt(s._SCRP4, 4, v))
    RSC = property(lambda s: s._rvd.readInt(s._RSC, 4),
        lambda s, v: raise_(RuntimeError("RSC is not writable")))
    CSC = property(lambda s: s._rvd.readInt(s._CSC, 4),
        lambda s, v: s._rvd.writeInt(s._CSC, 4, v))                                                  ## GENERATED ##
    RSC1 = property(lambda s: s._rvd.readInt(s._RSC1, 4),
        lambda s, v: s._rvd.writeInt(s._RSC1, 4, v))
    RSC2 = property(lambda s: s._rvd.readInt(s._RSC2, 4),
        lambda s, v: s._rvd.writeInt(s._RSC2, 4, v))
    RSC3 = property(lambda s: s._rvd.readInt(s._RSC3, 4),
        lambda s, v: s._rvd.writeInt(s._RSC3, 4, v))
    RSC4 = property(lambda s: s._rvd.readInt(s._RSC4, 4),
        lambda s, v: s._rvd.writeInt(s._RSC4, 4, v))
    RSC5 = property(lambda s: s._rvd.readInt(s._RSC5, 4),
        lambda s, v: s._rvd.writeInt(s._RSC5, 4, v))                                                 ## GENERATED ##
    RSC6 = property(lambda s: s._rvd.readInt(s._RSC6, 4),
        lambda s, v: s._rvd.writeInt(s._RSC6, 4, v))
    RSC7 = property(lambda s: s._rvd.readInt(s._RSC7, 4),
        lambda s, v: s._rvd.writeInt(s._RSC7, 4, v))
    CSC1 = property(lambda s: s._rvd.readInt(s._CSC1, 4),
        lambda s, v: raise_(RuntimeError("CSC1 is not writable")))
    CSC2 = property(lambda s: s._rvd.readInt(s._CSC2, 4),
        lambda s, v: raise_(RuntimeError("CSC2 is not writable")))
    CSC3 = property(lambda s: s._rvd.readInt(s._CSC3, 4),
        lambda s, v: raise_(RuntimeError("CSC3 is not writable")))                                   ## GENERATED ##
    CSC4 = property(lambda s: s._rvd.readInt(s._CSC4, 4),
        lambda s, v: raise_(RuntimeError("CSC4 is not writable")))
    CSC5 = property(lambda s: s._rvd.readInt(s._CSC5, 4),
        lambda s, v: raise_(RuntimeError("CSC5 is not writable")))
    CSC6 = property(lambda s: s._rvd.readInt(s._CSC6, 4),
        lambda s, v: raise_(RuntimeError("CSC6 is not writable")))
    CSC7 = property(lambda s: s._rvd.readInt(s._CSC7, 4),
        lambda s, v: raise_(RuntimeError("CSC7 is not writable")))
    CYC = property(lambda s: s._rvd.readInt(s._CYC, 4),
        lambda s, v: s._rvd.writeInt(s._CYC, 4, v))                                                  ## GENERATED ##
    CYCH = property(lambda s: s._rvd.readInt(s._CYCH, 4),
        lambda s, v: s._rvd.writeInt(s._CYCH, 4, v))
    STALL = property(lambda s: s._rvd.readInt(s._STALL, 4),
        lambda s, v: s._rvd.writeInt(s._STALL, 4, v))
    STALLH = property(lambda s: s._rvd.readInt(s._STALLH, 4),
        lambda s, v: s._rvd.writeInt(s._STALLH, 4, v))
    BUN = property(lambda s: s._rvd.readInt(s._BUN, 4),
        lambda s, v: s._rvd.writeInt(s._BUN, 4, v))
    BUNH = property(lambda s: s._rvd.readInt(s._BUNH, 4),
        lambda s, v: s._rvd.writeInt(s._BUNH, 4, v))                                                 ## GENERATED ##
    SYL = property(lambda s: s._rvd.readInt(s._SYL, 4),
        lambda s, v: s._rvd.writeInt(s._SYL, 4, v))
    SYLH = property(lambda s: s._rvd.readInt(s._SYLH, 4),
        lambda s, v: s._rvd.writeInt(s._SYLH, 4, v))
    NOP = property(lambda s: s._rvd.readInt(s._NOP, 4),
        lambda s, v: s._rvd.writeInt(s._NOP, 4, v))
    NOPH = property(lambda s: s._rvd.readInt(s._NOPH, 4),
        lambda s, v: s._rvd.writeInt(s._NOPH, 4, v))
    IACC = property(lambda s: s._rvd.readInt(s._IACC, 4),
        lambda s, v: s._rvd.writeInt(s._IACC, 4, v))                                                 ## GENERATED ##
    IACCH = property(lambda s: s._rvd.readInt(s._IACCH, 4),
        lambda s, v: s._rvd.writeInt(s._IACCH, 4, v))
    IMISS = property(lambda s: s._rvd.readInt(s._IMISS, 4),
        lambda s, v: s._rvd.writeInt(s._IMISS, 4, v))
    IMISSH = property(lambda s: s._rvd.readInt(s._IMISSH, 4),
        lambda s, v: s._rvd.writeInt(s._IMISSH, 4, v))
    DRACC = property(lambda s: s._rvd.readInt(s._DRACC, 4),
        lambda s, v: s._rvd.writeInt(s._DRACC, 4, v))
    DRACCH = property(lambda s: s._rvd.readInt(s._DRACCH, 4),
        lambda s, v: s._rvd.writeInt(s._DRACCH, 4, v))                                               ## GENERATED ##
    DRMISS = property(lambda s: s._rvd.readInt(s._DRMISS, 4),
        lambda s, v: s._rvd.writeInt(s._DRMISS, 4, v))
    DRMISSH = property(lambda s: s._rvd.readInt(s._DRMISSH, 4),
        lambda s, v: s._rvd.writeInt(s._DRMISSH, 4, v))
    DWACC = property(lambda s: s._rvd.readInt(s._DWACC, 4),
        lambda s, v: s._rvd.writeInt(s._DWACC, 4, v))
    DWACCH = property(lambda s: s._rvd.readInt(s._DWACCH, 4),
        lambda s, v: s._rvd.writeInt(s._DWACCH, 4, v))
    DWMISS = property(lambda s: s._rvd.readInt(s._DWMISS, 4),
        lambda s, v: s._rvd.writeInt(s._DWMISS, 4, v))                                               ## GENERATED ##
    DWMISSH = property(lambda s: s._rvd.readInt(s._DWMISSH, 4),
        lambda s, v: s._rvd.writeInt(s._DWMISSH, 4, v))
    DBYPASS = property(lambda s: s._rvd.readInt(s._DBYPASS, 4),
        lambda s, v: s._rvd.writeInt(s._DBYPASS, 4, v))
    DBYPASSH = property(lambda s: s._rvd.readInt(s._DBYPASSH, 4),
        lambda s, v: s._rvd.writeInt(s._DBYPASSH, 4, v))
    DWBUF = property(lambda s: s._rvd.readInt(s._DWBUF, 4),
        lambda s, v: s._rvd.writeInt(s._DWBUF, 4, v))
    DWBUFH = property(lambda s: s._rvd.readInt(s._DWBUFH, 4),
        lambda s, v: s._rvd.writeInt(s._DWBUFH, 4, v))                                               ## GENERATED ##

class Core:
    def __init__(self, rvd, base_address, num_contexts=4):
        self._rvd = rvd
        self._CREG_GLOB = base_address
        self.context = [Context(rvd, base_address, x) for x in range(num_contexts)]
        self._GSR = self._CREG_GLOB + 0x000
        self._BCRR = self._CREG_GLOB + 0x004
        self._CC = self._CREG_GLOB + 0x008
        self._AFF = self._CREG_GLOB + 0x00C                                                          ## GENERATED ##
        self._CNT = self._CREG_GLOB + 0x010
        self._CNTH = self._CREG_GLOB + 0x014
        self._LIMC7 = self._CREG_GLOB + 0x0A0
        self._BORROW15 = self._CREG_GLOB + 0x0A1
        self._BORROW14 = self._CREG_GLOB + 0x0A3
        self._LIMC6 = self._CREG_GLOB + 0x0A4
        self._BORROW13 = self._CREG_GLOB + 0x0A5
        self._BORROW12 = self._CREG_GLOB + 0x0A7
        self._LIMC5 = self._CREG_GLOB + 0x0A8
        self._BORROW11 = self._CREG_GLOB + 0x0A9                                                     ## GENERATED ##
        self._BORROW10 = self._CREG_GLOB + 0x0AB
        self._LIMC4 = self._CREG_GLOB + 0x0AC
        self._BORROW9 = self._CREG_GLOB + 0x0AD
        self._BORROW8 = self._CREG_GLOB + 0x0AF
        self._LIMC3 = self._CREG_GLOB + 0x0B0
        self._BORROW7 = self._CREG_GLOB + 0x0B1
        self._BORROW6 = self._CREG_GLOB + 0x0B3
        self._LIMC2 = self._CREG_GLOB + 0x0B4
        self._BORROW5 = self._CREG_GLOB + 0x0B5
        self._BORROW4 = self._CREG_GLOB + 0x0B7                                                      ## GENERATED ##
        self._LIMC1 = self._CREG_GLOB + 0x0B8
        self._BORROW3 = self._CREG_GLOB + 0x0B9
        self._BORROW2 = self._CREG_GLOB + 0x0BB
        self._LIMC0 = self._CREG_GLOB + 0x0BC
        self._BORROW1 = self._CREG_GLOB + 0x0BD
        self._BORROW0 = self._CREG_GLOB + 0x0BF
        self._SIC3 = self._CREG_GLOB + 0x0C0
        self._SYL15CAP = self._CREG_GLOB + 0x0C0
        self._SYL14CAP = self._CREG_GLOB + 0x0C1
        self._SYL13CAP = self._CREG_GLOB + 0x0C2                                                     ## GENERATED ##
        self._SYL12CAP = self._CREG_GLOB + 0x0C3
        self._SIC2 = self._CREG_GLOB + 0x0C4
        self._SYL11CAP = self._CREG_GLOB + 0x0C4
        self._SYL10CAP = self._CREG_GLOB + 0x0C5
        self._SYL9CAP = self._CREG_GLOB + 0x0C6
        self._SYL8CAP = self._CREG_GLOB + 0x0C7
        self._SIC1 = self._CREG_GLOB + 0x0C8
        self._SYL7CAP = self._CREG_GLOB + 0x0C8
        self._SYL6CAP = self._CREG_GLOB + 0x0C9
        self._SYL5CAP = self._CREG_GLOB + 0x0CA                                                      ## GENERATED ##
        self._SYL4CAP = self._CREG_GLOB + 0x0CB
        self._SIC0 = self._CREG_GLOB + 0x0CC
        self._SYL3CAP = self._CREG_GLOB + 0x0CC
        self._SYL2CAP = self._CREG_GLOB + 0x0CD
        self._SYL1CAP = self._CREG_GLOB + 0x0CE
        self._SYL0CAP = self._CREG_GLOB + 0x0CF
        self._GPS1 = self._CREG_GLOB + 0x0D0
        self._GPS0 = self._CREG_GLOB + 0x0D4
        self._SPS1 = self._CREG_GLOB + 0x0D8
        self._SPS0 = self._CREG_GLOB + 0x0DC                                                         ## GENERATED ##
        self._EXT2 = self._CREG_GLOB + 0x0E0
        self._EXT1 = self._CREG_GLOB + 0x0E4
        self._EXT0 = self._CREG_GLOB + 0x0E8
        self._DCFG = self._CREG_GLOB + 0x0EC
        self._CVER1 = self._CREG_GLOB + 0x0F0
        self._CVER = self._CREG_GLOB + 0x0F0
        self._CTAG = self._CREG_GLOB + 0x0F1
        self._CVER0 = self._CREG_GLOB + 0x0F4
        self._PVER1 = self._CREG_GLOB + 0x0F8
        self._COID = self._CREG_GLOB + 0x0F8                                                         ## GENERATED ##
        self._PTAG = self._CREG_GLOB + 0x0F9
        self._PVER0 = self._CREG_GLOB + 0x0FC
        return

    GSR = property(lambda s: s._rvd.readInt(s._GSR, 4),
        lambda s, v: s._rvd.writeInt(s._GSR, 4, v))
    BCRR = property(lambda s: s._rvd.readInt(s._BCRR, 4),
        lambda s, v: s._rvd.writeInt(s._BCRR, 4, v))
    CC = property(lambda s: s._rvd.readInt(s._CC, 4),
        lambda s, v: raise_(RuntimeError("CC is not writable")))                                     ## GENERATED ##
    AFF = property(lambda s: s._rvd.readInt(s._AFF, 4),
        lambda s, v: raise_(RuntimeError("AFF is not writable")))
    CNT = property(lambda s: s._rvd.readInt(s._CNT, 4),
        lambda s, v: raise_(RuntimeError("CNT is not writable")))
    CNTH = property(lambda s: s._rvd.readInt(s._CNTH, 4),
        lambda s, v: raise_(RuntimeError("CNTH is not writable")))
    LIMC7 = property(lambda s: s._rvd.readInt(s._LIMC7, 4),
        lambda s, v: raise_(RuntimeError("LIMC7 is not writable")))
    BORROW15 = property(lambda s: s._rvd.readInt(s._BORROW15, 2),
        lambda s, v: raise_(RuntimeError("BORROW15 is not writable")))                               ## GENERATED ##
    BORROW14 = property(lambda s: s._rvd.readInt(s._BORROW14, 2),
        lambda s, v: raise_(RuntimeError("BORROW14 is not writable")))
    LIMC6 = property(lambda s: s._rvd.readInt(s._LIMC6, 4),
        lambda s, v: raise_(RuntimeError("LIMC6 is not writable")))
    BORROW13 = property(lambda s: s._rvd.readInt(s._BORROW13, 2),
        lambda s, v: raise_(RuntimeError("BORROW13 is not writable")))
    BORROW12 = property(lambda s: s._rvd.readInt(s._BORROW12, 2),
        lambda s, v: raise_(RuntimeError("BORROW12 is not writable")))
    LIMC5 = property(lambda s: s._rvd.readInt(s._LIMC5, 4),
        lambda s, v: raise_(RuntimeError("LIMC5 is not writable")))                                  ## GENERATED ##
    BORROW11 = property(lambda s: s._rvd.readInt(s._BORROW11, 2),
        lambda s, v: raise_(RuntimeError("BORROW11 is not writable")))
    BORROW10 = property(lambda s: s._rvd.readInt(s._BORROW10, 2),
        lambda s, v: raise_(RuntimeError("BORROW10 is not writable")))
    LIMC4 = property(lambda s: s._rvd.readInt(s._LIMC4, 4),
        lambda s, v: raise_(RuntimeError("LIMC4 is not writable")))
    BORROW9 = property(lambda s: s._rvd.readInt(s._BORROW9, 2),
        lambda s, v: raise_(RuntimeError("BORROW9 is not writable")))
    BORROW8 = property(lambda s: s._rvd.readInt(s._BORROW8, 2),
        lambda s, v: raise_(RuntimeError("BORROW8 is not writable")))                                ## GENERATED ##
    LIMC3 = property(lambda s: s._rvd.readInt(s._LIMC3, 4),
        lambda s, v: raise_(RuntimeError("LIMC3 is not writable")))
    BORROW7 = property(lambda s: s._rvd.readInt(s._BORROW7, 2),
        lambda s, v: raise_(RuntimeError("BORROW7 is not writable")))
    BORROW6 = property(lambda s: s._rvd.readInt(s._BORROW6, 2),
        lambda s, v: raise_(RuntimeError("BORROW6 is not writable")))
    LIMC2 = property(lambda s: s._rvd.readInt(s._LIMC2, 4),
        lambda s, v: raise_(RuntimeError("LIMC2 is not writable")))
    BORROW5 = property(lambda s: s._rvd.readInt(s._BORROW5, 2),
        lambda s, v: raise_(RuntimeError("BORROW5 is not writable")))                                ## GENERATED ##
    BORROW4 = property(lambda s: s._rvd.readInt(s._BORROW4, 2),
        lambda s, v: raise_(RuntimeError("BORROW4 is not writable")))
    LIMC1 = property(lambda s: s._rvd.readInt(s._LIMC1, 4),
        lambda s, v: raise_(RuntimeError("LIMC1 is not writable")))
    BORROW3 = property(lambda s: s._rvd.readInt(s._BORROW3, 2),
        lambda s, v: raise_(RuntimeError("BORROW3 is not writable")))
    BORROW2 = property(lambda s: s._rvd.readInt(s._BORROW2, 2),
        lambda s, v: raise_(RuntimeError("BORROW2 is not writable")))
    LIMC0 = property(lambda s: s._rvd.readInt(s._LIMC0, 4),
        lambda s, v: raise_(RuntimeError("LIMC0 is not writable")))                                  ## GENERATED ##
    BORROW1 = property(lambda s: s._rvd.readInt(s._BORROW1, 2),
        lambda s, v: raise_(RuntimeError("BORROW1 is not writable")))
    BORROW0 = property(lambda s: s._rvd.readInt(s._BORROW0, 2),
        lambda s, v: raise_(RuntimeError("BORROW0 is not writable")))
    SIC3 = property(lambda s: s._rvd.readInt(s._SIC3, 4),
        lambda s, v: raise_(RuntimeError("SIC3 is not writable")))
    SYL15CAP = property(lambda s: s._rvd.readInt(s._SYL15CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL15CAP is not writable")))
    SYL14CAP = property(lambda s: s._rvd.readInt(s._SYL14CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL14CAP is not writable")))                               ## GENERATED ##
    SYL13CAP = property(lambda s: s._rvd.readInt(s._SYL13CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL13CAP is not writable")))
    SYL12CAP = property(lambda s: s._rvd.readInt(s._SYL12CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL12CAP is not writable")))
    SIC2 = property(lambda s: s._rvd.readInt(s._SIC2, 4),
        lambda s, v: raise_(RuntimeError("SIC2 is not writable")))
    SYL11CAP = property(lambda s: s._rvd.readInt(s._SYL11CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL11CAP is not writable")))
    SYL10CAP = property(lambda s: s._rvd.readInt(s._SYL10CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL10CAP is not writable")))                               ## GENERATED ##
    SYL9CAP = property(lambda s: s._rvd.readInt(s._SYL9CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL9CAP is not writable")))
    SYL8CAP = property(lambda s: s._rvd.readInt(s._SYL8CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL8CAP is not writable")))
    SIC1 = property(lambda s: s._rvd.readInt(s._SIC1, 4),
        lambda s, v: raise_(RuntimeError("SIC1 is not writable")))
    SYL7CAP = property(lambda s: s._rvd.readInt(s._SYL7CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL7CAP is not writable")))
    SYL6CAP = property(lambda s: s._rvd.readInt(s._SYL6CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL6CAP is not writable")))                                ## GENERATED ##
    SYL5CAP = property(lambda s: s._rvd.readInt(s._SYL5CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL5CAP is not writable")))
    SYL4CAP = property(lambda s: s._rvd.readInt(s._SYL4CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL4CAP is not writable")))
    SIC0 = property(lambda s: s._rvd.readInt(s._SIC0, 4),
        lambda s, v: raise_(RuntimeError("SIC0 is not writable")))
    SYL3CAP = property(lambda s: s._rvd.readInt(s._SYL3CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL3CAP is not writable")))
    SYL2CAP = property(lambda s: s._rvd.readInt(s._SYL2CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL2CAP is not writable")))                                ## GENERATED ##
    SYL1CAP = property(lambda s: s._rvd.readInt(s._SYL1CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL1CAP is not writable")))
    SYL0CAP = property(lambda s: s._rvd.readInt(s._SYL0CAP, 1),
        lambda s, v: raise_(RuntimeError("SYL0CAP is not writable")))
    GPS1 = property(lambda s: s._rvd.readInt(s._GPS1, 4),
        lambda s, v: raise_(RuntimeError("GPS1 is not writable")))
    GPS0 = property(lambda s: s._rvd.readInt(s._GPS0, 4),
        lambda s, v: raise_(RuntimeError("GPS0 is not writable")))
    SPS1 = property(lambda s: s._rvd.readInt(s._SPS1, 4),
        lambda s, v: raise_(RuntimeError("SPS1 is not writable")))                                   ## GENERATED ##
    SPS0 = property(lambda s: s._rvd.readInt(s._SPS0, 4),
        lambda s, v: raise_(RuntimeError("SPS0 is not writable")))
    EXT2 = property(lambda s: s._rvd.readInt(s._EXT2, 4),
        lambda s, v: raise_(RuntimeError("EXT2 is not writable")))
    EXT1 = property(lambda s: s._rvd.readInt(s._EXT1, 4),
        lambda s, v: raise_(RuntimeError("EXT1 is not writable")))
    EXT0 = property(lambda s: s._rvd.readInt(s._EXT0, 4),
        lambda s, v: raise_(RuntimeError("EXT0 is not writable")))
    DCFG = property(lambda s: s._rvd.readInt(s._DCFG, 4),
        lambda s, v: raise_(RuntimeError("DCFG is not writable")))                                   ## GENERATED ##
    CVER1 = property(lambda s: s._rvd.readInt(s._CVER1, 4),
        lambda s, v: raise_(RuntimeError("CVER1 is not writable")))
    CVER = property(lambda s: s._rvd.readInt(s._CVER, 1),
        lambda s, v: raise_(RuntimeError("CVER is not writable")))
    CTAG = property(lambda s: s._rvd.readInt(s._CTAG, 1),
        lambda s, v: raise_(RuntimeError("CTAG is not writable")))
    CVER0 = property(lambda s: s._rvd.readInt(s._CVER0, 4),
        lambda s, v: raise_(RuntimeError("CVER0 is not writable")))
    PVER1 = property(lambda s: s._rvd.readInt(s._PVER1, 4),
        lambda s, v: raise_(RuntimeError("PVER1 is not writable")))                                  ## GENERATED ##
    COID = property(lambda s: s._rvd.readInt(s._COID, 1),
        lambda s, v: raise_(RuntimeError("COID is not writable")))
    PTAG = property(lambda s: s._rvd.readInt(s._PTAG, 1),
        lambda s, v: raise_(RuntimeError("PTAG is not writable")))
    PVER0 = property(lambda s: s._rvd.readInt(s._PVER0, 4),
        lambda s, v: raise_(RuntimeError("PVER0 is not writable")))

