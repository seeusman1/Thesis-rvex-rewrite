#!/usr/bin/python3


# Version number.
version = '4.2pre'

# Files/directories that are checked in to rvex-rewrite but should not be
# released.
exclude = [
    'releaseme.py',
    'lib/libs.txt',
    'lib/nw_dma',
    'platform/ml605-grlib-pcie',
    'platform/ml605-grlib-bare',
    'platform/synopsys-90nm',
    'platform/vc707-grlib',
    'platform/vc707-stream',
    'platform/zed-almarvi',
    'release-todo',
    'version',
    'tools/build-dir/download.makefile',
    'tools/README', # This is for TU Delft people checking out the rvex-rewrite repo only
]

# Files/directories that are NOT checked in, but SHOULD be released.
# Shell-style wildcards work here.
include = [
    'tools/vexparse/*.py',
    'tools/rvex-elf32/*',
    'tools/simrvex/*',
    'tools/open64/issue*/*',
    'tools/vex-3.43/*',
    'tools/newlib/*',
    'versions/release-*'
]

# Files that should be added.
add = {
    'lib/libs.txt': b'rvex\n',
    'version': b'release-' + version.encode('ascii'),
    'tools/build-dir/download.makefile': (
        b'\n$(DOWNLOADS):\n' +
        b'\twget http://ftp.tudelft.nl/TUDelft/rvex/releases/4.x/4.1/toolsrc/$@.tar.bz2\n' +
        b'\ttar -xjf $@.tar.bz2\n' +
        b'\trm $@.tar.bz2\n\n'
    ),
}

# Hard-path excludes.
hp_exclude = [
    r'\.xpr:<Project', # Vivado likes to put hard paths in xprs which it never uses.
    r'VEXdiv.S:.comment', # Comment above VEXdiv.S generated by the VEX compiler.
]




from plumbum import local
from glob import glob
from os.path import isdir, dirname, normpath, exists
from os import sep, readlink
from sys import exit
import re

print('Gathering files...')

files = local['git']('ls-files').split()

print('Copying files to release dir...')

files = [f for f in files if not any([f.startswith(e + '/') or f == e for e in exclude])]
for i in include:
    files += glob(i)

rdir = 'rvex-release-' + version

local['rm']['-rf'](rdir)
local['mkdir'](rdir)

for f in files:
    od = rdir + sep + dirname(f)
    if not isdir(od):
        local['mkdir']['-p'](od)
    local['cp']['-r'][f](od)

for f, d in add.items():
    od = rdir + sep + dirname(f)
    if not isdir(od):
        local['mkdir']['-p'](od)
    if isinstance(d, bytes):
        with open(rdir + sep + f, 'wb') as f:
            f.write(d)
    else:
        print('Unknown data type for additional file ' + f)
        exit(1)

print('Checking for broken symlinks...')

sym_errors = False
syms = local['find'][rdir]['-type']('l').split()
for sym in syms:
    if not exists(sym):
        print('  Symlink %s is broken.' % sym)
        continue
    targ = readlink(sym)
    if targ.startswith('/'):
        print('  Symlink %s uses a hard path.' % sym)
        sym_errors = True
        continue
    deref = normpath(dirname(sym) + sep + targ)
    if not deref.startswith(rdir):
        print('  Symlink %s breaks out of the release dir.' % sym)
        sym_errors = True
        continue
if sym_errors:
    exit(1)
    
print('Checking for hard paths...')

hard_paths  = local['grep']['-R']['[^a-zA-Z0-9]/data/'](rdir, retcode=None).split('\n')
hard_paths += local['grep']['-R']['[^a-zA-Z0-9]/shares/group/ce-rvex/'](rdir, retcode=None).split('\n')
hard_paths += local['grep']['-R']['[^a-zA-Z0-9]/opt/applics/'](rdir, retcode=None).split('\n')

hard_path_err = False
for hp in hard_paths:
    if not hp:
        continue
    for ex in hp_exclude:
        if re.search(ex, hp):
            break
    else:
        print('  ' + hp)
        hard_path_err = True
if hard_path_err:
    print('Those should probably not be there. If any are not important, add ' +
          'the files to the don\'t care list.')
#    exit(1)

print('Compressing...')

local['7z']['a'][rdir + '.7z'](rdir)

print('Done!')
