Assuming the following pipeline configuration:

            clk        clk        clk        clk        clk
  :----S1----:----S2----:----S3----:----S4----:----S5----:----S6----:
  :    .---------..----.:      .-------..---------.   .-----.       :
  :    |  IMEM   ||Btgt|:      |  ALU  ||  DMEM   |   |Reg. |       :
  :    '---------''----':      '-------''---------'   |write|       :
  :    .----.:       .-----.   .------------------.   '-----'       :
  :    |PC+1|:       |Reg. |   |   :   MUL    :   |      :          :
  :    '----':       |read |   '------------------'      :          :
  :          :       '-----'       :    .---. :          :          :
  :          :    .----.:          :    |BRK| :          :          :
  :          :    |limm|:          :    '---' :          :          :
  :          :    '----':          :          :          :          :
  '----S1----'----S2----'----S3----'----S4----'----S5----'----S6----'
        ^      |          |    ^        |          |          |*
        |      v          v    |        v          v          v
      .-------------------.  .--------------------------------.
      |    Branch unit    |  |General purpose reg. forwarding |
      '-------------------'  '--------------------------------'
    ----S1---- ----S2---- ----S3---- ----S4---- ----S5---- ----S6----
                        ^    ^         |          |      |
                        |    |         v          v      |
                        |   .----------------------.     |
                        |   |Branch & link forward.|     |
                        |   '----------------------'     |
                        |                                |
                        '--------------------------------'
                                Trap forwarding


-------------------------------------------------------------------------------
-- General purpose, branch and link datapath latencies
-------------------------------------------------------------------------------
To clarify, a latency of 1 cycle means that the result is valid in the next
executed bundle. Note that the size of the executed bundle depends on the
current runtime configuration, so 1 cycle means something like "at most one
generic binary bundle".

 - ALU -> users of ALU destination register(s): 1 cycle
 - MEM load -> users of MEM destination register: 2 cycles
 - MUL -> users of MUL destination register: 2 cycles
 - RETURN/RFI -> users of r0.1: 1 cycle
     
-------------------------------------------------------------------------------
-- Special cases involving traps
-------------------------------------------------------------------------------

 - A memory store instruction in the same cycle as an S5 trap:
    - Memory has already been committed, unless the trap was caused by the
      memory itself. Because the only S5 trap currently is a memory fault, this
      is not a problem right now.
 
 - An RFI instruction in the same cycle as an S5 trap:
    - Context control register will be restored erroneously if an RFI
      instruction is executed in the same cycle. Because the only S5 trap 
      currently is a memory fault, this can be easily avoided by not having a
      memory operation in the same bundle as an RFI instruction.

-------------------------------------------------------------------------------
-- Raw stage information
-------------------------------------------------------------------------------

ALU operations:
 - Using forwarded data from S3 (gpreg, branch, link if r0.63=link).
 - Forwarding result starting from S4 (gpreg, branch, link if r0.63=link).
 - Committing result in S5 (gpreg, branch, link if r0.63=link) if S5 valid.

MEM load operations:
 - Using forwarded data from S3 (gpreg, link).
 - Accessing memory/control registers in S4.
 - Forwarding result starting from S5 (gpreg, link).
 - Committing result in S5 (gpreg, link) if S5 valid.

MEM store operations:
 - Using forwarded data from S3 (gpreg, link).
 - Committing to memory/control registers in S4 if S4 valid and no mem fault.

MUL operations:
 - Using forwarded data from S3 (gpreg, link if r0.63=link).
 - Forwarding result starting from S5.
 - Committing result in S5 (gpreg, link if r0.63=link) if S5 valid.

RETURN instruction:
 - Using forwarded data from S3 (r0.1, link).
 - Forwarding result starting from S4 (r0.1).
 - Committing result in S5 (r0.1) if S5 valid.

RFI instruction:
 - Using forwarded data from S3 (r0.1).
 - Using control register data from S3.
 - Forwarding result starting from S4 (r0.1).
 - Committing to control registers in S4 if S4 valid.
 - Committing result in S5 (r0.1) if S5 valid.

Other BR operations:
 - Using forwarded data from S3.

Traps:
 - Committing to control registers in S3 ( = S7 after flush and forwarding)

Invalid operation:
 - Issued in/invalidates up to and including S2

Misaligned branch:
 - Issued in/invalidates up to and including S3

Fetch fault:
 - Issued in/invalidates up to and including S2

Misaligned access:
 - Issued in/invalidates up to and including S4

Data memory fault:
 - Issued in/invalidates up to and including S5*

LIMMH fault:
 - Issued in/invalidates up to and including S2

External interrupt:
 - Issued in/invalidates up to and including S4

Stop trap:
 - Issued in/invalidates up to and including S3

Soft trap (non-debug):
 - Issued in/invalidates up to and including S4

All debug traps:
 - Issued in/invalidates up to and including S4


* Only the data memory fault may be issued in S5, because S5 traps cannot
disable commits to memory.
