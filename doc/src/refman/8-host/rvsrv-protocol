
Tokenization
------------

 * All characters not in [,;a-zA-Z0-9] are completely ignored.
 * Packet delimiter = ';'
 * Parameter delimiter = ','
 * The client always sends a command first, then rvsrv will send a reply as soon
   as possible.

Structure of all replies
------------------------

 * Error reply: "Error,<cmd>,<code>;"
   <cmd> equals the first parameter of the command.
   <code> is some command-dependent error message name. rvd just prints
   whatever's in there when an error is received.
   
 * Acknowledgement: "OK,<cmd>[...];"
   <cmd> equals the first parameter of the command.
   [...] is a command-dependent reply.
 
Defined commands
----------------

Stop command:      "Stop;"
  OK reply:        "OK,Stop;"

This command requests that rvsrv be stopped.


Bus read command:  "Read,<addr>,<count>;"
  OK reply:        "OK,Read,OK,<addr>,<count>,<data>;"
  Fault reply:     "OK,Read,Fault,<addr>,<count>,<code>;"
  
Bus write command: "Write,<addr>,<count>,<data>;"
  OK reply:        "OK,Write,OK,<addr>,<count>;"
  Fault reply:     "OK,Write,Fault,<addr>,<count>,<code>;"

NOT YET IMPLEMENTED:
ROM read command:  "ROM,<addr>,<count>;"
  OK reply:        "OK,ROM,OK,<addr>,<count>,<data>;"

<addr> is an 8-digit hex number specifying the start address.
<count> is a decimal integer between 1 and 4096, specifying the number of
bytes to read/write.
<data> is a hex array, <count>*2 in length, specifying the read/write data.
<code> is an 8-digit hex number specifying the bus fault code.

1, 2 and 4 byte read/writes are guaranteed to be in-order and atomic. Larger
read/writes may be read/written one or more times in any order, and bus fault
detection is best-effort only.

ROM read commands work the same way as normal reads, but they will go to the
debug support unit ROM instead of the bus. This ROM is supposed to contain
version information stuff.

